<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mybatis注解写法]]></title>
    <url>%2F2018%2F11%2F13%2FMybatis%E6%B3%A8%E8%A7%A3%E5%86%99%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.普通增删改查使用表：User在mybatis-config.xml里配置1&lt;mapper class="org.fkit.mapper.UserMapper"/&gt; 注释掉原来的xml配置路径。注解java类：123456789101112131415161718192021222324252627282930313233//UserMapper.javapackage org.fkit.mapper;import org.apache.ibatis.annotations.*;import org.fkit.domain.Clazz;import org.fkit.domain.User;import java.util.List;public interface UserMapper &#123; @Insert("insert into tb_user(name,sex,age) values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;age&#125;)") @Options(useGeneratedKeys = true, keyProperty = "id") int saveUser(User user); @Delete("delete from tb_user where id = #&#123;id&#125; or name = #&#123;cctv&#125;") int removeUser(@Param("id") Integer id, @Param("cctv") String n); @Update("update tb_user set name = #&#123;name&#125;,sex = #&#123;sex&#125;, age = #&#123;age&#125; where id = #&#123;id&#125;") void modifyUser(User user); @Select("select * from tb_user where id = #&#123;id&#125;") @Results(&#123; @Result(id = true, column = "id", property = "id"), @Result(column = "name", property = "name"), @Result(column = "sex", property = "sex"), @Result(column = "age", property = "age") &#125;) User selectUserById(Integer id); @Select("select * from tb_user") List&lt;User&gt; selectAllUser();&#125; 测试：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899//InsertTest.javapublic class InsertTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); User user = new User("1111jack", "男", 22); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); userMapper.saveUser(user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: insert into tb_user(name,sex,age) values(?,?,?) DEBUG [main] - ==&gt; Parameters: 1111jack(String), 男(String), 22(Integer)DEBUG [main] - &lt;== Updates: 1//DeleteTest.javapublic class DeleteTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); userMapper.removeUser(16,"jack"); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: delete from tb_user where id = ? or name = ? DEBUG [main] - ==&gt; Parameters: 16(Integer), jack(String)DEBUG [main] - &lt;== Updates: 1//UpdateTest.javapublic class UpdateTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); User user = userMapper.selectUserById(12); user.setName("hello?"); userMapper.modifyUser(user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: select * from tb_user where id = ? DEBUG [main] - ==&gt; Parameters: 12(Integer)DEBUG [main] - &lt;== Total: 1DEBUG [main] - ==&gt; Preparing: update tb_user set name = ?,sex = ?, age = ? where id = ? DEBUG [main] - ==&gt; Parameters: hello?(String), 男(String), 26(Integer), 12(Integer)DEBUG [main] - &lt;== Updates: 1//SelectTest.javapublic class SelectTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); User user = userMapper.selectUserById(12); System.out.println(user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: select * from tb_user where id = ? DEBUG [main] - ==&gt; Parameters: 12(Integer)DEBUG [main] - &lt;== Total: 1User&#123;id=12, name='hello?', sex='男', age=26&#125;//SelectMapTest.javapublic class SelectMapTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession();// 获取user对象集 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); List&lt;User&gt; users = userMapper.selectAllUser(); for (User user : users) &#123; System.out.println(user); &#125; sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: select * from tb_user DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 10User&#123;id=1, name='hello?', sex='g', age=11&#125;User&#123;id=4, name='gg', sex='男', age=26&#125;User&#123;id=5, name='gg', sex='男', age=26&#125;User&#123;id=6, name='gg', sex='男', age=26&#125;User&#123;id=7, name='gg', sex='男', age=26&#125;User&#123;id=8, name='gg', sex='男', age=26&#125;User&#123;id=9, name='gg', sex='男', age=26&#125;User&#123;id=10, name='gg', sex='男', age=26&#125;User&#123;id=11, name='gg', sex='男', age=26&#125;User&#123;id=12, name='hello?', sex='男', age=26&#125;]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mabatis逆向工程]]></title>
    <url>%2F2018%2F11%2F13%2Fmabatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文使用idea编译器，安装Mybatisplus插件后可以使用逆向工程。 配置：1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" &gt;&lt;generatorConfiguration&gt; &lt;classPathEntry location="C:/Users/34924/Desktop/mysql-connector-java-5.1.46.jar"/&gt; &lt;context id="context" targetRuntime="MyBatis3"&gt; &lt;commentGenerator&gt; &lt;property name="suppressAllComments" value="true"/&gt; &lt;property name="suppressDate" value="false"/&gt; &lt;/commentGenerator&gt; &lt;!--&lt;jdbcConnection userId="root" password="123456" driverClass="com.mysql.jdbc.Driver"--&gt; &lt;!--connectionURL="jdbc:mysql://localhost:3306/sss"/&gt;--&gt; &lt;javaTypeResolver&gt; &lt;property name="forceBigDecimals" value="false"/&gt; &lt;/javaTypeResolver&gt; &lt;javaModelGenerator targetPackage="org.model" targetProject="."&gt; &lt;property name="enableSubPackages" value="false"/&gt; &lt;property name="trimStrings" value="true"/&gt; &lt;/javaModelGenerator&gt; &lt;sqlMapGenerator targetPackage="org.mapper" targetProject="."&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/sqlMapGenerator&gt; &lt;javaClientGenerator targetPackage="org.mapper" type="MIXEDMAPPER" targetProject="."&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/javaClientGenerator&gt; &lt;table schema="sn349245467" tableName="polls_question" enableCountByExample="false" enableDeleteByExample="false" enableUpdateByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"/&gt; &lt;table schema="sn349245467" tableName="polls_choice" enableCountByExample="false" enableDeleteByExample="false" enableUpdateByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"/&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 注意：jdbc版本最好用5.x左右的，targetRuntime使用Mybatis3，使用简略版的会少东西。javaClientGenerator的type选用MIXEDMAPPER。 使用了逆向工程后，在一对多等关系的时候，需要把默认的查找方式由select param1,param2,…改为select *，以及改resultMap的BaseResultMap。]]></content>
      <categories>
        <category>java</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>java</tag>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea创建maven项目时显示“Loading archetype list ”]]></title>
    <url>%2F2018%2F11%2F13%2Fidea%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%98%BE%E7%A4%BA%E2%80%9CLoading%20archetype%20list%20%E2%80%9D%2F</url>
    <content type="text"><![CDATA[本文参考https://blog.csdn.net/u011403655/article/details/46843331 1.idea创建maven项目时一直显示“Loading archetype list ”删除{User_Home}/.IntelliJIdea{Version}/system/Maven/Indices下面的文件，然后重启idea。 2.IntelliJ IDEA 创建maven-archetype-webapp超时问题 File -&gt; Other Settings -&gt; Default Settings… Build, Execution, Deployment -&gt; Build Tools -&gt; Maven -&gt; Runner, 在VM Options中填写如下 -DarchetypeCatalog=internal Apply -&gt; OK即可 3.创建完项目后命令行卡在 [INFO] Generating project in Batch modeMaven命令执行到Generating Project in Batch mode 卡住，原因是网络带宽不足，需要下载一个约4.1M的archetype-catalog.xml文件。 在maven的五分钟入门里面，有这样一个命令： mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false这句话的命令是创建一个默认的项目，但我在执行这个命令时，命令行会停在 [INFO] Generating project in Batch mode这句话会停很久。【当然，也有人的一下就过去。】 增加一个-X参数，可以查看详细信息1mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -X 可以看到，程序停在了下面这一行。1[DEBUG] Searching for remote catalog: http://repo1.maven.org/maven2/archetype-catalog.xml 去查询这个文件的时候网络比较差或者其他原因，导致挂在那里。 解决方法很简单。 把上述地址复制到浏览器中，下载这个文件到本地。 把文件archetype-catalog.xml复制到目录.m2\repository\org\apache\maven\archetype\archetype-catalog\2.2下面。 在上述命令后增加参数-DarchetypeCatalog=local，变成读取本地文件即可。4.庆祝一下123456789101112131415161718192021[INFO] ----------------------------------------------------------------------------[INFO] Using following parameters for creating project from Archetype: maven-archetype-webapp:RELEASE[INFO] ----------------------------------------------------------------------------[INFO] Parameter: groupId, Value: com.ssm.study[INFO] Parameter: artifactId, Value: ssmframe[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: package, Value: com.ssm.study[INFO] Parameter: packageInPathFormat, Value: com/ssm/study[INFO] Parameter: package, Value: com.ssm.study[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: groupId, Value: com.ssm.study[INFO] Parameter: artifactId, Value: ssmframe[INFO] Project created from Archetype in dir: C:\Users\34924\AppData\Local\Temp\archetypetmp\ssmframe[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 16:09 min[INFO] Finished at: 2018-07-20T21:16:52+08:00[INFO] Final Memory: 12M/87M[INFO] ------------------------------------------------------------------------[INFO] Maven execution finished]]></content>
      <categories>
        <category>Maven</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis的动态sql]]></title>
    <url>%2F2018%2F11%2F13%2FMybatis%E7%9A%84%E5%8A%A8%E6%80%81sql%2F</url>
    <content type="text"><![CDATA[本文是关于mybatis的早期使用方法。 0.前期准备123456789101112131415CREATE TABLE tb_employee( id INT AUTO_INCREMENT PRIMARY KEY, loginname VARCHAR(18) NULL, password VARCHAR(18) NULL, name VARCHAR(18) NULL, sex CHAR(2) NULL, age INT NULL, phone VARCHAR(21) NULL, sal DOUBLE NULL, state VARCHAR(18) NULL, CONSTRAINT tb_employee_id_uindex UNIQUE (id)) POJO类：123456789101112public class TbEmployee &#123; private long id; private String loginname; private String password; private String name; private String sex; private long age; private String phone; private double sal; private String state;//getter,setter 1.xml配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.EmployeeMapper"&gt; &lt;select id="selectEmployeeByIdLike" resultType="org.fkit.domain.TbEmployee"&gt; SELECT * FROM tb_employee &lt;where&gt; &lt;if test="id != null"&gt; and id = #&#123;id&#125; &lt;/if&gt; &lt;if test="sex != null"&gt; and sex = #&#123;sex&#125; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;select id="selectEmployeeChoose" resultType="org.fkit.domain.TbEmployee"&gt; select * from tb_employee &lt;where&gt; &lt;choose&gt; &lt;when test="id != null"&gt; and id = #&#123;id&#125; &lt;/when&gt; &lt;when test="loginname != null and password != null"&gt; and loginname = #&#123;loginname&#125; and password = #&#123;password&#125; &lt;/when&gt; &lt;otherwise&gt; and sex = '1' &lt;/otherwise&gt; &lt;/choose&gt; &lt;/where&gt; &lt;/select&gt; &lt;select id="selectEmployeeWithId" parameterType="int" resultType="org.fkit.domain.TbEmployee"&gt; SELECT * FROM tb_employee where id = #&#123;id&#125; &lt;/select&gt; &lt;update id="updateEmployeeIfNecessary" parameterType="org.fkit.domain.TbEmployee"&gt; UPDATE tb_employee &lt;set&gt; &lt;if test="loginname != null"&gt;loginname = #&#123;loginname&#125;,&lt;/if&gt; &lt;if test="password != null"&gt;password = #&#123;password&#125;,&lt;/if&gt; &lt;if test="name != null"&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test="sex != null"&gt;sex = #&#123;sex&#125;,&lt;/if&gt; &lt;if test="age != null"&gt;age = #&#123;age&#125;,&lt;/if&gt; &lt;if test="phone != null"&gt;phone = #&#123;phone&#125;,&lt;/if&gt; &lt;if test="sal != null"&gt;sal = #&#123;sal&#125;,&lt;/if&gt; &lt;if test="state != null"&gt;state = #&#123;state&#125;,&lt;/if&gt; &lt;/set&gt; where id = #&#123;id&#125; &lt;/update&gt; &lt;select id="selectEmployeeIn" resultType="org.fkit.domain.TbEmployee"&gt; select * from tb_employee where id in &lt;foreach item="item" index="index" collection="list" open="(" separator="," close=")"&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/select&gt; &lt;select id="selectEmployeeLikeName" resultType="org.fkit.domain.TbEmployee"&gt; &lt;bind name="pattern" value="'%' + _parameter.getName() + '%'"/&gt; &lt;bind name="pattern2" value="'%' + _parameter.getLoginname() +'%' "/&gt; SELECT * FROM tb_employee where name like #&#123;pattern&#125; and loginname like #&#123;pattern2&#125; &lt;/select&gt;&lt;/mapper&gt; 2.测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class DynamicSQLTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); DynamicSQLTest dynamicSQLTest = new DynamicSQLTest(); dynamicSQLTest.testSelectEmployeeByIdLike(sqlSession); dynamicSQLTest.testSelectEmployeeChoose(sqlSession); dynamicSQLTest.testUpdateEmployeeIfNecessary(sqlSession); dynamicSQLTest.testSelectEmployeeIn(sqlSession); dynamicSQLTest.testSelectEmployeeLikeName(sqlSession); sqlSession.commit(); sqlSession.close(); &#125; public void testSelectEmployeeByIdLike(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); HashMap&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;(); params.put("id", 1); params.put("sex", 1); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeByIdLike(params); tbEmployees.forEach(tbEmployee -&gt; System.out.println(tbEmployee)); &#125; public void testSelectEmployeeChoose(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); HashMap&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;(); params.put("loginname", "jack"); params.put("password", "123"); params.put("id", 2); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeChoose(params); tbEmployees.forEach(tbEmployee -&gt; System.out.println(tbEmployee)); &#125; public void testUpdateEmployeeIfNecessary(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); TbEmployee tbEmployee = employeeMapper.selectEmployeeWithId(1); System.out.println(tbEmployee); tbEmployee.setLoginname("newJack"); employeeMapper.updateEmployeeIfNecessary(tbEmployee); &#125; public void testSelectEmployeeIn(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); List&lt;Integer&gt; integers = new ArrayList&lt;Integer&gt;(); integers.add(1); integers.add(3); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeIn(integers); tbEmployees.forEach(tbEmployee -&gt; System.out.println(tbEmployee)); &#125; public void testSelectEmployeeLikeName(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); TbEmployee tbEmployee = new TbEmployee(); tbEmployee.setName("a"); tbEmployee.setLoginname("J"); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeLikeName(tbEmployee); tbEmployees.forEach(tbEmployee1 -&gt; System.out.println(tbEmployee1)); &#125;&#125; 12345678910111213141516171819202122232425//output:DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_employee WHERE id = ? and sex = ? DEBUG [main] - ==&gt; Parameters: 1(Integer), 1(Integer)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125;DEBUG [main] - ==&gt; Preparing: select * from tb_employee WHERE id = ? DEBUG [main] - ==&gt; Parameters: 2(Integer)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=2, loginname='rose', password='456', name='rooose', sex='2', age=21, phone='654321', sal=1121.0, state='active'&#125;DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_employee where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125;DEBUG [main] - ==&gt; Preparing: UPDATE tb_employee SET loginname = ?, password = ?, name = ?, sex = ?, age = ?, phone = ?, sal = ?, state = ? where id = ? DEBUG [main] - ==&gt; Parameters: newJack(String), 123(String), jaccck(String), 1(String), 26(Long), 123456(String), 3211.0(Double), active(String), 1(Long)DEBUG [main] - &lt;== Updates: 1DEBUG [main] - ==&gt; Preparing: select * from tb_employee where id in ( ? , ? ) DEBUG [main] - ==&gt; Parameters: 1(Integer), 3(Integer)DEBUG [main] - &lt;== Total: 2TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125;TbEmployee&#123;id=3, loginname='tom', password='tom', name='tooom', sex='1', age=12, phone='132', sal=32.2, state='active'&#125;DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_employee where name like ? and loginname like ? DEBUG [main] - ==&gt; Parameters: %a%(String), %J%(String)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125; 使用like的另一种写法：123456789101112&lt;select id="getUsersByConditionIf" resultType="com.model.User" parameterType="com.model.User"&gt; select * from user where &lt;if test="id!=null"&gt; id = #&#123;id&#125; &lt;/if&gt; &lt;if test="username!=null and username !=''"&gt; or username like "%"#&#123;username&#125;"%" &lt;/if&gt; &lt;if test="sex != null"&gt; and sex = #&#123;sex&#125; &lt;/if&gt;&lt;/select&gt; 使用”%”#{parameter}”%”，运行结果如下：1234567891011DEBUG [main] - ==&gt; Preparing: select id, username,birthday, sex, address,dept_id from user where id = ? DEBUG [main] - ==&gt; Parameters: 27(Integer)DEBUG [main] - &lt;== Total: 1DEBUG [main] - ==&gt; Preparing: select id, name from department where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1User&#123;id=27, username='tes111t', birthday=Thu Jul 12 08:00:00 CST 2018, sex='1', address='1'&#125;DEBUG [main] - ==&gt; Preparing: select * from user where id = ? or username like "%"?"%" and sex = ? DEBUG [main] - ==&gt; Parameters: 27(Integer), 1(String), 1(String)DEBUG [main] - &lt;== Total: 2[User&#123;id=27, username='tes111t', birthday=Thu Jul 12 08:00:00 CST 2018, sex='1', address='1'&#125;, User&#123;id=32, username='11231', birthday=Thu Jul 12 08:00:00 CST 2018, sex='1', address='1'&#125;] 要使每个都写为and xxx= #{xx}的形式，而不是第一个需要去掉and，可以在sql前面的语句中写为1select * from xxx where 1=1 这样保证每个都可以写为and xxx = #{xx}的形式。 也可以使用where标签将所有拼接的动态条件放入。 但是where只能去掉第一个and。 一次更新多条数据：1void addUsers(@Param("userList") List&lt;User&gt; userList); 123456&lt;insert id="addUsers" &gt; insert into user(username,address) VALUES &lt;foreach collection="userList" item="user" separator=","&gt; (#&#123;user.username&#125;,#&#123;user.address&#125;) &lt;/foreach&gt;&lt;/insert&gt; 需要插入别的字段需要自己加入。]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[范数]]></title>
    <url>%2F2018%2F11%2F13%2F%E8%8C%83%E6%95%B0%2F</url>
    <content type="text"><![CDATA[p-范数: $||x||_p = (|x_1|^p + |x_2|^p + |x_3|^3 + … + |x_n|^p)^{1/p} =\sqrt[p]{ \sum_{i=1}^n|x_i|^p}$ 2-范数(欧式范数): $||x||_2 = (|x_1|^2 + |x_2|^2 + |x_3|^2 + … + |x_n|^2)^{1/2} = \sqrt{ \sum_{i=1}^n x_i^2}$ ∞-范数: $||x||_∞ = max(x_1,x_2,x_3,…,x_n) = max_i|x_i|$ 1-范数即向量元素绝对值之和； 2-范数为Euclid范数（欧几里得范数，常用计算向量长度），即向量元素绝对值的平方和再开方； ∞-范数即所有向量元素绝对值中的最大值； -∞-范数即所有向量元素绝对值中的最小值； p-范数即向量元素绝对值的p次方和的1/p次幂。 可以参考：https://blog.csdn.net/susanzhang1231/article/details/52127011 https://www.jianshu.com/p/bf860ad177dd https://blog.csdn.net/bitcarmanlee/article/details/51945271]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>范数</tag>
        <tag>机器学习基础</tag>
      </tags>
  </entry>
</search>
