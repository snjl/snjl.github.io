<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[springboot工程结构推荐]]></title>
    <url>%2F2018%2F11%2F20%2Fspringboot%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[项目地址：https://github.com/snjl/springboot.myproject.git Spring Boot框架本身并没有对工程结构有特别的要求，但是按照最佳实践的工程结构可以帮助我们减少可能会遇见的坑，尤其是Spring包扫描机制的存在，如果您使用最佳实践的工程结构，可以免去不少特殊的配置工作。 典型示例 root package结构：com.example.myproject 应用主类Application.java置于root package下，通常我们会在应用主类中做一些框架配置扫描等配置，我们放在root package下可以帮助程序减少手工配置来加载到我们希望被Spring加载的内容 实体（Entity）与数据访问层（Repository）置于com.example.myproject.domain包下 逻辑层（Service）置于com.example.myproject.service包下 Web层（web）置于com.example.myproject.web包下123456789101112131415com +- example +- myproject +- Application.java | +- domain | +- Customer.java | +- CustomerRepository.java | +- service | +- CustomerService.java | +- web | +- CustomerController.java | 创建： 项目结构： 工程构建在上述基础，构建项目：1234567891011121314151617181920212223242526272829Customer.javapackage com.example.myproject.domain;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;@Componentpublic class Customer &#123; @Value("$&#123;com.example.myproject.customer.id&#125;") private String id; @Value("$&#123;com.example.myproject.customer.name&#125;") private String name; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 1234567891011121314151617181920CustomerService.javapackage com.example.myproject.service;import com.example.myproject.domain.Customer;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class CustomerService &#123; @Autowired private Customer customer; public void printCustomer() &#123; System.out.println(customer.getName()); &#125; public Customer getCustomer()&#123; return customer; &#125;&#125; 1234567891011121314151617181920212223242526CustomerController.javapackage com.example.myproject.web;import com.example.myproject.domain.Customer;import com.example.myproject.service.CustomerService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;/** * @author 34924 */@Controllerpublic class CustomerController &#123; @Autowired CustomerService customerService; @RequestMapping("/customer") public String customer(ModelMap map) &#123; Customer customer = customerService.getCustomer(); map.addAttribute("customer", customer); return "index"; &#125;&#125; 123456789101112index.html&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.w3.org/1999/xhtml"&gt;&lt;head lang="en"&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 th:text="$&#123;customer.id&#125;"&gt;Hello World&lt;/h1&gt;&lt;h2 th:text="$&#123;customer.name&#125;"&gt;name&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; 1234application.propertiescom.example.myproject.customer.id = 001com.example.myproject.customer.name = jl 运行项目，访问localhost:8080/customer 也可以test：1234567891011121314151617181920212223242526272829MyprojectApplicationTests.javapackage com.example.myproject;import com.example.myproject.service.CustomerService;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class MyprojectApplicationTests &#123; @Autowired private CustomerService customerService; @Test public void contextLoads() &#123; &#125; @Test public void testCustomer() &#123; customerService.printCustomer(); System.out.println(customerService.getCustomer()); &#125;&#125; 输出：12jlCustomer&#123;id='001', name='jl'&#125;]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>工程</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot报错记录]]></title>
    <url>%2F2018%2F11%2F20%2Fspringboot%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured12345678910Failed to configure a DataSource: &apos;url&apos; attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver classAction:Consider the following: If you want an embedded database (H2, HSQL or Derby), please put it on the classpath. If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active). 原因：引入mybatis的jar包时：12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt; springboot会默认加载org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration这个类，而DataSourceAutoConfiguration类使用了@Configuration注解向spring注入了dataSource bean，又因为项目中并没有关于dataSource相关的配置信息，所以当spring创建dataSource bean时因缺少相关的信息就会报错。 解决办法： 在@SpringBootApplication注解上加上exclude，解除自动加载DataSourceAutoConfiguration。 1234567@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)public class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125; 在parent项目的pom.xml文件中保存所有子模块的共有jar依赖，非共有的依赖则在各模块自身的pom.xml文件中进行申明。建议采用此方法，好处在于各模块的依赖不会相互产生干扰。]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot开发web应用]]></title>
    <url>%2F2018%2F11%2F20%2Fspringboot%E5%BC%80%E5%8F%91web%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[项目地址：https://github.com/snjl/springboot_thymeleaf_demo 静态资源访问js,css,图片等文件，放在main/resources/static里。 页面放在main/resources/templates里。 配置文件内容可以添加在main/resources、application.properties里。 举例：我们可以在src/main/resources/目录下创建static，在该位置放置一个图片文件。启动程序后，尝试访问http://localhost:8080/D.jpg。如能显示图片，配置成功。 springboot提供默认配置的一些模版： Thymeleaf FreeMarker Velocity Groovy Mustache 使用上述模板引擎中的任何一个，它们默认的模板配置路径为：src/main/resources/templates。当然也可以修改这个路径，具体如何修改，可在后续各模板引擎的配置属性中查询并修改。 ThymeleafThymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。 Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。 示例：1234567891011121314&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th th:text="#&#123;msgs.headers.name&#125;"&gt;Name&lt;/td&gt; &lt;th th:text="#&#123;msgs.headers.price&#125;"&gt;Price&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr th:each="prod : $&#123;allProducts&#125;"&gt; &lt;td th:text="$&#123;prod.name&#125;"&gt;Oranges&lt;/td&gt; &lt;td th:text="$&#123;#numbers.formatDecimal(prod.price,1,2)&#125;"&gt;0.99&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 可以看到Thymeleaf主要以属性的方式加入到html标签中，浏览器在解析html时，当检查到没有的属性时候会忽略，所以Thymeleaf的模板可以通过浏览器直接打开展现，这样非常有利于前后端的分离。 在Spring Boot中使用Thymeleaf，只需要引入下面依赖，并在默认的模板路径src/main/resources/templates下编写模板文件即可完成。1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; 在完成配置之后，举一个简单的例子，在快速入门工程的基础上，举一个简单的示例来通过Thymeleaf渲染一个页面。12345678910111213141516171819202122232425262728package com.example.demo.web;import com.example.demo.properties.BlobProperties;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import javax.annotation.Resource;@Controllerpublic class HelloController &#123; @Resource(name = "blobProperties") private BlobProperties blobProperties; @RequestMapping("/hello") public String index() &#123; return "Hello World"; &#125; @RequestMapping("/") public String index(ModelMap map) &#123; // 加入一个属性，用来在模板中读取 map.addAttribute("host", "http://www.baidu.com"); // return模板文件的名称，对应src/main/resources/templates/index.html return "index"; &#125;&#125; index.html页面：12345678910&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.w3.org/1999/xhtml"&gt;&lt;head lang="en"&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 th:text="$&#123;host&#125;"&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 如上页面，直接打开html页面展现Hello World，但是启动程序后，访问http://localhost:8080/，则是展示Controller中host的值：http://blog.baidu.com，做到了不破坏HTML自身内容的数据逻辑分离。 Thymeleaf的默认参数配置如有需要修改默认配置的时候，只需复制下面要修改的属性到application.properties中，并修改成需要的值，如修改模板文件的扩展名，修改默认的模板路径等。 12345678910111213141516171819# Enable template caching.spring.thymeleaf.cache=true# Check that the templates location exists.spring.thymeleaf.check-template-location=true# Content-Type value.spring.thymeleaf.servlet.content-type=text/html# Enable MVC Thymeleaf view resolution.spring.thymeleaf.enabled=true# Template encoding.spring.thymeleaf.encoding=utf-8# Comma-separated list of view names that should be excluded from resolution.spring.thymeleaf.excluded-view-names=# Template mode to be applied to templates. See also StandardTemplateModeHandlers.spring.thymeleaf.mode=HTML5# Prefix that gets prepended to view names when building a URL.spring.thymeleaf.prefix=classpath:/templates/# Suffix that gets appended to view names when building a URL.spring.thymeleaf.suffix=.html#spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain. spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot热启动]]></title>
    <url>%2F2018%2F11%2F20%2Fspringboot%E7%83%AD%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[在pom.xml中的dependencies中添加： 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; 改build：1234567891011&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;/configuration&gt; &lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>热启动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot：hello world]]></title>
    <url>%2F2018%2F11%2F19%2Fspringboot%EF%BC%9Ahello-world%2F</url>
    <content type="text"><![CDATA[项目地址：https://github.com/snjl/springboot_helloworld.git Spring Boot的主要优点： 为所有Spring开发者更快的入门 开箱即用，提供各种默认配置来简化项目配置 内嵌式容器简化Web项目 没有冗余代码生成和XML配置的要求 快速入门主要目标是完成Spring Boot基础项目的构建，并且实现一个简单的Http请求处理，通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。 使用Maven构建项目 通过SPRING INITIALIZR工具产生基础项目 访问：http://start.spring.io/ 选择构建工具Maven Project、Spring Boot版本1.3.2以及一些工程基本信息，可参考下图所示点击Generate Project下载项目压缩包 解压项目包，并用IDE以Maven项目导入 菜单中选择File–&gt;New–&gt;Project from Existing Sources 选择解压后的项目文件夹，点击OK 点击Import project from external model并选择Maven，点击Next到底为止。 选择Java SDK的时候请选择Java 7以上的版本 项目结构 通过上面步骤完成了基础项目的创建，如上图所示，Spring Boot的基础结构共三个文件（具体路径根据用户生成项目时填写的Group所有差异）： src/main/java下的程序入口：Chapter1Application src/main/resources下的配置文件：application.properties src/test/下的测试入口：Chapter1ApplicationTests 生成的Chapter1Application和Chapter1ApplicationTests类都可以直接运行来启动当前创建的项目，由于目前该项目未配合任何数据访问或Web模块，程序会在加载完Spring之后结束运行。 其中，@SpringBootApplication的这个注解是声明当前类为sprinboot的入口类。而一个springboot项目内有且只能有一个这个注解存在。 引入Web模块引入Web模块，需在pom.xml中添加spring-boot-starter-web模块： 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 编写HelloWorld服务 创建package命名为com.example.demo.web（根据实际情况修改） 创建HelloController类，内容如下 123456789101112package com.exmaple.demo.web;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController &#123; @RequestMapping("/hello") public String index() &#123; return "Hello World"; &#125;&#125; 启动主程序（可以在命令行中使用mvn spring-boot:run，或者通过idea启动），打开浏览器访问http://localhost:8080/hello，可以看到页面输出Hello World 编写单元测试用例打开的src/test/下的测试入口Chapter1ApplicationTests类。下面编写一个简单的单元测试来模拟http请求，具体如下： 123456789101112131415161718192021222324252627282930313233343536373839package com.exmaple.demo;import com.exmaple.demo.web.HelloController;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.MediaType;import org.springframework.mock.web.MockServletContext;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.web.WebAppConfiguration;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import static org.hamcrest.Matchers.equalTo;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = MockServletContext.class)@WebAppConfigurationpublic class Chapter1ApplicationTests &#123; private MockMvc mvc; @Before public void setUp() throws Exception &#123; mvc = MockMvcBuilders.standaloneSetup(new HelloController()).build(); &#125; @Test public void getHello() throws Exception &#123; mvc.perform(MockMvcRequestBuilders.get("/hello").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo("Hello World"))); &#125;&#125; 使用MockServletContext来构建一个空的WebApplicationContext，这样我们创建的HelloController就可以在@Before函数中创建并传递到MockMvcBuilders.standaloneSetup（）函数中。 其中的SpringBootTest注解，原来为SpringApplicationConfiguration，现在已弃用。如果在判断equalTo时判断不一致，会报错： 12345678910111213141516171819202122232425262728293031323334353637383940414243java.lang.AssertionError: Response contentExpected: "Hello World1" but: was "Hello World"Expected :Hello World1Actual :Hello World &lt;Click to see difference&gt; at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20) at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$string$3(ContentResultMatchers.java:130) at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:195) at com.exmaple.demo.Chapter1ApplicationTests.getHello(Chapter1ApplicationTests.java:36) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74) at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) 打包在 POM 文件添加插件： 1234&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt; 当运行“mvn package”进行打包时，会打包成一个可以直接运行的 JAR 文件，使用“java -jar”命令就可以直接运行。 开箱即用模块Spring Boot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xx作为命名的。下面列举一些常用的模块。 spring-boot-starter-logging ：使用 Spring Boot 默认的日志框架 Logback。 spring-boot-starter-log4j ：添加 Log4j 的支持。 spring-boot-starter-web ：支持 Web 应用开发，包含 Tomcat 和 spring-mvc。 spring-boot-starter-tomcat ：使用 Spring Boot 默认的 Tomcat 作为应用服务器。 spring-boot-starter-jetty ：使用 Jetty 而不是默认的 Tomcat 作为应用服务器。 spring-boot-starter-test ：包含常用的测试所需的依赖，如 JUnit、Hamcrest、Mockito 和 spring-test 等。 spring-boot-starter-aop ：包含 spring-aop 和 AspectJ 来支持面向切面编程（AOP）。 spring-boot-starter-security ：包含 spring-security。 spring-boot-starter-jdbc ：支持使用 JDBC 访问数据库。 spring-boot-starter-redis ：支持使用 Redis。 spring-boot-starter-data-mongodb ：包含 spring-data-mongodb 来支持 MongoDB。 spring-boot-starter-data-jpa ：包含 spring-data-jpa、spring-orm 和 Hibernate 来支持 JPA。 spring-boot-starter-amqp ：通过 spring-rabbit 支持 AMQP。 spring-boot-starter-actuator ： 添加适用于生产环境的功能，如性能指标和监测等功能。 Java Config 自动配置Spring Boot 推荐采用基于 Java Config 的配置方式，而不是传统的 XML。例如，@Configuration、@Bean、@EnableAutoConfiguration、@CompomentScan、@PropertySource、@Repository、@Service、@RestController等。]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库处理tips]]></title>
    <url>%2F2018%2F11%2F14%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86tips%2F</url>
    <content type="text"><![CDATA[1.mysql 开放，关闭 远程授权默认安装mysql是关闭远程连接的 这样也有助于系统的安全 但是有时候需要开启下远程连接方便操作 开启连接 mysql -uroot -p 进入mysql 输入密码1GRANT ALL PRIVILEGES ON * . * TO ‘root’@&apos;%’ IDENTIFIED BY ‘你的mysql密码’ 1WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 1MAX_UPDATES_PER_HOUR 0 ; 1flush privileges; 输入这两个命令即可开启mysql远程连接 关闭授权1234REVOKE ALL PRIVILEGES ON *.* FROM root@”%”;USE mysql;DELETE FROM user WHERE User=”root” and Host=”%”;FLUSH PRIVILEGES; 1234567891011121314151617mysql&gt; DELETE FROM `user` WHERE Host='10.155.123.55' AND User='kaka';Query OK, 1 row affected (0.00 sec) mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec) mysql&gt; SELECT Host,User,Password FROM `user`;+----------------+------+-------------------------------------------+| Host | User | Password |+----------------+------+-------------------------------------------+| localhost | root | *71ABCA8B06D46066CEF8062A75256E66243D0FC8 || tony\_ts\_tian | root | *71ABCA8B06D46066CEF8062A75256E66243D0FC8 || 127.0.0.1 | root | *71ABCA8B06D46066CEF8062A75256E66243D0FC8 || ::1 | root | *71ABCA8B06D46066CEF8062A75256E66243D0FC8 || % | root | *71ABCA8B06D46066CEF8062A75256E66243D0FC8 |+----------------+------+-------------------------------------------+5 rows in set (0.00 sec) 2.删除重复数据，只留下唯一不重复1.先多建立一列 temp，用来合并meetingId和speakerId,用“-”连接，之后就判断这一列是否相同。1234567891011121314151617ALTER TABLE cekasp_meeting_speaker ADD temp VARCHAR(20) NULL;update cekasp_meeting_speaker set temp = concat(meetingId, '-', speakerId);delete from cekasp_meeting_speaker where temp in (SELECT * from (SELECT b.temp from cekasp_meeting_speaker b GROUP BY b.temp HAVING count(*) &gt; 1)ggg)and id not in (select * from( (select min(c.id) from cekasp_meeting_speaker c GROUP BY c.meetingId,c.speakerId HAVING count(*) &gt; 1) ) ggggggg);ALTER TABLE cekasp_meeting_speaker DROP temp;``` 2.或者直接以meetingId和speakerId作为查询```sqldelete from cekasp_meeting_speaker where (meetingId,speakerId) in (SELECT * from (SELECT b.meetingId,b.speakerId from cekasp_meeting_speaker b GROUP BY b.meetingId,b.speakerId HAVING count(*) &gt; 1)ggg)and id not in (select * from( (select min(c.id) from cekasp_meeting_speaker c GROUP BY c.meetingId,c.speakerId HAVING count(*) &gt; 1) ) ggggggg); 问题：delete/update里，有in的查询语句时，要使用临时表才能进行删除： 原本的1SELECT b.meetingId,b.speakerId from cekasp_meeting_speaker b GROUP BY b.meetingId,b.speakerId HAVING count(*) &gt; 1 应该要使用1select * from ... as NAME 包起来，作为一个临时表。 3.两张表表结构一样，将一张表中数据插入另一张表1insert into table1 (SELECT * from table2 WHERE id not in (SELECT id from table1)) 4.查询某张表的信息1select * from information_schema.COLUMNS where TABLE_SCHEMA = (select database()) and TABLE_NAME="paper";]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis简单测试]]></title>
    <url>%2F2018%2F11%2F14%2FMybatis%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[0.准备工具因为配置文件都是读取相同的，所以可以进行工厂类封装。 12345678910111213141516171819202122232425262728package org.fkit.factory;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.InputStream;public class FKSqlSessionFactory &#123; private static SqlSessionFactory sqlSessionFactory = null; static &#123; try &#123; InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml"); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static SqlSession getSqlSession()&#123; return sqlSessionFactory.openSession(); &#125; public static SqlSessionFactory getSqlSessionFactory()&#123; return sqlSessionFactory; &#125;&#125; 1.简单的select，insert，update，delete测试在UserMapper.xml中配置：1234567891011121314&lt;insert id="saveUser" parameterType="user" useGeneratedKeys="true"&gt; INSERT INTO tb_user(name, sex, age) VALUES (#&#123;name&#125;,#&#123;sex&#125;,#&#123;age&#125;)&lt;/insert&gt;&lt;select id="selectUser" parameterType="int" resultType="user"&gt; SELECT * from tb_user where id = #&#123;id&#125;&lt;/select&gt;&lt;update id="modifyUser" parameterType="user" &gt; UPDATE tb_user set name = #&#123;name&#125;, sex = #&#123;sex&#125;, age = #&#123;age&#125; WHERE id = #&#123;id&#125;&lt;/update&gt;&lt;delete id="removeUser" parameterType="int"&gt; DELETE from tb_user where id=#&#123;id&#125;&lt;/delete&gt; 注：均包含在中。 可以看到，在saveUser和modifyUser中，都是传入的User对象，而在selectUser和removeUser传入的是int值，所以在测试时，需要进行对应。resultType是返回类型，返回User类型，需要使用User user = …获取到该对象，默认返回的是int类型（好像是。。忘记了）。 分别对其进行测试及结果：123456789101112131415//InsertTest.javapublic class InsertTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); User user = new User("jack", "男", 22); sqlSession.insert("org.fkit.mapper.UserMapper.saveUser", user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: INSERT INTO tb_user(name, sex, age) VALUES (?,?,?) DEBUG [main] - ==&gt; Parameters: jack(String), 男(String), 22(Integer)DEBUG [main] - &lt;== Updates: 1 12345678910111213141516//SelectTest.javapublic class SelectTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); User user = sqlSession.selectOne("org.fkit.mapper.UserMapper.selectUser", 1); System.out.println(user.getName()); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * from tb_user where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1User&#123;id=1, name='hello?', sex='g', age=11&#125; 12345678910111213141516171819//UpdateTest.javapublic class UpdateTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); User user = sqlSession.selectOne("org.fkit.mapper.UserMapper.selectUser", 1); user.setName("hello?"); sqlSession.update("org.fkit.mapper.UserMapper.modifyUser", user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * from tb_user where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1DEBUG [main] - ==&gt; Preparing: UPDATE tb_user set name = ?, sex = ?, age = ? WHERE id = ? DEBUG [main] - ==&gt; Parameters: hello?(String), g(String), 11(Integer), 1(Integer)DEBUG [main] - &lt;== Updates: 1 12345678910111213//DeleteTest.javapublic class DeleteTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); sqlSession.selectOne("org.fkit.mapper.UserMapper.removeUser", 3); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: DELETE from tb_user where id=? DEBUG [main] - ==&gt; Parameters: 3(Integer) 2.测试ResultMapsresultMap是mybatis中最重要最强大的元素，它的作用是告诉mybatis将从结果集中取出的数据转化成开发者所需要的对象。123456&lt;select id="selectUsersToMap" resultType="map"&gt; SELECT * from tb_user&lt;/select&gt;&lt;select id="selectUsers" resultType="org.fkit.domain.User"&gt; SELECT * from tb_user&lt;/select&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//SelectMapTest.javapackage org.fkit.test;import org.apache.ibatis.session.SqlSession;import org.fkit.domain.User;import org.fkit.factory.FKSqlSessionFactory;import java.util.List;import java.util.Map;public class SelectMapTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession();// 获取map对象集，每个user映射为一个map List&lt;Map&lt;String, Object&gt;&gt; list = sqlSession.selectList("org.fkit.mapper.UserMapper.selectUsersToMap"); for (Map&lt;String, Object&gt; row : list) &#123; System.out.println(row); &#125;// 获取user对象集 List&lt;User&gt; users = sqlSession.selectList("org.fkit.mapper.UserMapper.selectUsers"); for (User user : users) &#123; System.out.println(user); &#125; sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * from tb_user DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 12&#123;sex=g, name=hello?, id=1, age=11&#125;&#123;sex=男, name=gg, id=4, age=26&#125;&#123;sex=男, name=gg, id=5, age=26&#125;&#123;sex=男, name=gg, id=6, age=26&#125;&#123;sex=男, name=gg, id=7, age=26&#125;&#123;sex=男, name=gg, id=8, age=26&#125;&#123;sex=男, name=gg, id=9, age=26&#125;&#123;sex=男, name=gg, id=10, age=26&#125;&#123;sex=男, name=gg, id=11, age=26&#125;&#123;sex=男, name=gg, id=12, age=26&#125;&#123;sex=男, name=jack, id=13, age=22&#125;&#123;sex=男, name=jack, id=14, age=22&#125;DEBUG [main] - ==&gt; Preparing: SELECT * from tb_user DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 12User&#123;id=1, name='hello?', sex='g', age=11&#125;User&#123;id=4, name='gg', sex='男', age=26&#125;User&#123;id=5, name='gg', sex='男', age=26&#125;User&#123;id=6, name='gg', sex='男', age=26&#125;User&#123;id=7, name='gg', sex='男', age=26&#125;User&#123;id=8, name='gg', sex='男', age=26&#125;User&#123;id=9, name='gg', sex='男', age=26&#125;User&#123;id=10, name='gg', sex='男', age=26&#125;User&#123;id=11, name='gg', sex='男', age=26&#125;User&#123;id=12, name='gg', sex='男', age=26&#125;User&#123;id=13, name='jack', sex='男', age=22&#125;User&#123;id=14, name='jack', sex='男', age=22&#125; 查询语句返回的每一条数据都被封装成了一个Map集合，列名作为Map集合的key，而列的值作为Map的value。 虽然数据被封装成Map集合返回，但是Map集合并不能很好描述一个领域的模型，如果像后一个测试一样，使用POJO类来作为领域模型描述数据，会更加准确。 比较特殊的情况：查询到的数据的列和需要返回的对象（User）的属性不一致，则mybatis不会自动赋值，可以使用resultMap进行处理。 在数据库中创建一个tb_user2表，并且插入一定数据：12345678CREATE TABLE tb_user2( user_id INT AUTO_INCREMENT PRIMARY KEY, user_name VARCHAR(18) NULL, user_sex CHAR(2) NULL, user_age INT NULL) User映射表使用原来的User.java。在UserMapper.xml中添加：12345678910&lt;resultMap id="userResultMap" type="org.fkit.domain.User"&gt; &lt;id property="id" column="user_id"/&gt; &lt;!--column对应数据库中的属性--&gt; &lt;result property="name" column="user_name"/&gt; &lt;result property="sex" column="user_sex"/&gt; &lt;result property="age" column="user_age"/&gt;&lt;/resultMap&gt;&lt;select id="selectUsers2" resultMap="userResultMap"&gt; SELECT * from tb_user2&lt;/select&gt; 测试：1234567891011121314151617//ResultMapTest.javapublic class ResultMapTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); List&lt;User&gt; users = sqlSession.selectList("org.fkit.mapper.UserMapper.selectUsers2"); for (User user : users) &#123; System.out.println(user); &#125; &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * from tb_user2 DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 2User&#123;id=1, name='qq1', sex='q', age=12&#125;User&#123;id=2, name='qq2', sex='b', age=13&#125; （待补充 3.多表查询两个表：123456789101112131415161718192021CREATE TABLE tb_clazz( id INT AUTO_INCREMENT PRIMARY KEY, CODE VARCHAR(18) NULL, CONSTRAINT TB_CLAZZ_id_uindex UNIQUE (id))CREATE TABLE tb_student( id INT AUTO_INCREMENT PRIMARY KEY, NAME VARCHAR(18) NULL, sex CHAR(3) NULL, age INT NULL, clazz_id INT NULL, CONSTRAINT TB_STUDENT_id_uindex UNIQUE (id), CONSTRAINT TB_STUDENT_tb_clazz_id_fk FOREIGN KEY (clazz_id) REFERENCES tb_clazz (id)) 插入2个班级，4个学生，其中每2个学生对应一个班级。建立pojo类：1234567891011121314public class Clazz &#123; private Integer id; private String code; //setter,getter&#125;public class Student &#123; private Integer id; private String name; private String sex; private Integer age; private Clazz clazz; //getter,setter UserMapper.xml映射：123456789101112&lt;resultMap id="studentResultMap" type="org.fkit.domain.Student"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="sex" column="sex"/&gt; &lt;result property="age" column="age"/&gt; &lt;association property="clazz" column="clazz_id" javaType="org.fkit.domain.Clazz" select="selectClazzWithId"/&gt;&lt;/resultMap&gt;&lt;select id="selectClazzWithId" resultType="org.fkit.domain.Clazz"&gt; SELECT * FROM tb_clazz where id = #&#123;id&#125;&lt;/select&gt; 测试：123456789101112131415161718192021222324252627//SelectStudentTest.javapublic class SelectStudentTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); List&lt;Student&gt; students = sqlSession.selectList("org.fkit.mapper.UserMapper.selectStudent"); for (Student student : students) &#123; System.out.println(student); &#125; sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_student DEBUG [main] - ==&gt; Parameters: DEBUG [main] - ====&gt; Preparing: SELECT * FROM tb_clazz where id = ? DEBUG [main] - ====&gt; Parameters: 1(Integer)DEBUG [main] - &lt;==== Total: 1DEBUG [main] - ====&gt; Preparing: SELECT * FROM tb_clazz where id = ? DEBUG [main] - ====&gt; Parameters: 2(Integer)DEBUG [main] - &lt;==== Total: 1DEBUG [main] - &lt;== Total: 4Student&#123;id=1, name='jack', sex='男', age=22, clazz=Clazz&#123;id=1, code='j1601'&#125;&#125;Student&#123;id=2, name='rose', sex='女', age=18, clazz=Clazz&#123;id=1, code='j1601'&#125;&#125;Student&#123;id=3, name='tom', sex='男', age=25, clazz=Clazz&#123;id=2, code='j1602'&#125;&#125;Student&#123;id=4, name='mary', sex='女', age=20, clazz=Clazz&#123;id=2, code='j1602'&#125;&#125; 查询每个班级的学生： 修改clazz.java1234567891011121314public class Clazz &#123; private Integer id; private String code; private List&lt;Student&gt; students; public List&lt;Student&gt; getStudents() &#123; return students; &#125; public void setStudents(List&lt;Student&gt; students) &#123; this.students = students; &#125;...&#125; UserMapper.xml添加：12345678910111213&lt;resultMap id="clazzResultMap" type="org.fkit.domain.Clazz"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="code" column="code"/&gt; &lt;collection property="students" javaType="ArrayList" column="id" ofType="org.fkit.domain.Student" select="selectStudentWithId"/&gt;&lt;/resultMap&gt;&lt;select id="selectStudentWithId" resultType="org.fkit.domain.Student"&gt; SELECT * FROM tb_student where clazz_id = #&#123;id&#125;&lt;/select&gt;&lt;select id="selectClazz" resultMap="clazzResultMap"&gt; SELECT * from tb_clazz&lt;/select&gt; 测试：123456789101112131415161718192021222324252627282930313233//SelectClazzTest.javapublic class SelectClazzTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); List&lt;Clazz&gt; clazzes = sqlSession.selectList("org.fkit.mapper.UserMapper.selectClazz"); for (Clazz clazz : clazzes) &#123; System.out.println(clazz); List&lt;Student&gt; students = clazz.getStudents(); for (Student student : students) &#123; System.out.println(student); &#125; &#125; sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * from tb_clazz DEBUG [main] - ==&gt; Parameters: DEBUG [main] - ====&gt; Preparing: SELECT * FROM tb_student where clazz_id = ? DEBUG [main] - ====&gt; Parameters: 1(Integer)DEBUG [main] - &lt;==== Total: 2DEBUG [main] - ====&gt; Preparing: SELECT * FROM tb_student where clazz_id = ? DEBUG [main] - ====&gt; Parameters: 2(Integer)DEBUG [main] - &lt;==== Total: 2DEBUG [main] - &lt;== Total: 2Clazz&#123;id=1, code='j1601'&#125;Student&#123;id=1, name='jack', sex='男', age=22, clazz=null&#125;Student&#123;id=2, name='rose', sex='女', age=18, clazz=null&#125;Clazz&#123;id=2, code='j1602'&#125;Student&#123;id=3, name='tom', sex='男', age=25, clazz=null&#125;Student&#123;id=4, name='mary', sex='女', age=20, clazz=null&#125; 看到student没有clazz属性，应该是不能递归查询。]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis多对多]]></title>
    <url>%2F2018%2F11%2F14%2FMybatis%E5%A4%9A%E5%AF%B9%E5%A4%9A%2F</url>
    <content type="text"><![CDATA[0.前期准备数据库：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748CREATE TABLE tb_article( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(18) NULL, price DOUBLE NULL, remark VARCHAR(18) NULL, CONSTRAINT tb_article_id_uindex UNIQUE (id))CREATE TABLE tb_consumer( id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(18) NULL, loginname VARCHAR(18) NULL, password VARCHAR(18) NULL, phone VARCHAR(18) NULL, address VARCHAR(18) NULL, CONSTRAINT tb_consumer_id_uindex UNIQUE (id))CREATE TABLE tb_order( id INT AUTO_INCREMENT PRIMARY KEY, code VARCHAR(32) NULL, total DOUBLE NULL, user_id INT NULL, CONSTRAINT tb_order_id_uindex UNIQUE (id), CONSTRAINT tb_order_tb_consumer_id_fk FOREIGN KEY (user_id) REFERENCES tb_consumer (id)) ENGINE = InnoDB;CREATE INDEX tb_order_tb_consumer_id_fk ON tb_order (user_id);CREATE TABLE tb_item( order_id INT NOT NULL, amount INT NULL, code VARCHAR(18) NULL, article_id INT NOT NULL, PRIMARY KEY (order_id, article_id)) ENGINE = InnoDB; 其中，consumer和order是一对多关系，一个顾客有多个订单；order和article是多对多的关系，中间表是item，一个订单可以有多个商品，一个商品也可以在多个订单上，所以是多对多关系。POJO类：123456789101112131415161718192021222324252627282930313233//TbConsumer.javapublic class TbConsumer &#123; private long id; private String username; private String loginname; private String password; private String phone; private String address; private List&lt;TbOrder&gt; tbOrders;//setter,getter//TbOrder.javapublic class TbOrder &#123; private long id; private String code; private double total; private long userId; private TbConsumer tbConsumer; private List&lt;TbArticle&gt; articleList;//setter,getter//TbArticle.javapublic class TbArticle &#123; private long id; private String name; private double price; private String remark; private List&lt;TbOrder&gt; tbOrders;//getter,setter 1.xml配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//ConsumerMapper.xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.ConsumerMapper"&gt; &lt;resultMap id="consumerResultMap" type="org.fkit.domain.TbConsumer"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="username" column="username"/&gt; &lt;result property="loginname" column="loginname"/&gt; &lt;result property="password" column="password"/&gt; &lt;result property="phone" column="phone"/&gt; &lt;result property="address" column="address"/&gt; &lt;collection property="tbOrders" javaType="arrayList" column="id" ofType="org.fkit.domain.TbOrder" fetchType="lazy" select="org.fkit.mapper.OrderMapper.selectOrderByConsumerId"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="code" column="code"/&gt; &lt;result property="total" column="total"/&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id="selectConsumerById" parameterType="int" resultMap="consumerResultMap"&gt; SELECT * from tb_consumer where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt;//OrderMapper.xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.OrderMapper"&gt; &lt;resultMap id="orderResultMap" type="org.fkit.domain.TbOrder"&gt; &lt;id property="id" column="id"/&gt; &lt;result column="total" property="total"/&gt; &lt;result column="code" property="code"/&gt; &lt;association property="tbConsumer" javaType="org.fkit.domain.TbConsumer"&gt; &lt;id property="id" column="id"/&gt; &lt;result column="address" property="address"/&gt; &lt;result column="loginname" property="loginname"/&gt; &lt;result column="password" property="password"/&gt; &lt;result column="username" property="username"/&gt; &lt;result column="phone" property="phone"/&gt; &lt;/association&gt; &lt;collection property="articleList" javaType="ArrayList" column="oid" ofType="org.fkit.domain.TbArticle" select="org.fkit.mapper.ArticleMapper.selectArticleByOrderId" fetchType="lazy"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="name" property="name"/&gt; &lt;result column="price" property="price"/&gt; &lt;result property="remark" column="remark"/&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id="selectOrderById" resultMap="orderResultMap" parameterType="int"&gt; SELECT u.* ,o.id as oid,code,total,user_id FROM tb_consumer u, tb_order o WHERE u.id = o.user_id and o.id = #&#123;id&#125; &lt;/select&gt; &lt;select id="selectOrderByConsumerId" parameterType="int" resultType="org.fkit.domain.TbOrder"&gt; select * from tb_order where user_id = #&#123;id&#125;; &lt;/select&gt;&lt;/mapper&gt;//ArticleMapper.xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.ArticleMapper"&gt; &lt;select id="selectArticleByOrderId" parameterType="int" resultType="org.fkit.domain.TbArticle"&gt; SELECT * from tb_article where id in (select article_id from tb_item where order_id = #&#123;id&#125;) &lt;/select&gt;&lt;/mapper&gt; 因为多表查询返回结果中tb_consumer中有id列，tb_order中也有id列，所以需要区分，例如使o.id as oid，resultMap中的column=”oid”就是指tb_order表中的id值。 相应Java类：12345678910111213public interface ConsumerMapper &#123; TbConsumer selectConsumerById(Integer id);&#125;public interface OrderMapper &#123; TbOrder selectOrderById(Integer id); TbOrder selectOrderByUserId(Integer id);&#125;public interface ArticleMapper &#123; TbArticle selectArticleByOrderId(Integer id);&#125; 2.测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public class ManyToManyTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); ManyToManyTest manyToManyTest = new ManyToManyTest(); manyToManyTest.testSelectUserById(sqlSession); manyToManyTest.testSelectOrderById(sqlSession); sqlSession.commit(); sqlSession.close(); &#125; public void testSelectUserById(SqlSession sqlSession) &#123; ConsumerMapper consumerMapper = sqlSession.getMapper(ConsumerMapper.class); TbConsumer tbConsumer = consumerMapper.selectConsumerById(1); System.out.println(tbConsumer); List&lt;TbOrder&gt; tbOrders = tbConsumer.getTbOrders(); for (TbOrder tbOrder : tbOrders) &#123; System.out.println(tbOrder); &#125; &#125; public void testSelectOrderById(SqlSession sqlSession) &#123; OrderMapper orderMapper = sqlSession.getMapper(OrderMapper.class); TbOrder tbOrder = orderMapper.selectOrderById(2); System.out.println(tbOrder); TbConsumer tbConsumer = tbOrder.getTbConsumer(); System.out.println(tbConsumer); List&lt;TbArticle&gt; tbArticles = tbOrder.getArticleList(); for (TbArticle tbArticle : tbArticles) &#123; System.out.println("tbArticle:"); System.out.println(tbArticle); &#125; &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * from tb_consumer where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1DEBUG [main] - ==&gt; Preparing: select * from tb_order where user_id = ?; DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 2TbConsumer&#123;id=1, username='peter', loginname='blue man', password='123', phone='123456', address='外星球', tbOrders=[TbOrder&#123;id=2, code='23624', total=1.0, userId=1, tbConsumer=null&#125;, TbOrder&#123;id=3, code='12351', total=2.0, userId=1, tbConsumer=null&#125;]&#125;TbOrder&#123;id=2, code='23624', total=1.0, userId=1, tbConsumer=null&#125;TbOrder&#123;id=3, code='12351', total=2.0, userId=1, tbConsumer=null&#125;DEBUG [main] - ==&gt; Preparing: SELECT u.* ,o.id as oid,code,total,user_id FROM tb_consumer u, tb_order o WHERE u.id = o.user_id and o.id = ? DEBUG [main] - ==&gt; Parameters: 2(Integer)DEBUG [main] - &lt;== Total: 1DEBUG [main] - ==&gt; Preparing: SELECT * from tb_article where id in (select article_id from tb_item where order_id = ?) DEBUG [main] - ==&gt; Parameters: 2(Integer)DEBUG [main] - &lt;== Total: 2TbOrder&#123;id=1, code='23624', total=1.0, userId=0, tbConsumer=TbConsumer&#123;id=1, username='peter', loginname='blue man', password='123', phone='123456', address='外星球', tbOrders=null&#125;&#125;TbConsumer&#123;id=1, username='peter', loginname='blue man', password='123', phone='123456', address='外星球', tbOrders=null&#125;tbArticle:TbArticle&#123;id=1, name='洗发水', price=23.3, remark='bilibili', tbOrders=null&#125;tbArticle:TbArticle&#123;id=2, name='java书', price=111.0, remark='blingbling', tbOrders=null&#125;]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis一对多]]></title>
    <url>%2F2018%2F11%2F14%2FMybatis%E4%B8%80%E5%AF%B9%E5%A4%9A%2F</url>
    <content type="text"><![CDATA[0.前期准备数据库配置：12345678910111213141516171819202122232425CREATE TABLE tb_clazz( id INT AUTO_INCREMENT PRIMARY KEY, CODE VARCHAR(18) NULL, name VARCHAR(18) NULL, CONSTRAINT TB_CLAZZ_id_uindex UNIQUE (id))CREATE TABLE tb_student( id INT AUTO_INCREMENT PRIMARY KEY, NAME VARCHAR(18) NULL, sex CHAR(3) NULL, age INT NULL, clazz_id INT NULL, CONSTRAINT TB_STUDENT_id_uindex UNIQUE (id), CONSTRAINT TB_STUDENT_tb_clazz_id_fk FOREIGN KEY (clazz_id) REFERENCES tb_clazz (id))CREATE INDEX TB_STUDENT_tb_clazz_id_fk ON tb_student (clazz_id); 一个clazz对应多个student。 log4j.properties需要进行配置：1234567log4j.rootLogger=ERROR, stdout#log4j.logger.org.fkit.mapper.UserMapper=DEBUGlog4j.logger.org.fkit.mapper=DEBUGlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 在mybatis-config.xml中配置一下mapper和懒加载：12&lt;setting name="lazyLoadingEnabled" value="true"/&gt;&lt;setting name="aggressiveLazyLoading" value="false"/&gt; 配置pojo类：12345678910111213141516171819202122//Student.javapackage org.fkit.domain;public class Student &#123; private Integer id; private String name; private String sex; private Integer age; private Clazz clazz;//getter,setter//Clazz.javapackage org.fkit.domain;import java.util.List;public class Clazz &#123; private Integer id; private String code; private String name; private List&lt;Student&gt; students;//getter,setter 1.配置StudentMapper和ClazzMapper1234567891011121314151617181920212223242526//StudentMapper.xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.StudentMapper"&gt; &lt;select id="selectStudentById" parameterType="int" resultMap="studentResultMap"&gt; SELECT * from tb_clazz c,tb_student s where c.id = s.clazz_id and s.id = #&#123;id&#125; &lt;/select&gt; &lt;select id="selectStudentByClazzId" parameterType="int" resultMap="studentResultMap"&gt; select * from tb_student where clazz_id = #&#123;id&#125; &lt;/select&gt; &lt;resultMap id="studentResultMap" type="org.fkit.domain.Student"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="sex" column="sex"/&gt; &lt;result property="age" column="age"/&gt; &lt;association property="clazz" javaType="org.fkit.domain.Clazz"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="code" column="code"/&gt; &lt;result property="name" column="name"/&gt; &lt;/association&gt; &lt;/resultMap&gt;&lt;/mapper&gt; 12345678910//StudentMapper.javapackage org.fkit.mapper;import org.fkit.domain.Student;public interface StudentMapper &#123; Student selectStudentById(Integer id); Student selectStudentByClazzId(Integer id);&#125; 1234567891011121314151617181920212223//ClazzMapper.xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.ClazzMapper"&gt; &lt;select id="selectClazzById" parameterType="int" resultMap="clazzResultMap"&gt; SELECT * FROM tb_clazz where id = #&#123;id&#125; &lt;/select&gt; &lt;resultMap id="clazzResultMap" type="org.fkit.domain.Clazz"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="code" column="code"/&gt; &lt;result property="name" column="name"/&gt; &lt;collection property="students" javaType="ArrayList" column="id" ofType="org.fkit.domain.Student" select="org.fkit.mapper.StudentMapper.selectStudentByClazzId" fetchType="lazy"&gt; &lt;id property="studentId" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="sex" column="sex"/&gt; &lt;result property="age" column="age"/&gt; &lt;/collection&gt; &lt;/resultMap&gt;&lt;/mapper&gt; 12345678//ClazzMapper.javapackage org.fkit.mapper;import org.fkit.domain.Clazz;public interface ClazzMapper &#123; Clazz selectClazzById(Integer id);&#125; 测试代码：1234567891011121314151617181920212223242526272829303132333435363738//OneToMany.javapackage org.fkit.test;import org.apache.ibatis.session.SqlSession;import org.fkit.domain.Clazz;import org.fkit.factory.FKSqlSessionFactory;import org.fkit.mapper.ClazzMapper;public class OneToMany &#123; public static void main(String args[])throws Exception &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); OneToMany oneToMany = new OneToMany(); oneToMany.testSelectClazzById(sqlSession); sqlSession.commit(); sqlSession.close(); &#125; public void testSelectClazzById(SqlSession sqlSession) &#123; ClazzMapper clazzMapper = sqlSession.getMapper(ClazzMapper.class); Clazz clazz = clazzMapper.selectClazzById(1); System.out.println(clazz.getId() + " " + clazz.getCode()); System.out.println(clazz.getStudents()); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_clazz where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 11 j1601DEBUG [main] - ==&gt; Preparing: select * from tb_student where clazz_id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 2[Student&#123;id=1, name='jack', sex='男', age=22, clazz=Clazz&#123;id=1, code='null', name='jack', students=null&#125;&#125;, Student&#123;id=2, name='rose', sex='女', age=18, clazz=Clazz&#123;id=2, code='null', name='rose', students=null&#125;&#125;] 可以看出，懒加载会只加载需要使用的(PS:如果做接口，json传数据，则冷加载相当于失效，但是可以在pojo类上加上@JsonIgnoreProperties(“fieldname”)）。]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
        <tag>懒加载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis一对一]]></title>
    <url>%2F2018%2F11%2F14%2FMybatis%E4%B8%80%E5%AF%B9%E4%B8%80%2F</url>
    <content type="text"><![CDATA[0.前期准备数据库配置：12345678910111213141516171819202122232425CREATE TABLE tb_card( id INT AUTO_INCREMENT PRIMARY KEY, code VARCHAR(18) NULL, CONSTRAINT tb_card_id_uindex UNIQUE (id))CREATE TABLE tb_person( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(18) NULL, sex VARCHAR(18) NULL, age INT NULL, card_id INT NULL, CONSTRAINT tb_person_id_uindex UNIQUE (id), CONSTRAINT tb_person_card_id_uindex UNIQUE (card_id), CONSTRAINT tb_person_tb_card_id_fk FOREIGN KEY (card_id) REFERENCES tb_card (id)) ENGINE = Inno 身份证和人是一对一的关系，在tb_person表中，card_id为外键，对应tb_card主键，且card_id唯一，就满足了一对一的关系。 2.POJO类 两个pojo类： 12345public class Card implements Serializable&#123; private Integer id; private String code; //getter，setter 12345678public class Person implements Serializable&#123; private Integer id; private String name; private String sex; private Integer age; private Card card; //getter,setter 3.mapper和mybatis-config.xml配置mapper配置：12345678//CardMapper.xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.CardMapper"&gt; &lt;select id="selectCardById" parameterType="int" resultType="org.fkit.domain.Card"&gt; SELECT * FROM tb_card WHERE id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 1234567891011121314151617//PersonMapper.xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.PersonMapper"&gt; &lt;select id="selectPersonById" parameterType="int" resultMap="personMapper"&gt; select * from tb_person where id = #&#123;id&#125; &lt;/select&gt; &lt;resultMap id="personMapper" type="org.fkit.domain.Person"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="sex" column="sex"/&gt; &lt;result property="age" column="age"/&gt; &lt;association property="card" column="card_id" select="org.fkit.mapper.CardMapper.selectCardById" javaType="org.fkit.domain.Card"/&gt; &lt;/resultMap&gt;&lt;/mapper&gt; 在此可以给PersonMapper设置一个接口：123456789101112//PersonMapper.javapackage org.fkit.mapper;import org.fkit.domain.Person;public interface PersonMapper &#123; /** * @param id * @return Person */ Person selectPersonById(Integer id);&#125; 在mybatis-config.xml中配置这2个mapper：12&lt;mapper resource="org/fkit/mapper/PersonMapper.xml"/&gt;&lt;mapper resource="org/fkit/mapper/CardMapper.xml"/&gt; 4.测试测试代码：12345678910//OneToOneTset.javapublic class OneToOneTest &#123; public static void main(String args[])throws Exception &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); Person person = sqlSession.selectOne("org.fkit.mapper.PersonMapper.selectPersonById", 1); System.out.println(person); &#125;&#125;//output:Person&#123;id=1, name='jack', sex='男', age=23, card=Card&#123;id=1, code='432801198009191038'&#125;&#125; 因为设置了接口，也可以如此测试：123456789101112131415//OneToOneTset.javapublic class OneToOneTest &#123; public static void main(String args[])throws Exception &#123; InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml"); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); PersonMapper personMapper = session.getMapper(PersonMapper.class); Person person = personMapper.selectPersonById(1); System.out.println(person); &#125;&#125;//output:Person&#123;id=1, name='jack', sex='男', age=23, card=Card&#123;id=1, code='432801198009191038'&#125;&#125;]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[注册登录测试]]></title>
    <url>%2F2018%2F11%2F14%2F%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[java:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package org.fkit.controller;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.domain2.User;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import java.util.ArrayList;import java.util.List;@Controller@RequestMapping("/user")public class UserController &#123; private static List&lt;User&gt; userList; public UserController() &#123; super(); userList = new ArrayList&lt;User&gt;(); &#125; private static Log logger = LogFactory.getLog(UserController.class); @RequestMapping(value = "/register", method = RequestMethod.GET) public String requireForm() &#123; logger.info("register GET被调用"); System.out.println("register GET被调用"); return "registerForm"; &#125; @RequestMapping(value = "/register", method = RequestMethod.POST) public String register( @RequestParam("loginname") String loginname, @RequestParam("password") String password, @RequestParam("username") String username) &#123; logger.info("register POST被调用"); System.out.println("register POST被调用"); User user = new User(); user.setLoginname(loginname); user.setUsername(username); user.setPassword(password); userList.add(user); System.out.println(userList); return "loginForm"; &#125; @RequestMapping("/login") public String login( @RequestParam("loginname") String loginname, @RequestParam("password") String password, Model model)&#123; logger.info("登录名" + loginname + " 密码" + password); for (User user : userList) &#123; if (user.getLoginname().equals(loginname) &amp;&amp; user.getPassword().equals(password)) &#123; model.addAttribute("user", user); return "welcome"; &#125; &#125; return "loginForm"; &#125;&#125; springmvc-config2.xml123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!--&lt;bean name="/hello" class="org.fkit.controller.HelloController"/&gt;--&gt; &lt;context:component-scan base-package="org.fkit.controller"/&gt; &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix"&gt; &lt;value&gt;/WEB-INF/content/&lt;/value&gt; &lt;/property&gt; &lt;property name="suffix"&gt; &lt;value&gt;.jsp&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; web.xml1234567891011121314151617181920212223242526272829303132&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1"&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc2&lt;/servlet-name&gt; &lt;servlet-class&gt; org.springframework.web.servlet.DispatcherServlet &lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;WEB-INF/springmvc-config2.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc2&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt; org.springframework.web.util.Log4jConfigListener &lt;/listener-class&gt; &lt;/listener&gt;&lt;/web-app&gt;]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PathVariable，RequestHeader，CookieValue注解测试]]></title>
    <url>%2F2018%2F11%2F14%2FPathVariable%EF%BC%8CRequestHeader%EF%BC%8CCookieValue%E6%B3%A8%E8%A7%A3%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041package org.fkit.controller;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.CookieValue;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class DataBindingController &#123; private static final Log logger = LogFactory.getLog(DataBindingController.class); @RequestMapping(value = "/pathVariableTest/&#123;userId&#125;") public void pathVariableTest(@PathVariable Integer userId) &#123; logger.info("通过@PathVariable获得的数据：" + userId); &#125; @RequestMapping(value = "/requestHeaderTest") public void requestHeaderTest( @RequestHeader("User-Agent") String userAgent, @RequestHeader(value = "Accept") String[] accepts) &#123; logger.info("通过@requestHeaderTest获得的数据:" + userAgent); for (String accept : accepts) &#123; logger.info(accept); &#125; &#125; @RequestMapping(value = "/cookieValueTest") public void cookieValueTest( @CookieValue(value = "JSESSIONID", defaultValue = "") String sessionId) &#123; logger.info("通过@CookieValue获得的数据：" + sessionId); &#125; @RequestMapping(value = "/testWebsite") public String testWebsite()&#123; return "index"; &#125;&#125; jsp:1234567891011121314151617181920&lt;%-- Created by IntelliJ IDEA. User: 34924 Date: 2018/8/1 Time: 22:40 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href="/pathVariableTest/1"&gt;测试注解1&lt;/a&gt;&lt;br&gt;&lt;a href="/requestHeaderTest"&gt;注解2&lt;/a&gt;&lt;br&gt;&lt;a href="/cookieValueTest"&gt;注解3&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[log4.properties配置]]></title>
    <url>%2F2018%2F11%2F14%2Flog4-properties%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[放在WEB-INF的目录下：123456789101112131415161718192021222324# Logging levelsolr.log=$&#123;solr.solr.home&#125;/../logslog4j.rootLogger=INFO, filelog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayoutlog4j.appender.CONSOLE.layout.ConversionPattern=%-4r [%t] %-5p %c %x \u2013 %m%n#- size rotation with log cleanup.log4j.appender.file=org.apache.log4j.RollingFileAppenderlog4j.appender.file.MaxFileSize=4MBlog4j.appender.file.MaxBackupIndex=9#- File to log to and log formatlog4j.appender.file.File=$&#123;solr.log&#125;/solr.loglog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=%-5p - %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;; %C; %m\nlog4j.logger.org.apache.zookeeper=WARNlog4j.logger.org.apache.hadoop=WARN# set to INFO to enable infostream log messageslog4j.logger.org.apache.solr.update.LoggingInfoStream=OFF 在web.xml中配置：12345678910&lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;listener-class&gt; org.springframework.web.util.Log4jConfigListener &lt;/listener-class&gt;&lt;/listener&gt;]]></content>
      <categories>
        <category>日志配置</category>
      </categories>
      <tags>
        <tag>日志配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react的router路由跳转获取url参数方法]]></title>
    <url>%2F2018%2F11%2F14%2Freact%E7%9A%84route%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E8%8E%B7%E5%8F%96url%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[例如一个页面分为三块，导航栏，左栏右栏，左栏为页面跳转，右栏为显示list页面或者detail页面，如下所示： 如果使用如下代码进行路由，url改变了，但是接收不到：12345678910&lt;div className='content-right'&gt; &lt;Layout.Content &gt; &lt;BrowserRouter&gt; &lt;Switch&gt; &lt;Route path='/development/list' component=&#123;Com_dev_list&#125; /&gt; &lt;Route path="/development/list:type" component=&#123;Com_dev_list&#125; /&gt; &lt;Route path='/development/detail:id' component=&#123;Com_dev_detail&#125; /&gt; &lt;/Switch&gt; &lt;/BrowserRouter&gt; &lt;/Layout.Content&gt; 使用component接收：12345678910componentWillReceiveProps(nextProps)&#123; axios.get(host + 'development/list/' + nextProps.match.params.type.replace(":type=","") +'/' +1).then( response =&gt; &#123; let items = response.data; items = items.list; this.setState(&#123;list:items&#125;); window.scrollTo(0, 0) &#125; );&#125; 实际上nextProps.match.params.type.replace(“:type=”,””)并未接收到url每次的改变，需要使用window.location.href，这样每次都可以接收到。但是是否真的这么暴力美学，还需要进行之后的学习。]]></content>
      <categories>
        <category>react</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>router</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis注解写法]]></title>
    <url>%2F2018%2F11%2F13%2FMybatis%E6%B3%A8%E8%A7%A3%E5%86%99%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.普通增删改查使用表：User在mybatis-config.xml里配置1&lt;mapper class="org.fkit.mapper.UserMapper"/&gt; 注释掉原来的xml配置路径。注解java类：123456789101112131415161718192021222324252627282930313233//UserMapper.javapackage org.fkit.mapper;import org.apache.ibatis.annotations.*;import org.fkit.domain.Clazz;import org.fkit.domain.User;import java.util.List;public interface UserMapper &#123; @Insert("insert into tb_user(name,sex,age) values(#&#123;name&#125;,#&#123;sex&#125;,#&#123;age&#125;)") @Options(useGeneratedKeys = true, keyProperty = "id") int saveUser(User user); @Delete("delete from tb_user where id = #&#123;id&#125; or name = #&#123;cctv&#125;") int removeUser(@Param("id") Integer id, @Param("cctv") String n); @Update("update tb_user set name = #&#123;name&#125;,sex = #&#123;sex&#125;, age = #&#123;age&#125; where id = #&#123;id&#125;") void modifyUser(User user); @Select("select * from tb_user where id = #&#123;id&#125;") @Results(&#123; @Result(id = true, column = "id", property = "id"), @Result(column = "name", property = "name"), @Result(column = "sex", property = "sex"), @Result(column = "age", property = "age") &#125;) User selectUserById(Integer id); @Select("select * from tb_user") List&lt;User&gt; selectAllUser();&#125; 测试：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899//InsertTest.javapublic class InsertTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); User user = new User("1111jack", "男", 22); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); userMapper.saveUser(user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: insert into tb_user(name,sex,age) values(?,?,?) DEBUG [main] - ==&gt; Parameters: 1111jack(String), 男(String), 22(Integer)DEBUG [main] - &lt;== Updates: 1//DeleteTest.javapublic class DeleteTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); userMapper.removeUser(16,"jack"); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: delete from tb_user where id = ? or name = ? DEBUG [main] - ==&gt; Parameters: 16(Integer), jack(String)DEBUG [main] - &lt;== Updates: 1//UpdateTest.javapublic class UpdateTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); User user = userMapper.selectUserById(12); user.setName("hello?"); userMapper.modifyUser(user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: select * from tb_user where id = ? DEBUG [main] - ==&gt; Parameters: 12(Integer)DEBUG [main] - &lt;== Total: 1DEBUG [main] - ==&gt; Preparing: update tb_user set name = ?,sex = ?, age = ? where id = ? DEBUG [main] - ==&gt; Parameters: hello?(String), 男(String), 26(Integer), 12(Integer)DEBUG [main] - &lt;== Updates: 1//SelectTest.javapublic class SelectTest &#123; public static void main(String args[])&#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); UserMapper userMapper = sqlSession.getMapper(UserMapper.class); User user = userMapper.selectUserById(12); System.out.println(user); sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: select * from tb_user where id = ? DEBUG [main] - ==&gt; Parameters: 12(Integer)DEBUG [main] - &lt;== Total: 1User&#123;id=12, name='hello?', sex='男', age=26&#125;//SelectMapTest.javapublic class SelectMapTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession();// 获取user对象集 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); List&lt;User&gt; users = userMapper.selectAllUser(); for (User user : users) &#123; System.out.println(user); &#125; sqlSession.commit(); sqlSession.close(); &#125;&#125;//output:DEBUG [main] - ==&gt; Preparing: select * from tb_user DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 10User&#123;id=1, name='hello?', sex='g', age=11&#125;User&#123;id=4, name='gg', sex='男', age=26&#125;User&#123;id=5, name='gg', sex='男', age=26&#125;User&#123;id=6, name='gg', sex='男', age=26&#125;User&#123;id=7, name='gg', sex='男', age=26&#125;User&#123;id=8, name='gg', sex='男', age=26&#125;User&#123;id=9, name='gg', sex='男', age=26&#125;User&#123;id=10, name='gg', sex='男', age=26&#125;User&#123;id=11, name='gg', sex='男', age=26&#125;User&#123;id=12, name='hello?', sex='男', age=26&#125;]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mabatis逆向工程]]></title>
    <url>%2F2018%2F11%2F13%2Fmabatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文使用idea编译器，安装Mybatisplus插件后可以使用逆向工程。 配置：1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" &gt;&lt;generatorConfiguration&gt; &lt;classPathEntry location="C:/Users/34924/Desktop/mysql-connector-java-5.1.46.jar"/&gt; &lt;context id="context" targetRuntime="MyBatis3"&gt; &lt;commentGenerator&gt; &lt;property name="suppressAllComments" value="true"/&gt; &lt;property name="suppressDate" value="false"/&gt; &lt;/commentGenerator&gt; &lt;!--&lt;jdbcConnection userId="root" password="123456" driverClass="com.mysql.jdbc.Driver"--&gt; &lt;!--connectionURL="jdbc:mysql://localhost:3306/sss"/&gt;--&gt; &lt;javaTypeResolver&gt; &lt;property name="forceBigDecimals" value="false"/&gt; &lt;/javaTypeResolver&gt; &lt;javaModelGenerator targetPackage="org.model" targetProject="."&gt; &lt;property name="enableSubPackages" value="false"/&gt; &lt;property name="trimStrings" value="true"/&gt; &lt;/javaModelGenerator&gt; &lt;sqlMapGenerator targetPackage="org.mapper" targetProject="."&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/sqlMapGenerator&gt; &lt;javaClientGenerator targetPackage="org.mapper" type="MIXEDMAPPER" targetProject="."&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/javaClientGenerator&gt; &lt;table schema="sn349245467" tableName="polls_question" enableCountByExample="false" enableDeleteByExample="false" enableUpdateByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"/&gt; &lt;table schema="sn349245467" tableName="polls_choice" enableCountByExample="false" enableDeleteByExample="false" enableUpdateByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"/&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 注意：jdbc版本最好用5.x左右的，targetRuntime使用Mybatis3，使用简略版的会少东西。javaClientGenerator的type选用MIXEDMAPPER。 使用了逆向工程后，在一对多等关系的时候，需要把默认的查找方式由select param1,param2,…改为select *，以及改resultMap的BaseResultMap。]]></content>
      <categories>
        <category>java</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>java</tag>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea创建maven项目时显示“Loading archetype list ”]]></title>
    <url>%2F2018%2F11%2F13%2Fidea%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%98%BE%E7%A4%BA%E2%80%9CLoading%20archetype%20list%20%E2%80%9D%2F</url>
    <content type="text"><![CDATA[本文参考https://blog.csdn.net/u011403655/article/details/46843331 1.idea创建maven项目时一直显示“Loading archetype list ”删除{User_Home}/.IntelliJIdea{Version}/system/Maven/Indices下面的文件，然后重启idea。 2.IntelliJ IDEA 创建maven-archetype-webapp超时问题 File -&gt; Other Settings -&gt; Default Settings… Build, Execution, Deployment -&gt; Build Tools -&gt; Maven -&gt; Runner, 在VM Options中填写如下 -DarchetypeCatalog=internal Apply -&gt; OK即可 3.创建完项目后命令行卡在 [INFO] Generating project in Batch modeMaven命令执行到Generating Project in Batch mode 卡住，原因是网络带宽不足，需要下载一个约4.1M的archetype-catalog.xml文件。 在maven的五分钟入门里面，有这样一个命令： mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false这句话的命令是创建一个默认的项目，但我在执行这个命令时，命令行会停在 [INFO] Generating project in Batch mode这句话会停很久。【当然，也有人的一下就过去。】 增加一个-X参数，可以查看详细信息1mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -X 可以看到，程序停在了下面这一行。1[DEBUG] Searching for remote catalog: http://repo1.maven.org/maven2/archetype-catalog.xml 去查询这个文件的时候网络比较差或者其他原因，导致挂在那里。 解决方法很简单。 把上述地址复制到浏览器中，下载这个文件到本地。 把文件archetype-catalog.xml复制到目录.m2\repository\org\apache\maven\archetype\archetype-catalog\2.2下面。 在上述命令后增加参数-DarchetypeCatalog=local，变成读取本地文件即可。4.庆祝一下123456789101112131415161718192021[INFO] ----------------------------------------------------------------------------[INFO] Using following parameters for creating project from Archetype: maven-archetype-webapp:RELEASE[INFO] ----------------------------------------------------------------------------[INFO] Parameter: groupId, Value: com.ssm.study[INFO] Parameter: artifactId, Value: ssmframe[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: package, Value: com.ssm.study[INFO] Parameter: packageInPathFormat, Value: com/ssm/study[INFO] Parameter: package, Value: com.ssm.study[INFO] Parameter: version, Value: 1.0-SNAPSHOT[INFO] Parameter: groupId, Value: com.ssm.study[INFO] Parameter: artifactId, Value: ssmframe[INFO] Project created from Archetype in dir: C:\Users\34924\AppData\Local\Temp\archetypetmp\ssmframe[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 16:09 min[INFO] Finished at: 2018-07-20T21:16:52+08:00[INFO] Final Memory: 12M/87M[INFO] ------------------------------------------------------------------------[INFO] Maven execution finished]]></content>
      <categories>
        <category>Maven</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis的动态sql]]></title>
    <url>%2F2018%2F11%2F13%2FMybatis%E7%9A%84%E5%8A%A8%E6%80%81sql%2F</url>
    <content type="text"><![CDATA[本文是关于mybatis的早期使用方法。 0.前期准备123456789101112131415CREATE TABLE tb_employee( id INT AUTO_INCREMENT PRIMARY KEY, loginname VARCHAR(18) NULL, password VARCHAR(18) NULL, name VARCHAR(18) NULL, sex CHAR(2) NULL, age INT NULL, phone VARCHAR(21) NULL, sal DOUBLE NULL, state VARCHAR(18) NULL, CONSTRAINT tb_employee_id_uindex UNIQUE (id)) POJO类：123456789101112public class TbEmployee &#123; private long id; private String loginname; private String password; private String name; private String sex; private long age; private String phone; private double sal; private String state;//getter,setter 1.xml配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="org.fkit.mapper.EmployeeMapper"&gt; &lt;select id="selectEmployeeByIdLike" resultType="org.fkit.domain.TbEmployee"&gt; SELECT * FROM tb_employee &lt;where&gt; &lt;if test="id != null"&gt; and id = #&#123;id&#125; &lt;/if&gt; &lt;if test="sex != null"&gt; and sex = #&#123;sex&#125; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;select id="selectEmployeeChoose" resultType="org.fkit.domain.TbEmployee"&gt; select * from tb_employee &lt;where&gt; &lt;choose&gt; &lt;when test="id != null"&gt; and id = #&#123;id&#125; &lt;/when&gt; &lt;when test="loginname != null and password != null"&gt; and loginname = #&#123;loginname&#125; and password = #&#123;password&#125; &lt;/when&gt; &lt;otherwise&gt; and sex = '1' &lt;/otherwise&gt; &lt;/choose&gt; &lt;/where&gt; &lt;/select&gt; &lt;select id="selectEmployeeWithId" parameterType="int" resultType="org.fkit.domain.TbEmployee"&gt; SELECT * FROM tb_employee where id = #&#123;id&#125; &lt;/select&gt; &lt;update id="updateEmployeeIfNecessary" parameterType="org.fkit.domain.TbEmployee"&gt; UPDATE tb_employee &lt;set&gt; &lt;if test="loginname != null"&gt;loginname = #&#123;loginname&#125;,&lt;/if&gt; &lt;if test="password != null"&gt;password = #&#123;password&#125;,&lt;/if&gt; &lt;if test="name != null"&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test="sex != null"&gt;sex = #&#123;sex&#125;,&lt;/if&gt; &lt;if test="age != null"&gt;age = #&#123;age&#125;,&lt;/if&gt; &lt;if test="phone != null"&gt;phone = #&#123;phone&#125;,&lt;/if&gt; &lt;if test="sal != null"&gt;sal = #&#123;sal&#125;,&lt;/if&gt; &lt;if test="state != null"&gt;state = #&#123;state&#125;,&lt;/if&gt; &lt;/set&gt; where id = #&#123;id&#125; &lt;/update&gt; &lt;select id="selectEmployeeIn" resultType="org.fkit.domain.TbEmployee"&gt; select * from tb_employee where id in &lt;foreach item="item" index="index" collection="list" open="(" separator="," close=")"&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/select&gt; &lt;select id="selectEmployeeLikeName" resultType="org.fkit.domain.TbEmployee"&gt; &lt;bind name="pattern" value="'%' + _parameter.getName() + '%'"/&gt; &lt;bind name="pattern2" value="'%' + _parameter.getLoginname() +'%' "/&gt; SELECT * FROM tb_employee where name like #&#123;pattern&#125; and loginname like #&#123;pattern2&#125; &lt;/select&gt;&lt;/mapper&gt; 2.测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class DynamicSQLTest &#123; public static void main(String args[]) &#123; SqlSession sqlSession = FKSqlSessionFactory.getSqlSession(); DynamicSQLTest dynamicSQLTest = new DynamicSQLTest(); dynamicSQLTest.testSelectEmployeeByIdLike(sqlSession); dynamicSQLTest.testSelectEmployeeChoose(sqlSession); dynamicSQLTest.testUpdateEmployeeIfNecessary(sqlSession); dynamicSQLTest.testSelectEmployeeIn(sqlSession); dynamicSQLTest.testSelectEmployeeLikeName(sqlSession); sqlSession.commit(); sqlSession.close(); &#125; public void testSelectEmployeeByIdLike(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); HashMap&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;(); params.put("id", 1); params.put("sex", 1); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeByIdLike(params); tbEmployees.forEach(tbEmployee -&gt; System.out.println(tbEmployee)); &#125; public void testSelectEmployeeChoose(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); HashMap&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;(); params.put("loginname", "jack"); params.put("password", "123"); params.put("id", 2); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeChoose(params); tbEmployees.forEach(tbEmployee -&gt; System.out.println(tbEmployee)); &#125; public void testUpdateEmployeeIfNecessary(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); TbEmployee tbEmployee = employeeMapper.selectEmployeeWithId(1); System.out.println(tbEmployee); tbEmployee.setLoginname("newJack"); employeeMapper.updateEmployeeIfNecessary(tbEmployee); &#125; public void testSelectEmployeeIn(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); List&lt;Integer&gt; integers = new ArrayList&lt;Integer&gt;(); integers.add(1); integers.add(3); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeIn(integers); tbEmployees.forEach(tbEmployee -&gt; System.out.println(tbEmployee)); &#125; public void testSelectEmployeeLikeName(SqlSession sqlSession) &#123; EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class); TbEmployee tbEmployee = new TbEmployee(); tbEmployee.setName("a"); tbEmployee.setLoginname("J"); List&lt;TbEmployee&gt; tbEmployees = employeeMapper.selectEmployeeLikeName(tbEmployee); tbEmployees.forEach(tbEmployee1 -&gt; System.out.println(tbEmployee1)); &#125;&#125; 12345678910111213141516171819202122232425//output:DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_employee WHERE id = ? and sex = ? DEBUG [main] - ==&gt; Parameters: 1(Integer), 1(Integer)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125;DEBUG [main] - ==&gt; Preparing: select * from tb_employee WHERE id = ? DEBUG [main] - ==&gt; Parameters: 2(Integer)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=2, loginname='rose', password='456', name='rooose', sex='2', age=21, phone='654321', sal=1121.0, state='active'&#125;DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_employee where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125;DEBUG [main] - ==&gt; Preparing: UPDATE tb_employee SET loginname = ?, password = ?, name = ?, sex = ?, age = ?, phone = ?, sal = ?, state = ? where id = ? DEBUG [main] - ==&gt; Parameters: newJack(String), 123(String), jaccck(String), 1(String), 26(Long), 123456(String), 3211.0(Double), active(String), 1(Long)DEBUG [main] - &lt;== Updates: 1DEBUG [main] - ==&gt; Preparing: select * from tb_employee where id in ( ? , ? ) DEBUG [main] - ==&gt; Parameters: 1(Integer), 3(Integer)DEBUG [main] - &lt;== Total: 2TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125;TbEmployee&#123;id=3, loginname='tom', password='tom', name='tooom', sex='1', age=12, phone='132', sal=32.2, state='active'&#125;DEBUG [main] - ==&gt; Preparing: SELECT * FROM tb_employee where name like ? and loginname like ? DEBUG [main] - ==&gt; Parameters: %a%(String), %J%(String)DEBUG [main] - &lt;== Total: 1TbEmployee&#123;id=1, loginname='newJack', password='123', name='jaccck', sex='1', age=26, phone='123456', sal=3211.0, state='active'&#125; 使用like的另一种写法：123456789101112&lt;select id="getUsersByConditionIf" resultType="com.model.User" parameterType="com.model.User"&gt; select * from user where &lt;if test="id!=null"&gt; id = #&#123;id&#125; &lt;/if&gt; &lt;if test="username!=null and username !=''"&gt; or username like "%"#&#123;username&#125;"%" &lt;/if&gt; &lt;if test="sex != null"&gt; and sex = #&#123;sex&#125; &lt;/if&gt;&lt;/select&gt; 使用”%”#{parameter}”%”，运行结果如下：1234567891011DEBUG [main] - ==&gt; Preparing: select id, username,birthday, sex, address,dept_id from user where id = ? DEBUG [main] - ==&gt; Parameters: 27(Integer)DEBUG [main] - &lt;== Total: 1DEBUG [main] - ==&gt; Preparing: select id, name from department where id = ? DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1User&#123;id=27, username='tes111t', birthday=Thu Jul 12 08:00:00 CST 2018, sex='1', address='1'&#125;DEBUG [main] - ==&gt; Preparing: select * from user where id = ? or username like "%"?"%" and sex = ? DEBUG [main] - ==&gt; Parameters: 27(Integer), 1(String), 1(String)DEBUG [main] - &lt;== Total: 2[User&#123;id=27, username='tes111t', birthday=Thu Jul 12 08:00:00 CST 2018, sex='1', address='1'&#125;, User&#123;id=32, username='11231', birthday=Thu Jul 12 08:00:00 CST 2018, sex='1', address='1'&#125;] 要使每个都写为and xxx= #{xx}的形式，而不是第一个需要去掉and，可以在sql前面的语句中写为1select * from xxx where 1=1 这样保证每个都可以写为and xxx = #{xx}的形式。 也可以使用where标签将所有拼接的动态条件放入。 但是where只能去掉第一个and。 一次更新多条数据：1void addUsers(@Param("userList") List&lt;User&gt; userList); 123456&lt;insert id="addUsers" &gt; insert into user(username,address) VALUES &lt;foreach collection="userList" item="user" separator=","&gt; (#&#123;user.username&#125;,#&#123;user.address&#125;) &lt;/foreach&gt;&lt;/insert&gt; 需要插入别的字段需要自己加入。]]></content>
      <categories>
        <category>Mybatis</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[范数]]></title>
    <url>%2F2018%2F11%2F13%2F%E8%8C%83%E6%95%B0%2F</url>
    <content type="text"><![CDATA[p-范数: $||x||_p = (|x_1|^p + |x_2|^p + |x_3|^3 + … + |x_n|^p)^{1/p} =\sqrt[p]{ \sum_{i=1}^n|x_i|^p}$ 2-范数(欧式范数): $||x||_2 = (|x_1|^2 + |x_2|^2 + |x_3|^2 + … + |x_n|^2)^{1/2} = \sqrt{ \sum_{i=1}^n x_i^2}$ ∞-范数: $||x||_∞ = max(x_1,x_2,x_3,…,x_n) = max_i|x_i|$ 1-范数即向量元素绝对值之和； 2-范数为Euclid范数（欧几里得范数，常用计算向量长度），即向量元素绝对值的平方和再开方； ∞-范数即所有向量元素绝对值中的最大值； -∞-范数即所有向量元素绝对值中的最小值； p-范数即向量元素绝对值的p次方和的1/p次幂。 可以参考：https://blog.csdn.net/susanzhang1231/article/details/52127011 https://www.jianshu.com/p/bf860ad177dd https://blog.csdn.net/bitcarmanlee/article/details/51945271]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>范数</tag>
        <tag>机器学习基础</tag>
      </tags>
  </entry>
</search>
