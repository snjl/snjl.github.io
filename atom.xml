<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snjl</title>
  
  <subtitle>我大概率会编程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://snjl.github.io/"/>
  <updated>2019-01-07T15:43:30.000Z</updated>
  <id>https://snjl.github.io/</id>
  
  <author>
    <name>snjl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker安装</title>
    <link href="https://snjl.github.io/2019/01/07/docker%E5%AE%89%E8%A3%85/"/>
    <id>https://snjl.github.io/2019/01/07/docker安装/</id>
    <published>2019-01-07T15:42:13.000Z</published>
    <updated>2019-01-07T15:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h1><ol><li><p>添加GPG key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span><br></pre></td></tr></table></figure></li><li><p>添加源<br> 新建文件：/etc/apt/sources.list.d/docker.list，在里面添加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https://apt.dockerproject.org/repo ubuntu-xenial main</span><br></pre></td></tr></table></figure></li><li><p>更新源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br></pre></td></tr></table></figure></li><li><p>安装与测试<br> 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install docker-engine</span><br></pre></td></tr></table></figure></li></ol><p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start </span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><h1 id="Centos安装"><a href="#Centos安装" class="headerlink" title="Centos安装"></a>Centos安装</h1><ol><li><p>确保 yum 包更新到最新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure></li><li><p>docker启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu安装&quot;&gt;&lt;a href=&quot;#Ubuntu安装&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu安装&quot;&gt;&lt;/a&gt;Ubuntu安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加GPG key：&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://snjl.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>留言板系统</title>
    <link href="https://snjl.github.io/2019/01/07/%E7%95%99%E8%A8%80%E6%9D%BF%E7%B3%BB%E7%BB%9F/"/>
    <id>https://snjl.github.io/2019/01/07/留言板系统/</id>
    <published>2019-01-07T15:41:29.000Z</published>
    <updated>2019-01-07T15:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>需要登录的留言板系统。</p><p>项目地址：<a href="https://github.com/snjl/springboot.happyNewYear.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.happyNewYear.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要登录的留言板系统。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.happyNewYear.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/s
      
    
    </summary>
    
      <category term="项目" scheme="https://snjl.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目" scheme="https://snjl.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>mkdir命令</title>
    <link href="https://snjl.github.io/2019/01/07/mkdir%E5%91%BD%E4%BB%A4/"/>
    <id>https://snjl.github.io/2019/01/07/mkdir命令/</id>
    <published>2019-01-07T15:41:01.000Z</published>
    <updated>2019-01-07T15:41:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>linux mkdir 命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有写权限，并且指定的目录名不能是当前目录中已有的目录。</p><h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [选项] 目录...</span><br></pre></td></tr></table></figure><h1 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h1><p>通过 mkdir 命令可以实现在指定位置创建以 DirName(指定的文件名)命名的文件夹或目录。要创建文件夹或目录的用户必须对所创建的文件夹的父文件夹具有写权限。并且，所创建的文件夹(目录)不能与其父目录(即父文件夹)中的文件名重名，即同一个目录下不能有同名的(区分大小写)。 </p><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-m, --mode=模式，设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask</span><br><span class="line"></span><br><span class="line"> -p, --parents  可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录; </span><br><span class="line"></span><br><span class="line"> -v, --verbose  每次创建新目录都显示信息</span><br><span class="line"></span><br><span class="line">     --help   显示此帮助信息并退出</span><br><span class="line"></span><br><span class="line">     --version  输出版本信息并退出</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p test2/test22</span><br></pre></td></tr></table></figure><p>创建一个文件夹test2，里面有一个子文件夹test22。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux mkdir 命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有写权限，并且指定的目录名不能是当前目录中已有的目录。&lt;/p&gt;
&lt;h1 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="命令" scheme="https://snjl.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>vi命令</title>
    <link href="https://snjl.github.io/2019/01/07/vi%E5%91%BD%E4%BB%A4/"/>
    <id>https://snjl.github.io/2019/01/07/vi命令/</id>
    <published>2019-01-07T15:40:21.000Z</published>
    <updated>2019-01-07T15:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-常用"><a href="#1-常用" class="headerlink" title="1. 常用"></a>1. 常用</h1><p>删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x        删除当前光标下的字符</span><br><span class="line">dw       删除光标之后的单词剩余部分。</span><br><span class="line">d$       删除光标之后的该行剩余部分。</span><br><span class="line">dd       删除当前行。</span><br><span class="line"></span><br><span class="line">c        功能和d相同，区别在于完成删除操作后进入INSERT MODE</span><br><span class="line">cc       也是删除当前行，然后进入INSERT MODE</span><br></pre></td></tr></table></figure></p><p>移动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gg       到页首</span><br><span class="line">G        到页末</span><br><span class="line">0        到行首</span><br><span class="line">$        到行尾</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="2-在Vi中移动光标"><a href="#2-在Vi中移动光标" class="headerlink" title="2. 在Vi中移动光标"></a>2. 在Vi中移动光标</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> k        上</span><br><span class="line">h   l    左  右</span><br><span class="line">  j        下</span><br><span class="line"></span><br><span class="line">^        移动到该行第一个非空格的字符处</span><br><span class="line">w        向前移动一个单词，将符号或标点当作单词处理</span><br><span class="line">W        向前移动一个单词，不把符号或标点当作单词处理</span><br><span class="line">b        向后移动一个单词，把符号或标点当作单词处理</span><br><span class="line">B        向后移动一个单词，不把符号或标点当作单词处理</span><br><span class="line">(        光标移至句首</span><br><span class="line">)        光标移至句尾</span><br><span class="line">&#123;        光标移至段落开头</span><br><span class="line">&#125;        光标移至段落结尾</span><br><span class="line">H        光标移至屏幕顶行</span><br><span class="line">M        光标移至屏幕中间行</span><br><span class="line">L        光标移至屏幕最后行 </span><br><span class="line">0        到行首</span><br><span class="line">$        到行尾</span><br><span class="line">gg       到页首</span><br><span class="line">G        到页末</span><br><span class="line">行号+G   跳转到指定行</span><br><span class="line">n+       光标下移n行</span><br><span class="line">n-       光标上移n行 </span><br><span class="line">Ctrl+g   查询当前行信息和当前文件信息</span><br><span class="line"></span><br><span class="line">fx       向右跳到本行字符x处（x可以是任何字符）</span><br><span class="line">Fx       向左跳到本行字符x处（x可以是任何字符）</span><br><span class="line"></span><br><span class="line">tx       和fx相同，区别是跳到字符x前</span><br><span class="line">Tx       和Fx相同，区别是跳到字符x后</span><br><span class="line"></span><br><span class="line">C-b      向上滚动一屏</span><br><span class="line">C-f      向下滚动一屏</span><br><span class="line">C-u      向上滚动半屏</span><br><span class="line">C-d      向下滚动半屏</span><br><span class="line">C-y      向上滚动一行</span><br><span class="line">C-e      向下滚动一行</span><br><span class="line"></span><br><span class="line">nz       将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</span><br></pre></td></tr></table></figure><h1 id="3-进入和退出Vi命令"><a href="#3-进入和退出Vi命令" class="headerlink" title="3. 进入和退出Vi命令"></a>3. 进入和退出Vi命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi filename               打开或新建文件，并将光标置于第一行首</span><br><span class="line">vi +n filename            打开文件，并将光标置于第n行首</span><br><span class="line">vi + filename             打开文件，并将光标置于最后一行首</span><br><span class="line">vi +/pattern filename     打开文件，并将光标置于第一个与pattern匹配的串处</span><br><span class="line">vi -r filename            在上次正用vi编辑时发生系统崩溃，恢复filename</span><br><span class="line">vi filename ... filename  打开多个文件，依次进行编辑 </span><br><span class="line"></span><br><span class="line">ZZ                        退出vi并保存</span><br><span class="line">:q!                       退出vi，不保存</span><br><span class="line">:wq                       退出vi并保存</span><br></pre></td></tr></table></figure><h1 id="4-重复操作"><a href="#4-重复操作" class="headerlink" title="4. 重复操作"></a>4. 重复操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.        重复上一次操作</span><br></pre></td></tr></table></figure><h1 id="5-自动补齐"><a href="#5-自动补齐" class="headerlink" title="5. 自动补齐"></a>5. 自动补齐</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C-n      匹配下一个关键字</span><br><span class="line">C-p      匹配上一个关键字</span><br></pre></td></tr></table></figure><h1 id="6-插入"><a href="#6-插入" class="headerlink" title="6. 插入"></a>6. 插入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">o        在光标下方新开一行并将光标置于新行行首，进入插入模式。</span><br><span class="line">O        同上，在光标上方。</span><br><span class="line"></span><br><span class="line">a        在光标之后进入插入模式。</span><br><span class="line">A        同上，在光标之前。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R        进入替换模式，直到按下Esc</span><br><span class="line">set xxx  设置XXX选项。</span><br></pre></td></tr></table></figure><h1 id="7-行合并"><a href="#7-行合并" class="headerlink" title="7. 行合并"></a>7. 行合并</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">J        把下面一行合并到本行后面</span><br></pre></td></tr></table></figure><h1 id="8-Vi中查找及替换命令"><a href="#8-Vi中查找及替换命令" class="headerlink" title="8. Vi中查找及替换命令"></a>8. Vi中查找及替换命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/pattern         从光标开始处向文件尾搜索pattern</span><br><span class="line">?pattern         从光标开始处向文件首搜索pattern</span><br><span class="line">n                在同一方向重复上一次搜索命令</span><br><span class="line">N                在反方向上重复上一次搜索命令</span><br><span class="line">%                查找配对的括号</span><br><span class="line">:s/p1/p2/g       将当前行中所有p1均用p2替代，若要每个替换都向用户询问则应该用gc选项</span><br><span class="line">:n1,n2s/p1/p2/g  将第n1至n2行中所有p1均用p2替代</span><br><span class="line">:g/p1/s//p2/g    将文件中所有p1均用p2替换</span><br><span class="line"></span><br><span class="line">.*[]^%~$ 在Vi中具有特殊含义，若需要查找则应该加上转义字符&quot;\&quot;</span><br></pre></td></tr></table></figure><h1 id="9-查找的一些选项"><a href="#9-查找的一些选项" class="headerlink" title="9. 查找的一些选项"></a>9. 查找的一些选项</h1><h2 id="1-设置高亮"><a href="#1-设置高亮" class="headerlink" title="1. 设置高亮"></a>1. 设置高亮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:set hlsearch    设置高亮</span><br><span class="line">:set nohlsearch  关闭高亮</span><br><span class="line">:nohlsearch      关闭当前已经设置的高亮</span><br></pre></td></tr></table></figure><h2 id="2-增量查找"><a href="#2-增量查找" class="headerlink" title="2. 增量查找"></a>2. 增量查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set incsearch   设置增量查找</span><br><span class="line">:set noincsearch 关闭增量查找</span><br></pre></td></tr></table></figure><h1 id="10-在Vi中删除"><a href="#10-在Vi中删除" class="headerlink" title="10. 在Vi中删除"></a>10. 在Vi中删除</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x        删除当前光标下的字符</span><br><span class="line">dw       删除光标之后的单词剩余部分。</span><br><span class="line">d$       删除光标之后的该行剩余部分。</span><br><span class="line">dd       删除当前行。</span><br><span class="line"></span><br><span class="line">c        功能和d相同，区别在于完成删除操作后进入INSERT MODE</span><br><span class="line">cc       也是删除当前行，然后进入INSERT MODE</span><br></pre></td></tr></table></figure><h1 id="11-更改字符"><a href="#11-更改字符" class="headerlink" title="11. 更改字符"></a>11. 更改字符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rx       将当前光标下的字符更改为x（x为任意字符） </span><br><span class="line">~        更改当前光标下的字符的大小写</span><br></pre></td></tr></table></figure><h1 id="12-键盘宏操作"><a href="#12-键盘宏操作" class="headerlink" title="12. 键盘宏操作"></a>12. 键盘宏操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qcharacter  开始录制宏，character为a到z的任意字符</span><br><span class="line">q           终止录制宏</span><br><span class="line">@character  调用先前录制的宏</span><br></pre></td></tr></table></figure><h1 id="13-恢复误操作"><a href="#13-恢复误操作" class="headerlink" title="13. 恢复误操作"></a>13. 恢复误操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u        撤销最后执行的命令</span><br><span class="line">U        修正之前对该行的操作</span><br><span class="line">Ctrl+R   Redo</span><br></pre></td></tr></table></figure><h1 id="14-在Vi中操作Frame"><a href="#14-在Vi中操作Frame" class="headerlink" title="14. 在Vi中操作Frame"></a>14. 在Vi中操作Frame</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c-w c-n  增加frame</span><br><span class="line">c-w c-c  减少frame</span><br><span class="line">c-w c-w  切换frame</span><br><span class="line">c-w c-r  交换两个frame</span><br></pre></td></tr></table></figure><h1 id="15-VIM中的块操作"><a href="#15-VIM中的块操作" class="headerlink" title="15. VIM中的块操作"></a>15. VIM中的块操作</h1><p>Vim支持多达26个剪贴板 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">选块   先用v，C-v，V选择一块，然后用y复制，再用p粘贴。</span><br><span class="line">yy     复制当前整行</span><br><span class="line">nyy    复制当前行开始的n行内容</span><br><span class="line">?nyy   将光标当前行及其下n行的内容保存到寄存器?中，其中?为一个字母，n为一个数字</span><br><span class="line">?nyw   将光标当前行及其下n个词保存到寄存器?中，其中?为一个字母，n为一个数字</span><br><span class="line">?nyl   将光标当前行及其下n个字符保存到寄存器?中，其中?为一个字母，n为一个数字</span><br><span class="line">?p     将寄存器?中的内容粘贴到光标位置之后。如果?是用yy复制的完整行，</span><br><span class="line">       则粘贴在光标所在行下面。这里?可以是一个字母，也可以是一个数字 </span><br><span class="line">?P     将寄存器a中的内容粘贴到光标位置之前。如果?是用yy复制的完整行，</span><br><span class="line">       则粘贴在光标所在行上面。这里?可以是一个字母，也可以是一个数字 </span><br><span class="line">ay[motion]</span><br><span class="line">          ay$    复制光标位置到行末并保存在寄存器a中</span><br><span class="line">          ayft   复制光标位置到当前行第一个字母t并保存在寄存器a中</span><br></pre></td></tr></table></figure><p>以上指令皆可去掉a工作，则y,p对未命名寄存器工作（所有d,c,x,y的对象都被保存在这里）。</p><h2 id="1-剪切-复制-粘贴"><a href="#1-剪切-复制-粘贴" class="headerlink" title="1. 剪切/复制/粘贴"></a>1. 剪切/复制/粘贴</h2><p>所有删除的内容自动被保存，可以用p键粘贴 </p><h1 id="16-Vi的选项设置"><a href="#16-Vi的选项设置" class="headerlink" title="16. Vi的选项设置"></a>16. Vi的选项设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">all         列出所有选项设置情况</span><br><span class="line">term        设置终端类型</span><br><span class="line">ignorance   在搜索中忽略大小写</span><br><span class="line">list        显示制表位(Ctrl+I)和行尾标志($)</span><br><span class="line">number      显示行号</span><br><span class="line">report      显示由面向行的命令修改过的数目</span><br><span class="line">terse       显示简短的警告信息</span><br><span class="line">warn        在转到别的文件时若没保存当前文件则显示NO write信息</span><br><span class="line">nomagic     允许在搜索模式中，使用前面不带“\”的特殊字符</span><br><span class="line">nowrapscan  禁止vi在搜索到达文件两端时，又从另一端开始</span><br><span class="line">mesg        允许vi显示其他用户用write写到自己终端上的信息</span><br></pre></td></tr></table></figure><h1 id="17-tips"><a href="#17-tips" class="headerlink" title="17. tips"></a>17. tips</h1><p>对代码自动格式化 gg=G </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-常用&quot;&gt;&lt;a href=&quot;#1-常用&quot; class=&quot;headerlink&quot; title=&quot;1. 常用&quot;&gt;&lt;/a&gt;1. 常用&lt;/h1&gt;&lt;p&gt;删除：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x        删除当前光标下的字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dw       删除光标之后的单词剩余部分。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d$       删除光标之后的该行剩余部分。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd       删除当前行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c        功能和d相同，区别在于完成删除操作后进入INSERT MODE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cc       也是删除当前行，然后进入INSERT MODE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;移动：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gg       到页首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G        到页末&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0        到行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$        到行尾&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="命令" scheme="https://snjl.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>docker： 安装 python</title>
    <link href="https://snjl.github.io/2019/01/07/docker%EF%BC%9A-%E5%AE%89%E8%A3%85-python/"/>
    <id>https://snjl.github.io/2019/01/07/docker：-安装-python/</id>
    <published>2019-01-07T15:37:41.000Z</published>
    <updated>2019-01-07T15:38:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法一、docker-pull-python-3-6"><a href="#方法一、docker-pull-python-3-6" class="headerlink" title="方法一、docker pull python:3.6"></a>方法一、docker pull python:3.6</h1><p>查找Docker Hub上的python镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/python$ docker search python</span><br><span class="line">NAME                           DESCRIPTION                        STARS     OFFICIAL   AUTOMATED</span><br><span class="line">python                         Python is an interpreted,...       982       [OK]       </span><br><span class="line">kaggle/python                  Docker image for Python...         33                   [OK]</span><br><span class="line">azukiapp/python                Docker image to run Python ...     3                    [OK]</span><br><span class="line">vimagick/python                mini python                                  2          [OK]</span><br><span class="line">tsuru/python                   Image for the Python ...           2                    [OK]</span><br><span class="line">pandada8/alpine-python         An alpine based python image                 1          [OK]</span><br><span class="line">1science/python                Python Docker images based on ...  1                    [OK]</span><br><span class="line">lucidfrontier45/python-uwsgi   Python with uWSGI                  1                    [OK]</span><br><span class="line">orbweb/python                  Python image                       1                    [OK]</span><br><span class="line">pathwar/python                 Python template for Pathwar levels 1                    [OK]</span><br><span class="line">rounds/10m-python              Python, setuptools and pip.        0                    [OK]</span><br><span class="line">ruimashita/python              ubuntu 14.04 python                0                    [OK]</span><br><span class="line">tnanba/python                  Python on CentOS-7 image.          0                    [OK]</span><br></pre></td></tr></table></figure></p><p>这里我们拉取官方的镜像,标签为3.6<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/python$ docker pull python:3.6</span><br></pre></td></tr></table></figure><p>等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为python,标签为3.6的镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/python$ docker images python:3.5 </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">python              3.5              045767ddf24a        9 days ago          684.1 MB</span><br></pre></td></tr></table></figure></p><h1 id="方法二、通过-Dockerfile-构建"><a href="#方法二、通过-Dockerfile-构建" class="headerlink" title="方法二、通过 Dockerfile 构建"></a>方法二、通过 Dockerfile 构建</h1><p>首先，创建目录python,用于存放后面的相关东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ mkdir -p ~/python ~/python/myapp</span><br></pre></td></tr></table></figure><p>myapp目录将映射为python容器配置的应用目录</p><p>进入创建的python目录，创建Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">FROM buildpack-deps:jessie</span><br><span class="line"></span><br><span class="line"># remove several traces of debian python</span><br><span class="line">RUN apt-get purge -y python.*</span><br><span class="line"></span><br><span class="line"># http://bugs.python.org/issue19846</span><br><span class="line"># &gt; At the moment, setting &quot;LANG=C&quot; on a Linux system *fundamentally breaks Python 3*, and that&apos;s not OK.</span><br><span class="line">ENV LANG C.UTF-8</span><br><span class="line"></span><br><span class="line"># gpg: key F73C700D: public key &quot;Larry Hastings &lt;larry@hastings.org&gt;&quot; imported</span><br><span class="line">ENV GPG_KEY 97FC712E4C024BBEA48A61ED3A5CA953F73C700D</span><br><span class="line"></span><br><span class="line">ENV PYTHON_VERSION 3.6</span><br><span class="line"></span><br><span class="line"># if this is called &quot;PIP_VERSION&quot;, pip explodes with &quot;ValueError: invalid truth value &apos;&lt;VERSION&gt;&apos;&quot;</span><br><span class="line">ENV PYTHON_PIP_VERSION 8.1.2</span><br><span class="line"></span><br><span class="line">RUN set -ex \</span><br><span class="line">        &amp;&amp; curl -fSL &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz&quot; -o python.tar.xz \</span><br><span class="line">        &amp;&amp; curl -fSL &quot;https://www.python.org/ftp/python/$&#123;PYTHON_VERSION%%[a-z]*&#125;/Python-$PYTHON_VERSION.tar.xz.asc&quot; -o python.tar.xz.asc \</span><br><span class="line">        &amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \</span><br><span class="line">        &amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$GPG_KEY&quot; \</span><br><span class="line">        &amp;&amp; gpg --batch --verify python.tar.xz.asc python.tar.xz \</span><br><span class="line">        &amp;&amp; rm -r &quot;$GNUPGHOME&quot; python.tar.xz.asc \</span><br><span class="line">        &amp;&amp; mkdir -p /usr/src/python \</span><br><span class="line">        &amp;&amp; tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \</span><br><span class="line">        &amp;&amp; rm python.tar.xz \</span><br><span class="line">        \</span><br><span class="line">        &amp;&amp; cd /usr/src/python \</span><br><span class="line">        &amp;&amp; ./configure --enable-shared --enable-unicode=ucs4 \</span><br><span class="line">        &amp;&amp; make -j$(nproc) \</span><br><span class="line">        &amp;&amp; make install \</span><br><span class="line">        &amp;&amp; ldconfig \</span><br><span class="line">        &amp;&amp; pip3 install --no-cache-dir --upgrade --ignore-installed pip==$PYTHON_PIP_VERSION \</span><br><span class="line">        &amp;&amp; find /usr/local -depth \</span><br><span class="line">                \( \</span><br><span class="line">                    \( -type d -a -name test -o -name tests \) \</span><br><span class="line">                    -o \</span><br><span class="line">                    \( -type f -a -name &apos;*.pyc&apos; -o -name &apos;*.pyo&apos; \) \</span><br><span class="line">                \) -exec rm -rf &apos;&#123;&#125;&apos; + \</span><br><span class="line">        &amp;&amp; rm -rf /usr/src/python ~/.cache</span><br><span class="line"></span><br><span class="line"># make some useful symlinks that are expected to exist</span><br><span class="line">RUN cd /usr/local/bin \</span><br><span class="line">        &amp;&amp; ln -s easy_install-3.6 easy_install \</span><br><span class="line">        &amp;&amp; ln -s idle3 idle \</span><br><span class="line">        &amp;&amp; ln -s pydoc3 pydoc \</span><br><span class="line">        &amp;&amp; ln -s python3 python \</span><br><span class="line">        &amp;&amp; ln -s python3-config python-config</span><br><span class="line"></span><br><span class="line">CMD [&quot;python3&quot;]</span><br></pre></td></tr></table></figure></p><p>通过Dockerfile创建一个镜像，替换成你自己的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/python$ docker build -t python:3.6 .</span><br></pre></td></tr></table></figure><p><strong>注意：命令最后有个’.’，要记得加上。</strong></p><p>创建完成后，我们可以在本地的镜像列表里查找到刚刚创建的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/python$ docker images python:3.5 </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">python              3.5              045767ddf24a        9 days ago          684.1 MB</span><br></pre></td></tr></table></figure></p><h1 id="使用python镜像"><a href="#使用python镜像" class="headerlink" title="使用python镜像"></a>使用python镜像</h1><p>在~/python/myapp目录下创建一个 helloworld.py 文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">print(&quot;Hello, World!&quot;);</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~/python$ docker run  -v $PWD/myapp:/usr/src/myapp  -w /usr/src/myapp python:3.5 python helloworld.py</span><br></pre></td></tr></table></figure><p>命令说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-v $PWD/myapp:/usr/src/myapp :将主机中当前目录下的myapp挂载到容器的/usr/src/myapp</span><br><span class="line"></span><br><span class="line">-w /usr/src/myapp :指定容器的/usr/src/myapp目录为工作目录</span><br><span class="line"></span><br><span class="line">python helloworld.py :使用容器的python命令来执行工作目录中的helloworld.py文件</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;方法一、docker-pull-python-3-6&quot;&gt;&lt;a href=&quot;#方法一、docker-pull-python-3-6&quot; class=&quot;headerlink&quot; title=&quot;方法一、docker pull python:3.6&quot;&gt;&lt;/a&gt;方法一、docker pull python:3.6&lt;/h1&gt;&lt;p&gt;查找Docker Hub上的python镜像&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;runoob@runoob:~/python$ docker search python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME                           DESCRIPTION                        STARS     OFFICIAL   AUTOMATED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python                         Python is an interpreted,...       982       [OK]       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kaggle/python                  Docker image for Python...         33                   [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;azukiapp/python                Docker image to run Python ...     3                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vimagick/python                mini python                                  2          [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tsuru/python                   Image for the Python ...           2                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pandada8/alpine-python         An alpine based python image                 1          [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1science/python                Python Docker images based on ...  1                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lucidfrontier45/python-uwsgi   Python with uWSGI                  1                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;orbweb/python                  Python image                       1                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pathwar/python                 Python template for Pathwar levels 1                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rounds/10m-python              Python, setuptools and pip.        0                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ruimashita/python              ubuntu 14.04 python                0                    [OK]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tnanba/python                  Python on CentOS-7 image.          0                    [OK]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里我们拉取官方的镜像,标签为3.6&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://snjl.github.io/tags/docker/"/>
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>docker：常用删除命令</title>
    <link href="https://snjl.github.io/2019/01/07/docker%EF%BC%9A%E5%B8%B8%E7%94%A8%E5%88%A0%E9%99%A4%E5%91%BD%E4%BB%A4/"/>
    <id>https://snjl.github.io/2019/01/07/docker：常用删除命令/</id>
    <published>2019-01-07T15:36:36.000Z</published>
    <updated>2019-01-07T15:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="删除一个或多个container"><a href="#删除一个或多个container" class="headerlink" title="删除一个或多个container"></a>删除一个或多个container</h1><h2 id="删除一个container"><a href="#删除一个container" class="headerlink" title="删除一个container"></a>删除一个container</h2><p>查看container ID：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p><p>删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm container_name/ID</span><br></pre></td></tr></table></figure></p><p>使用name或者id删除。</p><h2 id="删除多个container"><a href="#删除多个container" class="headerlink" title="删除多个container"></a>删除多个container</h2><p>同时运行了hello-world两次，若要一次性删除hello-world的container，使用命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps –a –f ancestor=hello-world</span><br><span class="line">或</span><br><span class="line">docker ps –s –filter=”ancestor=hello-world”</span><br></pre></td></tr></table></figure></p><p>删除这两个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $( docker ps -a -f  ancestor=hello-world )</span><br></pre></td></tr></table></figure></p><p>所以，删除所有的container,命令格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm  $( docker ps -a -q )</span><br></pre></td></tr></table></figure></p><h1 id="删除一个或多个image"><a href="#删除一个或多个image" class="headerlink" title="删除一个或多个image"></a>删除一个或多个image</h1><p>删除image前需要stop 所有的container<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker  ps  -a -q)</span><br></pre></td></tr></table></figure></p><p>查看所有的image<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></p><p>删除一个 hello-world image ,命令格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi image_name/ID</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi c54a2cc56</span><br></pre></td></tr></table></figure></p><p>若要删除所有的image, 使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure></p><p>有时image删不掉，可以强制删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi imagename </span><br><span class="line">或</span><br><span class="line">docker rmi -f imagename</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;删除一个或多个container&quot;&gt;&lt;a href=&quot;#删除一个或多个container&quot; class=&quot;headerlink&quot; title=&quot;删除一个或多个container&quot;&gt;&lt;/a&gt;删除一个或多个container&lt;/h1&gt;&lt;h2 id=&quot;删除一个conta
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://snjl.github.io/tags/docker/"/>
    
      <category term="删除" scheme="https://snjl.github.io/tags/%E5%88%A0%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：显卡驱动安装</title>
    <link href="https://snjl.github.io/2019/01/07/Ubuntu%EF%BC%9A%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%AE%89%E8%A3%85/"/>
    <id>https://snjl.github.io/2019/01/07/Ubuntu：显卡驱动安装/</id>
    <published>2019-01-07T15:36:04.000Z</published>
    <updated>2019-01-07T15:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu18.04安装显卡驱动命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure></p><p>16.04及以下（ppa源安装驱动）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install nvidia-410 #此处要根据上面查询到的版本适当更改</span><br><span class="line">sudo apt-get install mesa-common-dev  </span><br><span class="line">sudo apt-get install freeglut3-dev</span><br></pre></td></tr></table></figure></p><p>如果报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: add-apt-repository: command not found</span><br></pre></td></tr></table></figure></p><p>实际上add-apt-repository是由python-software-properties这个工具包提供的，所以安装一下python-software-properties：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-software-properties</span><br></pre></td></tr></table></figure></p><p>有可能解决完这一步就OK了，但是也不一定，这个不一定让我也遇上了，执行sudo add-apt-repository ppa:jonathonf/vim，发现还是提示sudo: add-apt-repository: command not found，那么再安装一下software-properties-common：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure></p><p>这下应该就可以了，执行sudo add-apt-repository ppa:jonathonf/vim就没问题了。</p><p>重启之后在终端内输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi  #若出现电脑GPU列表，即安装成功</span><br></pre></td></tr></table></figure><p>如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Mon Jan  7 18:14:59 2019</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 410.78       Driver Version: 410.78       CUDA Version: 10.0     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce GTX 105...  Off  | 00000000:01:00.0 Off |                  N/A |</span><br><span class="line">| 24%   23C    P8    N/A /  75W |     43MiB /  4040MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0      1332      G   /usr/lib/xorg/Xorg                            41MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure></p><p>显卡卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge nvidia*</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu18.04安装显卡驱动命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="gpu" scheme="https://snjl.github.io/tags/gpu/"/>
    
      <category term="显卡驱动" scheme="https://snjl.github.io/tags/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>服务器查看GPU等信息</title>
    <link href="https://snjl.github.io/2019/01/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9F%A5%E7%9C%8BGPU%E7%AD%89%E4%BF%A1%E6%81%AF/"/>
    <id>https://snjl.github.io/2019/01/07/服务器查看GPU等信息/</id>
    <published>2019-01-07T15:35:18.000Z</published>
    <updated>2019-01-07T15:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>lspci，顾名思义，就是显示所有的pci设备信息。pci是一种总线，而通过pci总线连接的设备就是pci设备了。如今，我们常用的设备很多都是采用pci总线了，如：网卡、存储。</p><p>如果没有lspci命令，安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install pciutils</span><br></pre></td></tr></table></figure></p><p>查看gpu：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci  | grep -i vga</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这样就可以显示机器上的显卡信息，比如 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# lspci | grep -i vga</span><br><span class="line">01:00.0 VGA compatible controller: nVidia Corporation Device 1081 (rev a1)</span><br><span class="line">02:00.0 VGA compatible controller: nVidia Corporation GT215 [GeForce GT 240] (rev a2)</span><br><span class="line">08:05.0 VGA compatible controller: ASPEED Technology, Inc. ASPEED Graphics Family (rev 10)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">如果想看详细的信息，比如 GeForce GT 240，即 02:00.0</span><br><span class="line"></span><br><span class="line">[root@localhost conf]# lspci -v -s 02:00.0</span><br><span class="line">02:00.0 VGA compatible controller: nVidia Corporation GT215 [GeForce GT 240] (rev a2) (prog-if 00 [VGA controller])</span><br><span class="line">Subsystem: ASUSTeK Computer Inc. Device 8351</span><br><span class="line">Flags: bus master, fast devsel, latency 0, IRQ 169</span><br><span class="line">Memory at f9000000 (32-bit, non-prefetchable) [size=16M]</span><br><span class="line">Memory at d0000000 (64-bit, prefetchable) [size=256M]</span><br><span class="line">Memory at ce000000 (64-bit, prefetchable) [size=32M]</span><br><span class="line">I/O ports at bc00 [size=128]</span><br><span class="line">[virtual] Expansion ROM at f8f80000 [disabled] [size=512K]</span><br><span class="line">Capabilities: [60] Power Management version 3</span><br><span class="line">Capabilities: [68] MSI: Enable- Count=1/1 Maskable- 64bit+</span><br><span class="line">Capabilities: [78] Express Endpoint, MSI 00</span><br><span class="line">Capabilities: [b4] Vendor Specific Information: Len=14 &lt;?&gt;</span><br><span class="line">Capabilities: [100] Virtual Channel</span><br><span class="line">Capabilities: [128] Power Budgeting &lt;?&gt;</span><br><span class="line">Capabilities: [600] Vendor Specific Information: ID=0001 Rev=1 Len=024 &lt;?&gt;</span><br><span class="line">Kernel driver in use: nvidia</span><br><span class="line">Kernel modules: nvidiafb, nvidia</span><br></pre></td></tr></table></figure><p>可以看到GT240的显存是 256M</p><p>如果没有安装显卡驱动，显示可能如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@0765afb5370d:/# lspci  | grep -i vga</span><br><span class="line">00:02.0 VGA compatible controller: Intel Corporation Device 3e92</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation Device 1c82 (rev a1)</span><br><span class="line">root@0765afb5370d:/# lspci  | grep -i 01:00.0</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation Device 1c82 (rev a1)</span><br><span class="line">root@0765afb5370d:/# lspci -v -s 01:00.0</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation Device 1c82 (rev a1) (prog-if 00 [VGA controller])</span><br><span class="line">        Subsystem: ASUSTeK Computer Inc. Device 8609</span><br><span class="line">        Flags: bus master, fast devsel, latency 0, IRQ 125</span><br><span class="line">        Memory at f6000000 (32-bit, non-prefetchable) [size=16M]</span><br><span class="line">        Memory at e0000000 (64-bit, prefetchable) [size=256M]</span><br><span class="line">        Memory at f0000000 (64-bit, prefetchable) [size=32M]</span><br><span class="line">        I/O ports at e000 [size=128]</span><br><span class="line">        Expansion ROM at f7000000 [disabled] [size=512K]</span><br><span class="line">        Capabilities: &lt;access denied&gt;</span><br><span class="line">        Kernel driver in use: nouveau</span><br><span class="line">lspci: Unable to load libkmod resources: error -12</span><br></pre></td></tr></table></figure></p><p>查看nvidia的gpu信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure></p><p>配合watch命令, 让一秒刷新一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 nvidia-smi</span><br></pre></td></tr></table></figure><p>查看内存及cpu使用情况的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></p><p>htop工具，更直观<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install htop</span><br></pre></td></tr></table></figure></p><p>安装完后，直接输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure></p><p>就可以看到内存或cpu的使用情况了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;lspci，顾名思义，就是显示所有的pci设备信息。pci是一种总线，而通过pci总线连接的设备就是pci设备了。如今，我们常用的设备很多都是采用pci总线了，如：网卡、存储。&lt;/p&gt;
&lt;p&gt;如果没有lspci命令，安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install pciutils&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看gpu：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lspci  | grep -i vga&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="gpu" scheme="https://snjl.github.io/tags/gpu/"/>
    
      <category term="服务器信息" scheme="https://snjl.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu和centos安装python3.6</title>
    <link href="https://snjl.github.io/2019/01/07/ubuntu%E5%92%8Ccentos%E5%AE%89%E8%A3%85python3-6/"/>
    <id>https://snjl.github.io/2019/01/07/ubuntu和centos安装python3-6/</id>
    <published>2019-01-07T15:34:25.000Z</published>
    <updated>2019-01-07T15:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h1><p>配置好epel源和ius源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Centos 6</span><br><span class="line">yum install https://centos6.iuscommunity.org/ius-release.rpm -y</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line"></span><br><span class="line"># Centos 7</span><br><span class="line">yum install https://centos7.iuscommunity.org/ius-release.rpm -y</span><br></pre></td></tr></table></figure><p>安装Python3.6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install python36u -y</span><br><span class="line"></span><br><span class="line"># 创建软链接</span><br><span class="line">ln -s /usr/bin/python3.6 /bin/python3</span><br></pre></td></tr></table></figure></p><p>安装pip3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install python36u-pip -y</span><br><span class="line"></span><br><span class="line"># 创建软链接</span><br><span class="line">ln -s /usr/bin/pip3.6 /bin/pip3</span><br><span class="line"></span><br><span class="line"># 升级pip</span><br><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure></p><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><p>配置软件仓库，因为python 3.6 新版没有发布到ubuntu的正式仓库中，咱们通过第3方仓库来做。在命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jonathonf/python-3.6</span><br></pre></td></tr></table></figure><p>检查系统软件包并安装 python 3.6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.6</span><br></pre></td></tr></table></figure></p><p>创建软链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/bin/pip3.6 /bin/pip3</span><br></pre></td></tr></table></figure></p><p>安装pip3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure></p><p>使用apt-get install pip装的是pip2。</p><p>升级pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;centos&quot;&gt;&lt;a href=&quot;#centos&quot; class=&quot;headerlink&quot; title=&quot;centos&quot;&gt;&lt;/a&gt;centos&lt;/h1&gt;&lt;p&gt;配置好epel源和ius源&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="centos" scheme="https://snjl.github.io/tags/centos/"/>
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>docker：安装Ubuntu16.04原始镜像并调用gpu</title>
    <link href="https://snjl.github.io/2019/01/07/docker%EF%BC%9A%E5%AE%89%E8%A3%85Ubuntu16-04%E5%8E%9F%E5%A7%8B%E9%95%9C%E5%83%8F%E5%B9%B6%E8%B0%83%E7%94%A8gpu/"/>
    <id>https://snjl.github.io/2019/01/07/docker：安装Ubuntu16-04原始镜像并调用gpu/</id>
    <published>2019-01-07T15:33:49.000Z</published>
    <updated>2019-01-07T15:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装Ubuntu16.04原始镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure></p><p>Linux下无法使用add-apt-repository命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-software-properties</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install software-properties-common </span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><p>镜像生成容器命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true ubuntu:16.04</span><br></pre></td></tr></table></figure></p><p>privileged 参数功能，设置为true的时候，让docker的root拥有真正root的权限，可以调用宿主机硬件等，甚至可以让你在docker中使用docker，使用这个就可以使用显卡驱动等。</p><p>进入docker的container命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it 799 /bin/bash</span><br></pre></td></tr></table></figure></p><p>其中799为containerID的前几个字符。</p><p>在宿主机上安装了nvidia驱动后，在docker上也安装，就可以在docker中使用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure></p><p>查看gpu情况了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装Ubuntu16.04原始镜像：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cl
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://snjl.github.io/tags/docker/"/>
    
      <category term="nvidia-docker" scheme="https://snjl.github.io/tags/nvidia-docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：账户相关</title>
    <link href="https://snjl.github.io/2019/01/07/Ubuntu%EF%BC%9A%E8%B4%A6%E6%88%B7%E7%9B%B8%E5%85%B3/"/>
    <id>https://snjl.github.io/2019/01/07/Ubuntu：账户相关/</id>
    <published>2019-01-07T15:32:25.000Z</published>
    <updated>2019-01-07T15:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>开启root账户，实际上就是给root用户设置一个密码的过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></p><p>执行上面的命令后，输入当前用户的密码就可以设置root密码。</p><p>创建用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser xxx</span><br></pre></td></tr></table></figure></p><p>这样的命令会在home目录下添加一个帐号</p><h1 id="给指定用户增加sudo权限"><a href="#给指定用户增加sudo权限" class="headerlink" title="给指定用户增加sudo权限"></a>给指定用户增加sudo权限</h1><p>切换到root用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure></p><p>找到sudo文件/etc/sudoers，该文件默认是不可写的，添加可写权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+w /etc/sudoers</span><br></pre></td></tr></table></figure></p><p>修改sudoers文件，找到以下语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root    ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></p><p>在下面添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yourUserName   ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></p><p>保存退出。修改此文件风险比较大， 文件如果改坏， 导致所有用户的 sudo 权限都没了，所以修改时请注意</p><p>鉴于安全考虑修改完后应把sudoers写权限去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure></p><p>如果发生问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo:sudo /etc/sudoers is world writable</span><br><span class="line">sudo:no valid sudoers sources found ,quitting</span><br><span class="line">sudo:unable to initialize policy plugin</span><br></pre></td></tr></table></figure></p><p>sudoers的权限被改了，改回来就好了。<br>使用root用户输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkexec chmod 0440 /etc/sudoers</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开启root账户，实际上就是给root用户设置一个密码的过程：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pr
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="账户" scheme="https://snjl.github.io/tags/%E8%B4%A6%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>linux重命名文件和文件夹</title>
    <link href="https://snjl.github.io/2019/01/07/linux%E9%87%8D%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://snjl.github.io/2019/01/07/linux重命名文件和文件夹/</id>
    <published>2019-01-07T15:31:57.000Z</published>
    <updated>2019-01-07T15:32:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>例如，before.txt是修改之前文件名，after.txt是准备修改的文件名</p><p>用mv指令就可以修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv before.txt after.txt</span><br></pre></td></tr></table></figure></p><p>注意：如果当前目录下也有个after.txt的文件的话，我们的这个文件是会将它覆盖的</p><p>重命名文件夹同理。</p><p>mv命令也可以移动文件和文件夹</p><p>例如：将/a目录移动到/b下，并重命名为c<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /a /b/c</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;例如，before.txt是修改之前文件名，after.txt是准备修改的文件名&lt;/p&gt;
&lt;p&gt;用mv指令就可以修改&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="linux" scheme="https://snjl.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://snjl.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>docker：nvidia-docker安装</title>
    <link href="https://snjl.github.io/2019/01/07/docker%EF%BC%9Anvidia-docker%E5%AE%89%E8%A3%85/"/>
    <id>https://snjl.github.io/2019/01/07/docker：nvidia-docker安装/</id>
    <published>2019-01-07T15:31:04.000Z</published>
    <updated>2019-01-07T15:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>先安装docker-ce：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"># step 2: 安装GPG证书</span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"># Step 3: 写入软件源信息</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"># Step 4: 更新并安装 Docker-CE</span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure></p><p>nvidia-docker安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># If you have nvidia-docker 1.0 installed: we need to remove it and all existing GPU containers</span><br><span class="line">docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f</span><br><span class="line">sudo apt-get purge -y nvidia-docker</span><br><span class="line"></span><br><span class="line"># Add the package repositories</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \</span><br><span class="line">  sudo apt-key add -</span><br><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># Install nvidia-docker2 and reload the Docker daemon configuration</span><br><span class="line">sudo apt-get install -y nvidia-docker2</span><br><span class="line">sudo pkill -SIGHUP dockerd</span><br><span class="line"></span><br><span class="line"># Test nvidia-smi with the latest official CUDA image</span><br><span class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先安装docker-ce：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="docker" scheme="https://snjl.github.io/tags/docker/"/>
    
      <category term="nvidia-docker" scheme="https://snjl.github.io/tags/nvidia-docker/"/>
    
  </entry>
  
  <entry>
    <title>centos：centos U盘安装卡在 starting dracut initqueue hook</title>
    <link href="https://snjl.github.io/2018/12/31/centos%EF%BC%9Acentos-U%E7%9B%98%E5%AE%89%E8%A3%85%E5%8D%A1%E5%9C%A8-starting-dracut-initqueue-hook/"/>
    <id>https://snjl.github.io/2018/12/31/centos：centos-U盘安装卡在-starting-dracut-initqueue-hook/</id>
    <published>2018-12-31T15:57:09.000Z</published>
    <updated>2019-01-23T08:16:11.768Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tangshiweibbs/article/details/80233828" target="_blank" rel="noopener">https://blog.csdn.net/tangshiweibbs/article/details/80233828</a></p><p>出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ok] Reached target Basic System</span><br><span class="line">或者</span><br><span class="line">[ok] starting dracut initqueue hook</span><br></pre></td></tr></table></figure></p><p>在启动后引导界面按 e 进行编辑,修改掉默认的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setparams &apos;Install CentOS Linux 7&apos;</span><br><span class="line">linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 xdriver=vesa nomodeset quiet</span><br><span class="line">initrdefi /images/pxeboot/initrd.img</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setparams &apos;Install CentOS linux 7&apos;</span><br><span class="line">linuxefi /images/pxeboot/vmlinuz linux dd nomodeset quiet</span><br><span class="line">initrdefi /images/pxeboot/initrd.img</span><br></pre></td></tr></table></figure></p><p>按Ctrl + X 执行上面的修改</p><p>然后启动后屏幕会列出当前机器的硬盘设备也包括你的U盘，一般一个硬盘的话，U盘都是sdb* 这样的【记住你的U盘设备路径】</p><p>我们看到了U盘的名称，前面的设备名称为/dev/sdb4 ，重启，U盘启动，修改引导，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【第二次修改后，注意U盘的设备路径】</span><br><span class="line">setparams &apos;Install CentOS Linux 7&apos;</span><br><span class="line">linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:/dev/sdb4 nomodeset quiet</span><br><span class="line">initrdefi /images/pxeboot/initrd.img</span><br></pre></td></tr></table></figure><p>再次Ctrl + X 执行就可以了(好像上面不需要使用nomodeset quiet)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/tangshiweibbs/article/details/80233828&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/tangshiweibbs
      
    
    </summary>
    
      <category term="centos" scheme="https://snjl.github.io/categories/centos/"/>
    
    
      <category term="centos" scheme="https://snjl.github.io/tags/centos/"/>
    
      <category term="U盘安装" scheme="https://snjl.github.io/tags/U%E7%9B%98%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos：安装java</title>
    <link href="https://snjl.github.io/2018/12/31/centos%EF%BC%9A%E5%AE%89%E8%A3%85java/"/>
    <id>https://snjl.github.io/2018/12/31/centos：安装java/</id>
    <published>2018-12-31T15:52:45.000Z</published>
    <updated>2018-12-31T15:53:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-devel</span><br></pre></td></tr></table></figure></p><p>如果使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-xxx-xxx</span><br></pre></td></tr></table></figure></p><p>会出现javac无效的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="centos" scheme="https://snjl.github.io/categories/centos/"/>
    
    
      <category term="centos" scheme="https://snjl.github.io/tags/centos/"/>
    
      <category term="java" scheme="https://snjl.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springboot：使用外部配置文件</title>
    <link href="https://snjl.github.io/2018/12/31/springboot%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://snjl.github.io/2018/12/31/springboot：使用外部配置文件/</id>
    <published>2018-12-31T15:52:09.000Z</published>
    <updated>2018-12-31T15:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot读取外部配置文件顺序"><a href="#springboot读取外部配置文件顺序" class="headerlink" title="springboot读取外部配置文件顺序"></a>springboot读取外部配置文件顺序</h1><ol><li>第一种是在jar包的同一目录下建一个config文件夹，然后把配置文件放到这个文件夹下。</li><li>第二种是直接把配置文件放到jar包的同级目录。</li><li>第三种在classpath下建一个config文件夹，然后把配置文件放进去。</li><li>第四种是在classpath下直接放配置文件。</li></ol><p>优先级排序分别为1,2,3,4，在此之外，打包时候的配置文件（即src/main/resources 文件夹下创建的application.properties）的优先级最低，均会以上覆盖。</p><p><strong>一般考虑使用在xxx.jar的可执行文件的同级目录增加一个config文件夹，在里面放入application.properties配置文件，优先级最高。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot读取外部配置文件顺序&quot;&gt;&lt;a href=&quot;#springboot读取外部配置文件顺序&quot; class=&quot;headerlink&quot; title=&quot;springboot读取外部配置文件顺序&quot;&gt;&lt;/a&gt;springboot读取外部配置文件顺序&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="配置文件" scheme="https://snjl.github.io/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>mysql：获取表名、列名和全局搜索sql拼接</title>
    <link href="https://snjl.github.io/2018/12/31/mysql%EF%BC%9A%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%90%8D%E3%80%81%E5%88%97%E5%90%8D%E5%92%8C%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2sql%E6%8B%BC%E6%8E%A5/"/>
    <id>https://snjl.github.io/2018/12/31/mysql：获取表名、列名和全局搜索sql拼接/</id>
    <published>2018-12-31T15:51:30.000Z</published>
    <updated>2018-12-31T15:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查找表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'TSCHEMANAME'</span> <span class="keyword">and</span> table_type=<span class="string">'base table'</span></span><br></pre></td></tr></table></figure></li></ol><p>其中SCHEMANAME为要查的数据库。</p><p>python获取表名：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tables</span><span class="params">(cursor)</span>:</span></span><br><span class="line">    cursor.execute(</span><br><span class="line">        <span class="string">"SELECT table_name FROM information_schema.tables WHERE table_schema='SCHOOL' AND table_type='base table'"</span>)</span><br><span class="line">    tables = cursor.fetchall()</span><br><span class="line">    tables = [table[<span class="number">0</span>] <span class="keyword">for</span> table <span class="keyword">in</span> tables]</span><br><span class="line">    <span class="keyword">return</span> tables</span><br></pre></td></tr></table></figure></p><ol start="2"><li>查找列名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> information_schema.Columns <span class="keyword">WHERE</span> table_name=%s <span class="keyword">AND</span> table_schema=%s<span class="string">"</span></span><br></pre></td></tr></table></figure></li></ol><p>其中第一个变量为表名，第二个变量为数据库名。</p><p>python获取列名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_table_columns(cursor, table_name, schema_name):</span><br><span class="line">    cursor.execute(&quot;SELECT column_name FROM information_schema.Columns WHERE table_name=%s AND table_schema=%s&quot;,</span><br><span class="line">                   (table_name, schema_name))</span><br><span class="line">    columns = cursor.fetchall()</span><br><span class="line">    columns = [column[0] for column in columns]</span><br><span class="line">    return columns</span><br></pre></td></tr></table></figure></p><ol start="3"><li>拼接全局查找sql<br>全局查找的sql样式：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">TABLE</span> <span class="keyword">where</span> <span class="string">`id`</span> <span class="keyword">like</span> <span class="string">"%COLUMN%"</span> <span class="keyword">or</span> <span class="string">`name`</span> <span class="keyword">like</span> <span class="string">"%COLUMN%"</span> ...</span><br></pre></td></tr></table></figure></li></ol><p>python拼接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_global_select_sql</span><span class="params">(table_name, word)</span>:</span></span><br><span class="line">    sql = <span class="string">"select * from "</span> + table_name + <span class="string">" where "</span></span><br><span class="line">    columns = get_table_columns(cursor, table_name, schema_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        sql += <span class="string">"`"</span> + column + <span class="string">"`"</span> + <span class="string">" like '%"</span> + word + <span class="string">"%' or "</span></span><br><span class="line"></span><br><span class="line">    sql = sql[:<span class="number">-4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sql</span><br></pre></td></tr></table></figure></p><p>拼接好的sql如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">TABLE</span> <span class="keyword">where</span> <span class="string">`id`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`title`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`author`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`ISBN`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`publisher`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`publisherDateStr`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`publisherDate`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`description`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`price`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`eBookPrice`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`currency`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`rating`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`thumb`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`thumb1`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`fromlink`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`indexTimes`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`verify`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`isPub`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`memo`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`status`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`createUser`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`createDate`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`updateUser`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`updateDate`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;查找表名&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="mysql" scheme="https://snjl.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：在anaconda中使用jupter</title>
    <link href="https://snjl.github.io/2018/12/31/Ubuntu%EF%BC%9A%E5%9C%A8anaconda%E4%B8%AD%E4%BD%BF%E7%94%A8jupter/"/>
    <id>https://snjl.github.io/2018/12/31/Ubuntu：在anaconda中使用jupter/</id>
    <published>2018-12-31T15:49:59.000Z</published>
    <updated>2018-12-31T15:51:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用anaconda的环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate NAME</span><br></pre></td></tr></table></figure></p><p>开启环境后，使用python安装jupyter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure></p><h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>会生成~/.jupyter/jupyter_notebook_config.py文件。</p><h1 id="自动生成密码"><a href="#自动生成密码" class="headerlink" title="自动生成密码"></a>自动生成密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure><p>会生成密码，生成的密码存储在 jupyter_notebook_config.json。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook password</span><br><span class="line">Enter password:  ****</span><br><span class="line">Verify password: ****</span><br><span class="line">[NotebookPasswordApp] Wrote hashed password to /Users/you/.jupyter/jupyter_notebook_config.json</span><br></pre></td></tr></table></figure></p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p>在最上面增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip=&apos;0.0.0.0&apos;</span><br><span class="line">c.NotebookApp.port =8888</span><br></pre></td></tr></table></figure></p><p>分别指定的是可以访问的ip（网上大部分是设置为*，但是在我这会报错，设置成0.0.0.0可以成功），部署端口。</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p><p>即可开启。如果要后台运行，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure></p><p>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用anaconda的环境：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
      
    
    </summary>
    
      <category term="ubuntu" scheme="https://snjl.github.io/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="anaconda" scheme="https://snjl.github.io/tags/anaconda/"/>
    
      <category term="jupter" scheme="https://snjl.github.io/tags/jupter/"/>
    
  </entry>
  
  <entry>
    <title>centos：常用yum命令</title>
    <link href="https://snjl.github.io/2018/12/31/centos%EF%BC%9A%E5%B8%B8%E7%94%A8yum%E5%91%BD%E4%BB%A4/"/>
    <id>https://snjl.github.io/2018/12/31/centos：常用yum命令/</id>
    <published>2018-12-31T15:48:31.000Z</published>
    <updated>2018-12-31T15:48:48.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum update  升级系统</span><br><span class="line"></span><br><span class="line">yum install  ～ 安装指定软件包</span><br><span class="line"></span><br><span class="line">yum update ～ 升级指定软件包</span><br><span class="line"></span><br><span class="line">yum remove ～ 卸载指定软件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.使用YUM查找软件包</span><br><span class="line">命令：yum search ~</span><br><span class="line">2.列出所有可安装的软件包</span><br><span class="line">命令：yum list</span><br><span class="line">3.列出所有可更新的软件包</span><br><span class="line">命令：yum list updates</span><br><span class="line">4.列出所有已安装的软件包</span><br><span class="line">命令：yum list installed</span><br><span class="line">5.列出所有已安装但不在Yum Repository 內的软件包</span><br><span class="line">命令：yum list extras</span><br><span class="line">6.列出所指定软件包</span><br><span class="line">命令：yum list ～</span><br><span class="line">7.使用YUM获取软件包信息</span><br><span class="line">命令：yum info ～</span><br><span class="line">8.列出所有软件包的信息</span><br><span class="line">命令：yum info</span><br><span class="line">9.列出所有可更新的软件包信息</span><br><span class="line">命令：yum info updates</span><br><span class="line">10.列出所有已安裝的软件包信息</span><br><span class="line">命令：yum info installed</span><br><span class="line">11.列出所有已安裝但不在Yum Repository 內的软件包信息</span><br><span class="line">命令：yum info extras</span><br><span class="line">12.列出软件包提供哪些文件</span><br><span class="line">命令：yum provides~</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="centos" scheme="https://snjl.github.io/categories/centos/"/>
    
    
      <category term="centos" scheme="https://snjl.github.io/tags/centos/"/>
    
      <category term="install" scheme="https://snjl.github.io/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>npm：npm install全局安装和当前目录安装</title>
    <link href="https://snjl.github.io/2018/12/31/npm%EF%BC%9Anpm-install%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E5%92%8C%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%AE%89%E8%A3%85/"/>
    <id>https://snjl.github.io/2018/12/31/npm：npm-install全局安装和当前目录安装/</id>
    <published>2018-12-31T15:47:43.000Z</published>
    <updated>2018-12-31T15:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-npm-install-xxx-g"><a href="#1-npm-install-xxx-g" class="headerlink" title="1. npm install xxx -g"></a>1. npm install xxx -g</h1><p>使用该命令时， 模块将被下载安装到【全局目录】中。</p><p>【全局目录】通过 npm config set prefix “目录路径” 来设置。</p><p>比如说，当我们使用了npm install -g express安装了express框架后， 我们就可以在电脑里的某一个文件夹下，打开控制台，直接使用express mvc创建项目，否则会遇到 “’express’ 不是内部或外部命令，也不是可运行的程序”错误。</p><h1 id="2-npm-install-xxx"><a href="#2-npm-install-xxx" class="headerlink" title="2. npm install xxx"></a>2. npm install xxx</h1><p>使用该命令，则是将模块下载到当前命令行所在目录。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\123&gt;npm install xxx</span><br></pre></td></tr></table></figure></p><p>将会安装到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\123\node_modules\xxx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-npm-install-xxx-g&quot;&gt;&lt;a href=&quot;#1-npm-install-xxx-g&quot; class=&quot;headerlink&quot; title=&quot;1. npm install xxx -g&quot;&gt;&lt;/a&gt;1. npm install xxx -g&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="npm" scheme="https://snjl.github.io/categories/npm/"/>
    
    
      <category term="npm" scheme="https://snjl.github.io/tags/npm/"/>
    
      <category term="install" scheme="https://snjl.github.io/tags/install/"/>
    
  </entry>
  
</feed>
