<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snjl</title>
  
  <subtitle>我大概率会编程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://snjl.github.io/"/>
  <updated>2019-02-13T06:35:13.363Z</updated>
  <id>https://snjl.github.io/</id>
  
  <author>
    <name>snjl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flask：WTF扩展</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9AWTF%E6%89%A9%E5%B1%95/"/>
    <id>https://snjl.github.io/2019/02/13/flask：WTF扩展/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:35:13.363Z</updated>
    
    <content type="html"><![CDATA[<p>Web应用程序的一个重要方面是为用户提供一个用户界面。 HTML提供了一个<form>标签，用于设计一个接口。 可以适当使用表单的元素，如文本输入，广播，选择等。</form></p><p>通过GET或POST方法将用户输入的数据以Http请求消息的形式提交给服务器端脚本。</p><ul><li>服务器端脚本必须从http请求数据重新创建表单元素。 所以实际上，表单元素必须被定义两次 - 一次是HTML，一次是服务器端脚本。</li><li>使用HTML表单的另一个缺点是很难(如果不是不可能)动态地呈现表单元素。 HTML本身无法验证用户的输入。</li></ul><p>这就是WTForms，一个灵活的表单，渲染和验证库来得方便的地方。 Flask-WTF扩展为这个WTForms库提供了一个简单的接口。</p><p>使用Flask-WTF，可以在Python脚本中定义表单域并使用HTML模板来呈现它们。 也可以将验证应用于WTF字段。<br><a id="more"></a></p><p>首先，需要安装Flask-WTF扩展。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-WTF</span><br></pre></td></tr></table></figure></p><p>已安装的软件包包含一个Form类，该类必须用作用户定义表单的父级。WTforms包包含各种表单域的定义。下面列出了一些标准表单字段。</p><table><thead><tr><th>编号</th><th>标准表单字段</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>TextField</td><td>表示<input type="text"> HTML表单元素</td></tr><tr><td>2</td><td>BooleanField</td><td>表示<input type="checkbox"> HTML表单元素</td></tr><tr><td>3</td><td>DecimalField</td><td>用小数显示数字的文本字段</td></tr><tr><td>4</td><td>IntegerField</td><td>用于显示整数的文本字段</td></tr><tr><td>5</td><td>RadioField</td><td>表示<input type="radio">的HTML表单元素</td></tr><tr><td>6</td><td>SelectField</td><td>表示选择表单元素</td></tr><tr><td>7</td><td>TextAreaField</td><td>表示<testarea> html表单元素</testarea></td></tr><tr><td>8</td><td>PasswordField</td><td>表示<input type="password"> HTML表单元素</td></tr><tr><td>9</td><td>SubmitField</td><td>表示<input type="submit">表单元素</td></tr></tbody></table><p>例如，可以设计一个包含文本字段的表单，如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from flask_wtf import Form</span><br><span class="line">from wtforms import TextField</span><br><span class="line"></span><br><span class="line">class ContactForm(Form):</span><br><span class="line">    name = TextField(&quot;Name Of Student&quot;)</span><br></pre></td></tr></table></figure></p><p>除了name字段之外，还会自动创建一个CSRF令牌的隐藏字段。 这是为了防止跨站请求伪造攻击。</p><p>渲染时，这将产生一个等效的HTML脚本，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id = &quot;csrf_token&quot; name = &quot;csrf_token&quot; type = &quot;hidden&quot; /&gt;</span><br><span class="line">&lt;label for = &quot;name&quot;&gt;Name Of Student&lt;/label&gt;&lt;br&gt;</span><br><span class="line">&lt;input id = &quot;name&quot; name = &quot;name&quot; type = &quot;text&quot; value = &quot;&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>用户定义的表单类在Flask应用程序中使用，表单使用模板呈现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line">from forms import ContactForm</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;development key&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/contact&apos;)</span><br><span class="line">def contact():</span><br><span class="line">    form = ContactForm()</span><br><span class="line">    return render_template(&apos;contact.html&apos;, form = form)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><p>WTForms包也包含验证器类，在验证表单域时非常有用。 以下列表显示了常用的验证器。</p><table><thead><tr><th>编号</th><th>验证器类</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>DataRequired</td><td>检查输入栏是否为空</td></tr><tr><td>2</td><td>Email</td><td>检查字段中的文本是否遵循电子邮件ID约定</td></tr><tr><td>3</td><td>IPAddress</td><td>验证输入字段中的IP地址</td></tr><tr><td>4</td><td>Length</td><td>验证输入字段中字符串的长度是否在给定范围内</td></tr><tr><td>5</td><td>NumberRange</td><td>在给定范围内的输入字段中验证一个数字</td></tr><tr><td>6</td><td>URL</td><td>验证输入字段中输入的URL</td></tr></tbody></table><p>将联系表单的name字段应用’DataRequired’验证规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = TextField(&quot;Name Of Student&quot;,[validators.Required(&quot;Please enter your name.&quot;)])</span><br></pre></td></tr></table></figure></p><p>表单对象的validate()函数验证表单数据，并在验证失败时抛出验证错误。 错误消息被发送到模板。 在HTML模板中，错误消息是动态呈现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for message in form.name.errors %&#125;</span><br><span class="line">   &#123;&#123; message &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>以下示例演示了上面给出的概念。联系人表单代码如下(forms.py)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from flask_wtf import FlaskForm</span><br><span class="line">from wtforms import TextField, IntegerField, TextAreaField, SubmitField, RadioField, SelectField</span><br><span class="line"></span><br><span class="line">from wtforms import validators, ValidationError</span><br><span class="line"></span><br><span class="line">class ContactForm(Form):</span><br><span class="line">    name = TextField(&quot;学生姓名&quot;,[validators.Required(&quot;Please enter your name.&quot;)])</span><br><span class="line">    Gender = RadioField(&apos;性别&apos;, choices = [(&apos;M&apos;,&apos;Male&apos;),(&apos;F&apos;,&apos;Female&apos;)])</span><br><span class="line">    Address = TextAreaField(&quot;地址&quot;)</span><br><span class="line"></span><br><span class="line">    email = TextField(&quot;Email&quot;,[validators.Required(&quot;Please enter your email address.&quot;),</span><br><span class="line">      validators.Email(&quot;Please enter your email address.&quot;)])</span><br><span class="line"></span><br><span class="line">    Age = IntegerField(&quot;年龄&quot;)</span><br><span class="line">    language = SelectField(&apos;语言&apos;, choices = [(&apos;cpp&apos;, &apos;C++&apos;), (&apos;py&apos;, &apos;Python&apos;)])</span><br><span class="line">    submit = SubmitField(&quot;提交&quot;)</span><br></pre></td></tr></table></figure></p><p>验证器应用于名称和电子邮件字段。下面给出的是Flask应用程序脚本(formexample.py)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template, request, flash</span><br><span class="line">from forms import ContactForm</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;development key&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/contact&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def contact():</span><br><span class="line">    form = ContactForm()</span><br><span class="line"></span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">       if form.validate() == False:</span><br><span class="line">          flash(&apos;All fields are required.&apos;)</span><br><span class="line">          return render_template(&apos;contact.html&apos;, form = form)</span><br><span class="line">       else:</span><br><span class="line">          return render_template(&apos;success.html&apos;)</span><br><span class="line">    elif request.method == &apos;GET&apos;:</span><br><span class="line">          return render_template(&apos;contact.html&apos;, form = form)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><p>模板的脚本(contact.html)如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Flask示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line">     &lt;h2 style = &quot;text-align: center;&quot;&gt;联系人表单&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">      &#123;% for message in form.name.errors %&#125;</span><br><span class="line">         &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;% for message in form.email.errors %&#125;</span><br><span class="line">         &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">      &lt;form action = &quot;http://localhost:5000/contact&quot; method = post&gt;</span><br><span class="line">         &lt;fieldset&gt;</span><br><span class="line">            &lt;legend&gt;填写项&lt;/legend&gt;</span><br><span class="line">            &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line"></span><br><span class="line">            &lt;div style = font-size:20px; font-weight:bold; margin-left:150px;&gt;</span><br><span class="line">               &#123;&#123; form.name.label &#125;&#125;&lt;br&gt;</span><br><span class="line">               &#123;&#123; form.name &#125;&#125;</span><br><span class="line">               &lt;br&gt;</span><br><span class="line"></span><br><span class="line">               &#123;&#123; form.Gender.label &#125;&#125; &#123;&#123; form.Gender &#125;&#125;</span><br><span class="line">               &#123;&#123; form.Address.label &#125;&#125;&lt;br&gt;</span><br><span class="line">               &#123;&#123; form.Address &#125;&#125;</span><br><span class="line">               &lt;br&gt;</span><br><span class="line"></span><br><span class="line">               &#123;&#123; form.email.label &#125;&#125;&lt;br&gt;</span><br><span class="line">               &#123;&#123; form.email &#125;&#125;</span><br><span class="line">               &lt;br&gt;</span><br><span class="line"></span><br><span class="line">               &#123;&#123; form.Age.label &#125;&#125;&lt;br&gt;</span><br><span class="line">               &#123;&#123; form.Age &#125;&#125;</span><br><span class="line">               &lt;br&gt;</span><br><span class="line"></span><br><span class="line">               &#123;&#123; form.language.label &#125;&#125;&lt;br&gt;</span><br><span class="line">               &#123;&#123; form.language &#125;&#125;</span><br><span class="line">               &lt;br&gt;</span><br><span class="line">               &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">         &lt;/fieldset&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>在Python shell中运行formexample.py，并访问URL =&gt; <a href="http://localhost:5000/contact" target="_blank" rel="noopener">http://localhost:5000/contact</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web应用程序的一个重要方面是为用户提供一个用户界面。 HTML提供了一个&lt;form&gt;标签，用于设计一个接口。 可以适当使用表单的元素，如文本输入，广播，选择等。&lt;/form&gt;&lt;/p&gt;
&lt;p&gt;通过GET或POST方法将用户输入的数据以Http请求消息的形式提交给服务器端脚本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端脚本必须从http请求数据重新创建表单元素。 所以实际上，表单元素必须被定义两次 - 一次是HTML，一次是服务器端脚本。&lt;/li&gt;
&lt;li&gt;使用HTML表单的另一个缺点是很难(如果不是不可能)动态地呈现表单元素。 HTML本身无法验证用户的输入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是WTForms，一个灵活的表单，渲染和验证库来得方便的地方。 Flask-WTF扩展为这个WTForms库提供了一个简单的接口。&lt;/p&gt;
&lt;p&gt;使用Flask-WTF，可以在Python脚本中定义表单域并使用HTML模板来呈现它们。 也可以将验证应用于WTF字段。&lt;br&gt;
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="WTF" scheme="https://snjl.github.io/tags/WTF/"/>
    
  </entry>
  
  <entry>
    <title>flask：文件上传</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://snjl.github.io/2019/02/13/flask：文件上传/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:35:57.061Z</updated>
    
    <content type="html"><![CDATA[<p>在Flask中处理文件上传非常简单。 它需要一个enctype属性设置为’multipart/form-data’的HTML表单，将该文提交到指定URL。 URL处理程序从request.files[]对象中提取文件并将其保存到所需的位置。</p><p>每个上传的文件首先保存在服务器上的临时位置，然后再保存到最终位置。 目标文件的名称可以是硬编码的，也可以从request.files [file]对象的filename属性中获取。 但是，建议使用secure_filename()函数获取它的安全版本。</p><p>可以在Flask对象的配置设置中定义默认上传文件夹的路径和上传文件的最大大小。</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>app.config[‘UPLOAD_FOLDER’]</td><td>定义上传文件夹的路径</td></tr><tr><td>app.config[‘MAX_CONTENT_PATH’]</td><td>指定要上传的文件的最大大小 - 以字节为单位</td></tr></tbody></table><p>以下代码具有URL: /upload 规则，该规则显示templates文件夹中的upload.html文件，以及调用uploader()函数处理上传过程的URL =&gt; /upload-file规则。</p><p>upload.html有一个文件选择器按钮和一个提交按钮。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Flask示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line">     &lt;form action = &quot;http://localhost:5000/upload&quot; method = &quot;POST&quot; </span><br><span class="line">         enctype = &quot;multipart/form-data&quot;&gt;</span><br><span class="line">         &lt;input type = &quot;file&quot; name = &quot;file&quot; /&gt;</span><br><span class="line">         &lt;input type = &quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>选择文件后点击提交。 表单的post方法调用URL=&gt; /upload_file。 底层函数uploader()执行保存文件操作。</p><p>以下是Flask应用程序的Python代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template, request</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/upload&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def upload_file():</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        f = request.files[&apos;file&apos;]</span><br><span class="line">        print(request.files)</span><br><span class="line">        f.save(secure_filename(f.filename))</span><br><span class="line">        return &apos;file uploaded successfully&apos;</span><br><span class="line">    else:</span><br><span class="line">        return render_template(&apos;upload.html&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Flask中处理文件上传非常简单。 它需要一个enctype属性设置为’multipart/form-data’的HTML表单，将该文提交到指定URL。 URL处理程序从request.files[]对象中提取文件并将其保存到所需的位置。&lt;/p&gt;
&lt;p&gt;每个上传的文件首先
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="文件" scheme="https://snjl.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>nginx简单域名配置</title>
    <link href="https://snjl.github.io/2019/02/13/nginx%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/"/>
    <id>https://snjl.github.io/2019/02/13/nginx简单配置域名/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:37:35.639Z</updated>
    
    <content type="html"><![CDATA[<p>安装好nginx后，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p><p>修改配置文件。</p><p>在http{···}内增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line">   listen       80;</span><br><span class="line">   server_name baidu.com test.baidu.com;</span><br><span class="line"></span><br><span class="line">   rewrite ^/$ /index permanent;</span><br><span class="line">   location /&#123;</span><br><span class="line">      index form;</span><br><span class="line">      proxy_pass http://127.0.0.1:19192;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_read_timeout 300s;</span><br><span class="line">   &#125;</span><br><span class="line">  location /static &#123;</span><br><span class="line">      root /home/agent/agent/work/html;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的listen表示对外的端口，监听的是80端口，server_name是配置的域名，可以配置一级二级三级域名，其中，二三级域名需要到云平台去配置后再在这里配置才可以。</p><p>rewrite里的index是表示直接访问配置的域名的时候，后缀加入，例如这里配置为index，则访问baidu.com，会直接跳转到baidu.com/index，如果配置为form，会直接跳转为baidu.com/form。</p><h1 id="nginx检测"><a href="#nginx检测" class="headerlink" title="nginx检测"></a>nginx检测</h1><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></p><p>检测nginx配置是否有错。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure></p><p>比restart平滑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装好nginx后，使用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
      
    
    </summary>
    
      <category term="nginx" scheme="https://snjl.github.io/categories/nginx/"/>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/nginx/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="https://snjl.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="https://snjl.github.io/tags/nginx/"/>
    
      <category term="域名配置" scheme="https://snjl.github.io/tags/%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>flask：session会话</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9Asessions%E4%BC%9A%E8%AF%9D/"/>
    <id>https://snjl.github.io/2019/02/13/flask：sessions会话/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:34:31.956Z</updated>
    
    <content type="html"><![CDATA[<p>与Cookie不同，会话数据存储在服务器上。 会话是客户端登录到服务器并注销的时间间隔。</p><p>需要在此会话中进行的数据存储在服务器上的临时目录中。与每个客户端的会话分配一个会话ID。 会话数据存储在cookie顶部，服务器以加密方式签名。 对于这种加密，Flask应用程序需要一个定义SECRET_KEY。</p><p>会话对象也是一个包含会话变量和关联值的键值对的字典对象。例如，要设置’username’会话变量，请使用语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session[&apos;username&apos;]=&apos;admin&apos;</span><br></pre></td></tr></table></figure></p><p>要删除会话变量，请使用pop()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.pop(&apos;username&apos;, None)</span><br></pre></td></tr></table></figure></p><p>以下代码是Flask中会话如何工作的简单演示。 URL =&gt; ‘/‘ 提示用户登录，因为会话变量username没有设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">   if &apos;username&apos; in session:</span><br><span class="line">      username = session[&apos;username&apos;]</span><br><span class="line">         return &apos;Logged in as &apos; + username + &apos;&lt;br&gt;&apos; + \</span><br><span class="line">         &quot;&lt;b&gt;&lt;a href = &apos;/logout&apos;&gt;click here to log out&lt;/a&gt;&lt;/b&gt;&quot;</span><br><span class="line">   return &quot;You are not logged in &lt;br&gt;&lt;a href = &apos;/login&apos;&gt;&lt;/b&gt;&quot; + \</span><br><span class="line">      &quot;click here to log in&lt;/b&gt;&lt;/a&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>当用户浏览到URL=&gt;’/login’时，login()函数显示视图，因为它是通过GET方法调用的，所以打开一个登录表单。</p><p>表单填写后重新提交到URL=&gt; /login，现在会话变量被设置。 应用程序被重定向到URL=&gt; /。 这时找到会话变量:username。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/login&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def login():</span><br><span class="line">   if request.method == &apos;POST&apos;:</span><br><span class="line">      session[&apos;username&apos;] = request.form[&apos;username&apos;]</span><br><span class="line">      return redirect(url_for(&apos;index&apos;))</span><br><span class="line">   return &apos;&apos;&apos;</span><br><span class="line">   &lt;form action = &quot;&quot; method = &quot;post&quot;&gt;</span><br><span class="line">      &lt;p&gt;&lt;input type = text name = &quot;username&quot;/&gt;&lt;/p&gt;</span><br><span class="line">      &lt;p&lt;&lt;input type = submit value = Login/&gt;&lt;/p&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">   &apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>该应用程序还包含一个logout()视图函数，它删除’username’会话变量的值。 再次 URL 跳转到 ‘/‘ 显示开始页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/logout&apos;)</span><br><span class="line">def logout():</span><br><span class="line">   # remove the username from the session if it is there</span><br><span class="line">   session.pop(&apos;username&apos;, None)</span><br><span class="line">   return redirect(url_for(&apos;index&apos;))</span><br></pre></td></tr></table></figure></p><p>运行应用程序并访问主页(确保设置应用程序的secret_key)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, session, redirect, url_for, escape, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;any random string’</span><br></pre></td></tr></table></figure></p><p>完整代码如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask import render_template</span><br><span class="line">from flask import request</span><br><span class="line">from flask import make_response</span><br><span class="line">from flask import Flask, session, redirect, url_for, escape, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;fkdjsafjdkfdlkjfadskjfadskljdsfklj&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    if &apos;username&apos; in session:</span><br><span class="line">        username = session[&apos;username&apos;]</span><br><span class="line">        return &apos;登录用户名是:&apos; + username + &apos;&lt;br&gt;&apos; + \</span><br><span class="line">                 &quot;&lt;b&gt;&lt;a href = &apos;/logout&apos;&gt;点击这里注销&lt;/a&gt;&lt;/b&gt;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &quot;您暂未登录， &lt;br&gt;&lt;a href = &apos;/login&apos;&gt;&lt;/b&gt;&quot; + \</span><br><span class="line">         &quot;点击这里登录&lt;/b&gt;&lt;/a&gt;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        session[&apos;username&apos;] = request.form[&apos;username&apos;]</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">    return &apos;&apos;&apos;</span><br><span class="line">   &lt;form action = &quot;&quot; method = &quot;post&quot;&gt;</span><br><span class="line">      &lt;p&gt;&lt;input type =&quot;text&quot; name =&quot;username&quot;/&gt;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&lt;input type =&quot;submit&quot; value =&quot;登录&quot;/&gt;&lt;/p&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line">   &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/logout&apos;)</span><br><span class="line">def logout():</span><br><span class="line">   # remove the username from the session if it is there</span><br><span class="line">   session.pop(&apos;username&apos;, None)</span><br><span class="line">   return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;与Cookie不同，会话数据存储在服务器上。 会话是客户端登录到服务器并注销的时间间隔。&lt;/p&gt;
&lt;p&gt;需要在此会话中进行的数据存储在服务器上的临时目录中。与每个客户端的会话分配一个会话ID。 会话数据存储在cookie顶部，服务器以加密方式签名。 对于这种加密，Flask
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="session" scheme="https://snjl.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置vim高亮</title>
    <link href="https://snjl.github.io/2019/02/13/nginx%E9%85%8D%E7%BD%AEvim%E9%AB%98%E4%BA%AE/"/>
    <id>https://snjl.github.io/2019/02/13/nginx配置vim高亮/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:37:56.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载vim语法高亮配置文件到-usr-share-vim-vim74-syntax"><a href="#下载vim语法高亮配置文件到-usr-share-vim-vim74-syntax" class="headerlink" title="下载vim语法高亮配置文件到/usr/share/vim/vim74/syntax/"></a>下载vim语法高亮配置文件到/usr/share/vim/vim74/syntax/</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.vim.org/scripts/download_script.php?src_id=19394 -O nginx.vim</span><br></pre></td></tr></table></figure><p>或者在别的文件夹下载好后，移到syntax文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv nginx.vim /usr/share/vim/vim74/syntax/</span><br></pre></td></tr></table></figure></p><h1 id="修改配置文件-usr-share-vim-vim74-filetype-vim"><a href="#修改配置文件-usr-share-vim-vim74-filetype-vim" class="headerlink" title="修改配置文件/usr/share/vim/vim74/filetype.vim"></a>修改配置文件/usr/share/vim/vim74/filetype.vim</h1><p>在最后增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">au BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/* if &amp;ft == &apos;&apos; | setfiletype nginx | endif</span><br></pre></td></tr></table></figure></p><p>之后使用vim /etc/nginx/nginx.conf，就有高亮表示。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;下载vim语法高亮配置文件到-usr-share-vim-vim74-syntax&quot;&gt;&lt;a href=&quot;#下载vim语法高亮配置文件到-usr-share-vim-vim74-syntax&quot; class=&quot;headerlink&quot; title=&quot;下载vim语法高亮配
      
    
    </summary>
    
      <category term="nginx" scheme="https://snjl.github.io/categories/nginx/"/>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/nginx/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="nginx" scheme="https://snjl.github.io/tags/nginx/"/>
    
      <category term="vim" scheme="https://snjl.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy：更新数据</title>
    <link href="https://snjl.github.io/2019/02/13/SQLAlchemy%EF%BC%9A%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/"/>
    <id>https://snjl.github.io/2019/02/13/SQLAlchemy：更新数据/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:38:58.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><h2 id="更新单条记录"><a href="#更新单条记录" class="headerlink" title="更新单条记录"></a>更新单条记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query = session.query(User) </span><br><span class="line">user = query.get(&apos;lujianxing11&apos;)</span><br><span class="line">print user.accout</span><br><span class="line">user.accout=&apos;987&apos;</span><br><span class="line">session.flush()</span><br></pre></td></tr></table></figure><h2 id="更新多条记录"><a href="#更新多条记录" class="headerlink" title="更新多条记录"></a>更新多条记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query = session.query(User)</span><br><span class="line">query.filter(User.user_name==&apos;lujianxing2&apos;).update(&#123;User.age: &apos;15&apos;&#125;)</span><br><span class="line">query.filter(User.user_name==&apos;lujianxing2&apos;).update(&#123;&apos;age&apos;: &apos;16&apos;&#125;)</span><br><span class="line">query.filter(User.pwd==&apos;aaa&apos;).update(&#123;&apos;age&apos;: &apos;17&apos;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;更新记录&quot;&gt;&lt;a href=&quot;#更新记录&quot; class=&quot;headerlink&quot; title=&quot;更新记录&quot;&gt;&lt;/a&gt;更新记录&lt;/h1&gt;&lt;h2 id=&quot;更新单条记录&quot;&gt;&lt;a href=&quot;#更新单条记录&quot; class=&quot;headerlink&quot; title=&quot;更新单条记
      
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/categories/python/SQLAlchemy/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>flask：url构建</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9Aurl%E6%9E%84%E5%BB%BA/"/>
    <id>https://snjl.github.io/2019/02/13/flask：url构建/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:34:46.966Z</updated>
    
    <content type="html"><![CDATA[<p>url_for()函数对于动态构建特定函数的URL非常有用。 该函数接受函数的名称作为第一个参数，并接受一个或多个关键字参数，每个参数对应于URL的变量部分。以下脚本演示了使用url_for()函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, redirect, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/admin&apos;)</span><br><span class="line">def hello_admin():</span><br><span class="line">    return &apos;Hello Admin&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/guest/&lt;guest&gt;&apos;)</span><br><span class="line">def hello_guest(guest):</span><br><span class="line">    return &apos;Hello %s as Guest&apos; % guest</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/user/&lt;name&gt;&apos;)</span><br><span class="line">def user(name):</span><br><span class="line">    if name ==&apos;admin&apos;:</span><br><span class="line">        return redirect(url_for(&apos;hello_admin&apos;))</span><br><span class="line">    else:</span><br><span class="line">        return redirect(url_for(&apos;hello_guest&apos;,guest = name))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><p>Python上面的脚本有一个函数用户(名称)，它接受来自URL的参数值。User()函数检查收到的参数是否与’admin’匹配。 如果匹配，则使用url_for()将应用程序重定向到hello_admin()函数，否则将该接收的参数作为guest参数传递给hello_guest()函数。保存上面的代码到一个文件:hello.py，并从Python shell运行。打开浏览器并输入URL - <a href="http://localhost:5000/user/admin浏览器中的应用程序响应输出结果是" target="_blank" rel="noopener">http://localhost:5000/user/admin浏览器中的应用程序响应输出结果是</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Admin</span><br></pre></td></tr></table></figure></p><p>Shell在浏览器中输入以下URL - <a href="http://localhost:5000/user/mvl应用程序响应结果现在变为" target="_blank" rel="noopener">http://localhost:5000/user/mvl应用程序响应结果现在变为</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello mvl as Guest</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;url_for()函数对于动态构建特定函数的URL非常有用。 该函数接受函数的名称作为第一个参数，并接受一个或多个关键字参数，每个参数对应于URL的变量部分。以下脚本演示了使用url_for()函数。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy：Query</title>
    <link href="https://snjl.github.io/2019/02/13/SQLAlchemy%EF%BC%9AQuery/"/>
    <id>https://snjl.github.io/2019/02/13/SQLAlchemy：Query/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:38:38.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h1><p>Session的query函数会返回一个Query对象。query函数可以接受多种参数类型。可以是类，或者是类的instrumented descriptor。下面的这个例子取出了所有的User记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; for instance in session.query(User).order_by(User.id):</span><br><span class="line">...     print(instance.name, instance.fullname)</span><br><span class="line">ed Ed Jones</span><br><span class="line">wendy Wendy Williams</span><br><span class="line">mary Mary Contrary</span><br><span class="line">fred Fred Flinstone</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Query也接受ORM-instrumented descriptors作为参数。当多个参数传入时，返回结果为以同样顺序排列的tuples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; for name, fullname in session.query(User.name, User.fullname):</span><br><span class="line">...     print(name, fullname)</span><br><span class="line">ed Ed Jones</span><br><span class="line">wendy Wendy Williams</span><br><span class="line">mary Mary Contrary</span><br><span class="line">fred Fred Flinstone</span><br></pre></td></tr></table></figure></p><p>Query返回的tuples由KeyedTuple这个类提供，其成员除了用下标访问意外，还可以视为实例变量来获取。对应的变量的名称与被查询的类变量名称一样，如下例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; for row in session.query(User, User.name).all():</span><br><span class="line">...    print(row.User, row.name)</span><br><span class="line">&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;f8s7ccs&apos;)&gt; ed</span><br><span class="line">&lt;User(name=&apos;wendy&apos;, fullname=&apos;Wendy Williams&apos;, password=&apos;foobar&apos;)&gt; wendy</span><br><span class="line">&lt;User(name=&apos;mary&apos;, fullname=&apos;Mary Contrary&apos;, password=&apos;xxg527&apos;)&gt; mary</span><br><span class="line">&lt;User(name=&apos;fred&apos;, fullname=&apos;Fred Flinstone&apos;, password=&apos;blah&apos;)&gt; fred</span><br></pre></td></tr></table></figure></p><p>你可以通过label()来制定descriptor对应实例变量的名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; for row in session.query(User.name.label(&apos;name_label&apos;)).all():</span><br><span class="line">...    print(row.name_label)</span><br><span class="line">ed</span><br><span class="line">wendy</span><br><span class="line">mary</span><br><span class="line">fred</span><br></pre></td></tr></table></figure></p><p>而对于类参数而言，要实现同样的定制需要使用aliased<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; from sqlalchemy.orm import aliased</span><br><span class="line">&gt;&gt;&gt; user_alias = aliased(User, name=&apos;user_alias&apos;)</span><br><span class="line"></span><br><span class="line">SQL&gt;&gt;&gt; for row in session.query(user_alias, user_alias.name).all():</span><br><span class="line">...    print(row.user_alias)</span><br><span class="line">&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;f8s7ccs&apos;)&gt;</span><br><span class="line">&lt;User(name=&apos;wendy&apos;, fullname=&apos;Wendy Williams&apos;, password=&apos;foobar&apos;)&gt;</span><br><span class="line">&lt;User(name=&apos;mary&apos;, fullname=&apos;Mary Contrary&apos;, password=&apos;xxg527&apos;)&gt;</span><br><span class="line">&lt;User(name=&apos;fred&apos;, fullname=&apos;Fred Flinstone&apos;, password=&apos;blah&apos;)&gt;</span><br></pre></td></tr></table></figure></p><p>基本的查询操作除了上面这些之外，还包括OFFSET和LIMIT，这个可以通过Python的array slice来完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; for u in session.query(User).order_by(User.id)[1:3]:</span><br><span class="line">...    print(u)</span><br><span class="line">&lt;User(name=&apos;wendy&apos;, fullname=&apos;Wendy Williams&apos;, password=&apos;foobar&apos;)&gt;</span><br><span class="line">&lt;User(name=&apos;mary&apos;, fullname=&apos;Mary Contrary&apos;, password=&apos;xxg527&apos;)&gt;</span><br></pre></td></tr></table></figure></p><p>上述过程实际上只涉及了整体取出的操作，而没有进行筛选，筛选常用的函数是filter_by和filter。其中后者比起前者要更灵活一些，你可以在后者的参数中使用python的运算符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; for name, in session.query(User.name).\</span><br><span class="line">...             filter_by(fullname=&apos;Ed Jones&apos;):</span><br><span class="line">...    print(name)</span><br><span class="line">ed</span><br><span class="line">&gt;&gt;&gt; for name, in session.query(User.name).\</span><br><span class="line">...             filter(User.fullname==&apos;Ed Jones&apos;):</span><br><span class="line">...    print(name)</span><br><span class="line">ed</span><br></pre></td></tr></table></figure></p><p>注意Query对象是generative的，这意味你可以把他们串接起来调用，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; for user in session.query(User).\</span><br><span class="line">...          filter(User.name==&apos;ed&apos;).\</span><br><span class="line">...          filter(User.fullname==&apos;Ed Jones&apos;):</span><br><span class="line">...    print(user)</span><br><span class="line">&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;f8s7ccs&apos;)&gt;</span><br></pre></td></tr></table></figure></p><p>串接的filter之间是与的关系。</p><h1 id="常用的filter操作符"><a href="#常用的filter操作符" class="headerlink" title="常用的filter操作符"></a>常用的filter操作符</h1><p>下面的这些操作符可以应用在filter函数中</p><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query.filter(User.name == &apos;ed&apos;)</span><br><span class="line">not equals:</span><br><span class="line">query.filter(User.name != &apos;ed&apos;)</span><br></pre></td></tr></table></figure><h2 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.filter(User.name.like(&apos;%ed%&apos;))</span><br></pre></td></tr></table></figure><h2 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query.filter(User.name.in_([&apos;ed&apos;, &apos;wendy&apos;, &apos;jack&apos;]))</span><br><span class="line"></span><br><span class="line"># works with query objects too:</span><br><span class="line">query.filter(User.name.in_(</span><br><span class="line">        session.query(User.name).filter(User.name.like(&apos;%ed%&apos;))</span><br><span class="line">))</span><br></pre></td></tr></table></figure><h2 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a>NOT IN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query.filter(~User.name.in_([&apos;ed&apos;, &apos;wendy&apos;, &apos;jack&apos;]))</span><br><span class="line">query.filter(User.id.notin_([&apos;ed&apos;, &apos;wendy&apos;, &apos;jack&apos;]))</span><br></pre></td></tr></table></figure><h2 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query.filter(User.name == None)</span><br><span class="line"></span><br><span class="line"># alternatively, if pep8/linters are a concern</span><br><span class="line">query.filter(User.name.is_(None))</span><br></pre></td></tr></table></figure><h2 id="IS-NOT-NULL"><a href="#IS-NOT-NULL" class="headerlink" title="IS NOT NULL"></a>IS NOT NULL</h2><p>query.filter(User.name != None)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># alternatively, if pep8/linters are a concern</span><br><span class="line">query.filter(User.name.isnot(None))</span><br></pre></td></tr></table></figure></p><h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># use and_()</span><br><span class="line">from sqlalchemy import and_</span><br><span class="line">query.filter(and_(User.name == &apos;ed&apos;, User.fullname == &apos;Ed Jones&apos;))</span><br><span class="line"></span><br><span class="line"># or send multiple expressions to .filter()</span><br><span class="line">query.filter(User.name == &apos;ed&apos;, User.fullname == &apos;Ed Jones&apos;)</span><br><span class="line"></span><br><span class="line"># or chain multiple filter()/filter_by() calls</span><br><span class="line">query.filter(User.name == &apos;ed&apos;).filter(User.fullname == &apos;Ed Jones&apos;)</span><br></pre></td></tr></table></figure><h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import or_</span><br><span class="line">query.filter(or_(User.name == &apos;ed&apos;, User.name == &apos;wendy&apos;))</span><br></pre></td></tr></table></figure><h2 id="MATCH"><a href="#MATCH" class="headerlink" title="MATCH"></a>MATCH</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.filter(User.name.match(&apos;wendy&apos;))</span><br></pre></td></tr></table></figure><h1 id="返回列表-List-和单项-Scalar"><a href="#返回列表-List-和单项-Scalar" class="headerlink" title="返回列表(List)和单项(Scalar)"></a>返回列表(List)和单项(Scalar)</h1><p>很多Query的方法执行了SQL命令并返回了取出的数据库结果。</p><p>all()返回一个列表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; query = session.query(User).filter(User.name.like(&apos;%ed&apos;)).order_by(User.id)</span><br><span class="line">SQL&gt;&gt;&gt; query.all()</span><br><span class="line">[&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;f8s7ccs&apos;)&gt;,</span><br><span class="line">      &lt;User(name=&apos;fred&apos;, fullname=&apos;Fred Flinstone&apos;, password=&apos;blah&apos;)&gt;]</span><br><span class="line">first()返回至多一个结果，而且以单项形式，而不是只有一个元素的tuple形式返回这个结果.</span><br><span class="line">&gt;&gt;&gt; query.first()</span><br><span class="line">&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;f8s7ccs&apos;)&gt;</span><br><span class="line">one()返回且仅返回一个查询结果。当结果的数量不足一个或者多于一个时会报错。</span><br><span class="line">&gt;&gt;&gt; user = query.one()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">MultipleResultsFound: Multiple rows were found for one()</span><br></pre></td></tr></table></figure></p><p>没有查找到结果时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; user = query.filter(User.id == 99).one()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">NoResultFound: No row was found for one()</span><br><span class="line">one_or_none()：从名称可以看出，当结果数量为0时返回None， 多于1个时报错</span><br></pre></td></tr></table></figure><p>scalar()和one()类似，但是返回单项而不是tuple</p><h1 id="嵌入使用SQL"><a href="#嵌入使用SQL" class="headerlink" title="嵌入使用SQL"></a>嵌入使用SQL</h1><p>你可以在Query中通过text()使用SQL语句。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; from sqlalchemy import text</span><br><span class="line">&gt;&gt;&gt; for user in session.query(User).\</span><br><span class="line">...             filter(text(&quot;id&lt;224&quot;)).\</span><br><span class="line">...             order_by(text(&quot;id&quot;)).all():</span><br><span class="line">...     print(user.name)</span><br><span class="line">ed</span><br><span class="line">wendy</span><br><span class="line">mary</span><br><span class="line">fred</span><br></pre></td></tr></table></figure></p><p>除了上面这种直接将参数写进字符串的方式外，你还可以通过params()方法来传递参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; session.query(User).filter(text(&quot;id&lt;:value and name=:name&quot;)).\</span><br><span class="line">...     params(value=224, name=&apos;fred&apos;).order_by(User.id).one()</span><br><span class="line">&lt;User(name=&apos;fred&apos;, fullname=&apos;Fred Flinstone&apos;, password=&apos;blah&apos;)&gt;</span><br></pre></td></tr></table></figure></p><p>并且，你可以直接使用完整的SQL语句，但是要注意将表名和列明写正确。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; session.query(User).from_statement(</span><br><span class="line">...                     text(&quot;SELECT * FROM users where name=:name&quot;)).\</span><br><span class="line">...                     params(name=&apos;ed&apos;).all()</span><br><span class="line">[&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;f8s7ccs&apos;)&gt;]</span><br></pre></td></tr></table></figure></p><h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><p>Query定义了一个很方便的计数函数count()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; session.query(User).filter(User.name.like(&apos;%ed&apos;)).count()</span><br><span class="line">SELECT count(*) AS count_1</span><br><span class="line">FROM (SELECT users.id AS users_id,</span><br><span class="line">                users.name AS users_name,</span><br><span class="line">                users.fullname AS users_fullname,</span><br><span class="line">                users.password AS users_password</span><br><span class="line">FROM users</span><br><span class="line">WHERE users.name LIKE ?) AS anon_1</span><br><span class="line">(&apos;%ed&apos;,)</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>注意上面我们同时列出了实际的SQL指令。在SQLAlchemy中，我们总是将被计数的查询打包成一个子查询，然后对这个子查询进行计数。即便是最简单的SELECT count(*) FROM table，也会如此处理。为了更精细的控制计数过程，我们可以采用func.count()这个函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy import func</span><br><span class="line">SQL&gt;&gt;&gt; session.query(func.count(User.name), User.name).group_by(User.name).all()</span><br><span class="line">SELECT count(users.name) AS count_1, users.name AS users_name</span><br><span class="line">FROM users GROUP BY users.name</span><br><span class="line">()</span><br><span class="line">[(1, u&apos;ed&apos;), (1, u&apos;fred&apos;), (1, u&apos;mary&apos;), (1, u&apos;wendy&apos;)]</span><br></pre></td></tr></table></figure><p>为了实现最简单的SELECT count(*) FROM table，我们可以如下调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; session.query(func.count(&apos;*&apos;)).select_from(User).scalar()</span><br><span class="line">SELECT count(?) AS count_1</span><br><span class="line">FROM users</span><br><span class="line">(&apos;*&apos;,)</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><p>如果我们对User的主键进行计数，那么select_from也可以省略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; session.query(func.count(User.id)).scalar()</span><br><span class="line">SELECT count(users.id) AS count_1</span><br><span class="line">FROM users</span><br><span class="line">()</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Query&quot;&gt;&lt;a href=&quot;#Query&quot; class=&quot;headerlink&quot; title=&quot;Query&quot;&gt;&lt;/a&gt;Query&lt;/h1&gt;&lt;p&gt;Session的query函数会返回一个Query对象。query函数可以接受多种参数类型。可以是类，或者是类的instrumented descriptor。下面的这个例子取出了所有的User记录。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for instance in session.query(User).order_by(User.id):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...     print(instance.name, instance.fullname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ed Ed Jones&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wendy Wendy Williams&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mary Mary Contrary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fred Fred Flinstone&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/categories/python/SQLAlchemy/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy：创建连接和表</title>
    <link href="https://snjl.github.io/2019/02/13/SQLAlchemy%EF%BC%9A%E5%88%9B%E5%BB%BA%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%A1%A8/"/>
    <id>https://snjl.github.io/2019/02/13/SQLAlchemy：创建连接和表/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:38:50.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">engine = create_engine(&apos;mysql+mysqlconnector://root:123456@localhost:3306/test&apos;,echo=True)</span><br></pre></td></tr></table></figure><h1 id="orm实体"><a href="#orm实体" class="headerlink" title="orm实体"></a>orm实体</h1><p>当我们使用ORM的时候，其配置过程主要分为两个部分：一是描述我们要处理的数据库表的信息，二是将我们的Python类映射到这些表上。这两个过程在SQLAlchemy中是一起完成的，我们将这个过程称之为Declarative。</p><p>使用Declarative参与ORM映射的类需要被定义成为一个指定基类的子类，这个基类应当含有ORM映射中相关的类和表的信息。这样的基类我们称之为declarative base class。在我们的应用中，我们一般只需要一个这样的基类。这个基类我们可以通过declarative_base来创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Base = declarative_base()</span><br></pre></td></tr></table></figure></p><p>现在我们已经有了一个基类，我们可以基于这个基类来创建我们的自定义类了。我们以建立一个用户类为例子。从Base派生一个名为User的类，在这个类里面我们可以定义将要映射到数据库的表上的属性（主要是表的名字，列的类型和名称等）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy import Column, Integer, String</span><br><span class="line">&gt;&gt;&gt; class User(Base):</span><br><span class="line">...     __tablename__ = &apos;users&apos;</span><br><span class="line">...</span><br><span class="line">...     id = Column(Integer, primary_key=True)</span><br><span class="line">...     name = Column(String)</span><br><span class="line">...     fullname = Column(String)</span><br><span class="line">...     password = Column(String)</span><br><span class="line">...</span><br><span class="line">...     def __repr__(self):</span><br><span class="line">...        return &quot;&lt;User(name=&apos;%s&apos;, fullname=&apos;%s&apos;, password=&apos;%s&apos;)&gt;&quot; % (</span><br><span class="line">...                             self.name, self.fullname, self.password)</span><br></pre></td></tr></table></figure></p><p>通过Declarative生成的类至少应该包含一个名为tablename的属性来给出目标表的名称，以及至少一个Column来给出表的主键(Primary Key)。SQLAlchemy不会对于类名和表名之间的关联做任何假设，也不会自动涉及数据类型以及约束的转换。一般的你可以自己创建一个模板来建立这些自动转换，这样可以减少你的很多重复劳动。</p><p>当我们的类声明完成后，Declarative将会将所有的Column成员替换成为特殊的Python访问器(accessors)，我们称之为descriptors。这个过程我们称为instrumentation，经过instrumentation的映射类可以让我们能够读写数据库的表和列。</p><p>注意除了这些涉及ORM的映射意外，这些mapping类的其他部分仍然是不变的。</p><h1 id="建立表"><a href="#建立表" class="headerlink" title="建立表"></a>建立表</h1><p>我们通过Declarative系统构建好我们的User类之后，与之同时的关于表的信息也已经创建好了，我们称之为table metadata。描述这些信息的类为Table。我们可以通过<strong>table</strong>这个类变量来查看表信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; User.__table__ </span><br><span class="line">Table(&apos;users&apos;, MetaData(bind=None),</span><br><span class="line">            Column(&apos;id&apos;, Integer(), table=&lt;users&gt;, primary_key=True, nullable=False),</span><br><span class="line">            Column(&apos;name&apos;, String(), table=&lt;users&gt;),</span><br><span class="line">            Column(&apos;fullname&apos;, String(), table=&lt;users&gt;),</span><br><span class="line">            Column(&apos;password&apos;, String(), table=&lt;users&gt;), schema=None)</span><br></pre></td></tr></table></figure></p><p>其中，常用字段类型如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.Integer 整型</span><br><span class="line">db.String (size) 字符串，size 为最大长度，比如db.String(20)</span><br><span class="line">db.Text 长文本</span><br><span class="line">db.DateTime 时间日期，Pythondatetime对象</span><br><span class="line">db.Float 浮点数</span><br><span class="line">db.Boolean 布尔值</span><br></pre></td></tr></table></figure></p><p>当我们完成类声明时，Declarative用一个Python的metaclass来为这个类进行了加工。在这个阶段，它依据我们给出的设置创建了Table对象，然后构造一个Mapper对象来与之关联。这些幕后的对象我们大多都不需要直接与之打交道。</p><p>Table对象是一个更大家庭—-我们称之为MetaData—-的一部分。当我们使用Declarative时，这个对象也可以在Declarative base class的.metadata属性中看到。</p><p>MetaData是我们与数据库打交道的一个接口。对于我们的SQLite数据库而言，此时还没有一个名为users的表的存在，我们需要使用MetaData来发出CREATE TABLE的命令。下面我们使用MetaData.create_all()指令，将我们上面得到的Engine作为参数传入。如果你上面设置了echo为True的话，应该可以看到这一过程中的SQL指令。首先检查了users表的存在性，如果不存在的话会执行表的创建工作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Base.metadata.create_all(engine)</span><br><span class="line">SELECT ...</span><br><span class="line">PRAGMA table_info(&quot;users&quot;)</span><br><span class="line">()</span><br><span class="line">CREATE TABLE users (</span><br><span class="line">    id INTEGER NOT NULL, name VARCHAR,</span><br><span class="line">    fullname VARCHAR,</span><br><span class="line">    password VARCHAR,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">)</span><br><span class="line">()</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure></p><h1 id="建立session"><a href="#建立session" class="headerlink" title="建立session"></a>建立session</h1><p>Session是一个非常重要的概念，类似于iOS中的NSManagedContext的概念，我也在尝试进一步去理解它。</p><p>我们现在可以和数据库对话了。ORM对数据库的入口即是Session，当我们构建应用时，和create_engine的同一级别下，我们定义一个Session类来作为生成新的Session的Factory类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from sqlalchemy.orm import sessionmaker</span><br><span class="line">&gt;&gt;&gt; Session = sessionmaker(bind=engine)</span><br></pre></td></tr></table></figure></p><p>当你试图在定义Engine之前定义Sesssion的话，这里的bind可以不设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Session = sessionmaker()</span><br></pre></td></tr></table></figure></p><p>后续你定义好Engine后可以通过configure()来将其连接到Session<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Session.configure(bind=engine)  # once engine is available</span><br></pre></td></tr></table></figure></p><p>这个我们自定义的工厂类就可以拿来我们构造新的Session了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session = Session()</span><br></pre></td></tr></table></figure></p><p>上面的Session已经和我们的SQLite的数据库的Engine关联起来了，但是我们可以发现它还没有打开任何到数据库的连接(connection)。当一个Session被首次使用时，它会从Engine所维护的连接池中取出一个连接来操作数据库。这个连接在我们应用有所更改或者关闭Session时会被释放。</p><h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><p>为了将User对象存入数据库，我们调用Sesson的add()函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ed_user = User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;edspassword&apos;)</span><br><span class="line">&gt;&gt;&gt; session.add(ed_user)</span><br></pre></td></tr></table></figure></p><p>当这个操作完成之后，我们成这个User实例的状态为pending。目前实际上还没有执行SQL操作，也就是说数据库中还没有产生和这个User实例对应的行。Session将会在需要的时候执行相应的SQL命令，这个过程我们称之为flush。如果我们试图查询Ed Jones，所有处于pending状态的信息将会首先被flush，然后负责进行查询的SQL语言在此之后立即被执行。</p><p>例如，我们创建一个查询来获取刚刚我们创建的用户（涉及查询的部分我们后续会详细介绍）。这个查询会返回一个和我们之前添加的用户相同的用户实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; our_user = session.query(User).filter_by(name=&apos;ed&apos;).first() BEGIN (implicit)</span><br><span class="line">INSERT INTO users (name, fullname, password) VALUES (?, ?, ?)</span><br><span class="line">(&apos;ed&apos;, &apos;Ed Jones&apos;, &apos;edspassword&apos;)</span><br><span class="line">SELECT users.id AS users_id,</span><br><span class="line">        users.name AS users_name,</span><br><span class="line">        users.fullname AS users_fullname,</span><br><span class="line">        users.password AS users_password</span><br><span class="line">FROM users</span><br><span class="line">WHERE users.name = ?</span><br><span class="line"> LIMIT ? OFFSET ?</span><br><span class="line">(&apos;ed&apos;, 1, 0)</span><br><span class="line">&gt;&gt;&gt; our_user</span><br><span class="line">&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;edspassword&apos;)&gt;</span><br></pre></td></tr></table></figure></p><p>事实上这里的Session判断出来了需要返回的行和已经存在内存中的一个映射实例应当是同一个，所以我们会得到一个和之前完全相同的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ed_user is our_user</span><br><span class="line">True</span><br></pre></td></tr></table></figure></p><p>这里ORM所表现的理念，我们称之为identity map。这个设计理念保证了在一个Session对于一个制定行的操作，作用于同一个内存实例上。当一个拥有特定主键的对象出现在Session中时，所有的查询操作对这个主键都会返回一个相同的Python对象。并且，如果你试图引入重复了主键的新的对象时，系统会产生一个错误来阻止你的操作。</p><p>我们可以通过add_all()来一次加入多个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; session.add_all([</span><br><span class="line">...     User(name=&apos;wendy&apos;, fullname=&apos;Wendy Williams&apos;, password=&apos;foobar&apos;),</span><br><span class="line">...     User(name=&apos;mary&apos;, fullname=&apos;Mary Contrary&apos;, password=&apos;xxg527&apos;),</span><br><span class="line">...     User(name=&apos;fred&apos;, fullname=&apos;Fred Flinstone&apos;, password=&apos;blah&apos;)])</span><br></pre></td></tr></table></figure></p><p>并且，如果我们希望改变Ed的密码，可以直接修改之：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ed_user.password = &apos;f8s7ccs&apos;</span><br></pre></td></tr></table></figure></p><p>这个修改会被Session记录下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; session.dirty</span><br><span class="line">IdentitySet([&lt;User(name=&apos;ed&apos;, fullname=&apos;Ed Jones&apos;, password=&apos;f8s7ccs&apos;)&gt;])</span><br></pre></td></tr></table></figure></p><p>当然，上面的插入操作也被记录了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; session.new </span><br><span class="line">IdentitySet([&lt;User(name=&apos;wendy&apos;, fullname=&apos;Wendy Williams&apos;, password=&apos;foobar&apos;)&gt;,</span><br><span class="line">&lt;User(name=&apos;mary&apos;, fullname=&apos;Mary Contrary&apos;, password=&apos;xxg527&apos;)&gt;,</span><br><span class="line">&lt;User(name=&apos;fred&apos;, fullname=&apos;Fred Flinstone&apos;, password=&apos;blah&apos;)&gt;])</span><br></pre></td></tr></table></figure></p><p>我们可以使用commit()命令来将这些更改flush到数据库中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; session.commit()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;连接&quot;&gt;&lt;a href=&quot;#连接&quot; class=&quot;headerlink&quot; title=&quot;连接&quot;&gt;&lt;/a&gt;连接&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/categories/python/SQLAlchemy/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>flask：发送邮件</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9A%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>https://snjl.github.io/2019/02/13/flask：发送邮件/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:35:28.518Z</updated>
    
    <content type="html"><![CDATA[<p>基于Web的应用程序通常需要具有向用户/客户端发送邮件的功能。 Flask-Mail扩展使得用任何电子邮件服务器设置一个简单接口变得非常简单.</p><p>起初，Flask-Mail扩展可使用pip工具来安装，如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-Mail</span><br></pre></td></tr></table></figure></p><p>然后需要通过设置以下应用程序参数的值来配置Flask-Mail。</p><table><thead><tr><th>编号</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>MAIL_SERVER</td><td>邮件服务器的名称/IP地址</td></tr><tr><td>2</td><td>MAIL_PORT</td><td>所用服务器的端口号</td></tr><tr><td>3</td><td>MAIL_USE_TLS</td><td>启用/禁用传输安全层加密</td></tr><tr><td>4</td><td>MAIL_USE_SSL</td><td>启用/禁用安全套接字层加密</td></tr><tr><td>5</td><td>MAIL_DEBUG</td><td>调试支持，默认是Flask应用程序的调试状态</td></tr><tr><td>6</td><td>MAIL_USERNAME</td><td>发件人的用户名</td></tr><tr><td>7</td><td>MAIL_PASSWORD</td><td>发件人的密码</td></tr><tr><td>8</td><td>MAIL_DEFAULT_SENDER</td><td>设置默认发件人</td></tr><tr><td>9</td><td>MAIL_MAX_EMAILS</td><td>设置要发送的最大邮件</td></tr><tr><td>10</td><td>MAIL_SUPPRESS_SEND</td><td>如果app.testing设置为true，则发送被抑制</td></tr><tr><td>11</td><td>MAIL_ASCII_ATTACHMENTS</td><td>如果设置为true，则将附加的文件名转换为ASCII</td></tr></tbody></table><p>flask-mail模块包含以下重要类的定义。</p><h1 id="Mail类"><a href="#Mail类" class="headerlink" title="Mail类"></a>Mail类</h1><p>它管理电子邮件消息的要求。 类构造函数采用以下形式 </p><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>send()</td><td>发送Message类对象的内容</td></tr><tr><td>2</td><td>connect()</td><td>与邮件主机打开连接</td></tr><tr><td>3</td><td>send_message()</td><td>发送消息对象</td></tr></tbody></table><h1 id="Message类"><a href="#Message类" class="headerlink" title="Message类"></a>Message类</h1><p>它封装了一封电子邮件，Message类的构造函数有几个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask-mail.Message(subject, recipients, body, html, sender, cc, bcc, </span><br><span class="line">   reply-to, date, charset, extra_headers, mail_options, rcpt_options)</span><br></pre></td></tr></table></figure></p><h1 id="Message类方法"><a href="#Message类方法" class="headerlink" title="Message类方法"></a>Message类方法</h1><ul><li>attach() - 向消息添加附件。 该方法采用以下参数 </li><li>filename - 要附加的文件的名称</li><li>content_type - 文件的MIME类型</li><li>data - 原始文件数据</li><li>disposition - 内容处置，如果有的话。</li></ul><p>add_recipient() - 向消息添加另一个收件人</p><p>在以下示例中，Google的Gmail服务的SMTP服务器用作Flask-Mail配置的MAIL_SERVER。</p><h2 id="第1步"><a href="#第1步" class="headerlink" title="第1步"></a>第1步</h2><p>在代码中从flask-mail模块导入Mail和Message类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask_mail import Mail, Message</span><br></pre></td></tr></table></figure></p><h2 id="第2步"><a href="#第2步" class="headerlink" title="第2步"></a>第2步</h2><p>然后根据以下设置配置Flask-Mail。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.config[&apos;MAIL_SERVER&apos;]=&apos;smtp.gmail.com&apos;</span><br><span class="line">app.config[&apos;MAIL_PORT&apos;] = 465</span><br><span class="line">app.config[&apos;MAIL_USERNAME&apos;] = &apos;yourId@gmail.com&apos;</span><br><span class="line">app.config[&apos;MAIL_PASSWORD&apos;] = &apos;*****&apos;</span><br><span class="line">app.config[&apos;MAIL_USE_TLS&apos;] = False</span><br><span class="line">app.config[&apos;MAIL_USE_SSL&apos;] = True</span><br></pre></td></tr></table></figure></p><h2 id="第3步"><a href="#第3步" class="headerlink" title="第3步"></a>第3步</h2><p>创建一个Mail类的实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail = Mail(app)</span><br></pre></td></tr></table></figure></p><h2 id="第4步"><a href="#第4步" class="headerlink" title="第4步"></a>第4步</h2><p>在由URL规则映射的Python函数(‘/‘)中设置Message对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    msg = Message(&apos;Hello&apos;, sender = &apos;yourId@gmail.com&apos;, recipients = [&apos;id1@gmail.com&apos;])</span><br><span class="line">    msg.body = &quot;This is the email body&quot;</span><br><span class="line">    mail.send(msg)</span><br><span class="line">    return &quot;Sent&quot;</span><br></pre></td></tr></table></figure></p><h2 id="第5步"><a href="#第5步" class="headerlink" title="第5步"></a>第5步</h2><p>整个代码如下。 在Python Shell中运行以下脚本并访问URL: <a href="http://localhost:5000/。" target="_blank" rel="noopener">http://localhost:5000/。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_mail import Mail, Message</span><br><span class="line"></span><br><span class="line">app =Flask(__name__)</span><br><span class="line">mail=Mail(app)</span><br><span class="line"></span><br><span class="line">app.config[&apos;MAIL_SERVER&apos;]=&apos;smtp.gmail.com&apos;</span><br><span class="line">app.config[&apos;MAIL_PORT&apos;] = 465</span><br><span class="line">app.config[&apos;MAIL_USERNAME&apos;] = &apos;yourId@gmail.com&apos;</span><br><span class="line">app.config[&apos;MAIL_PASSWORD&apos;] = &apos;*****&apos;</span><br><span class="line">app.config[&apos;MAIL_USE_TLS&apos;] = False</span><br><span class="line">app.config[&apos;MAIL_USE_SSL&apos;] = True</span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    msg = Message(&apos;Hello&apos;, sender = &apos;yourId@gmail.com&apos;, recipients = [&apos;id1@gmail.com&apos;])</span><br><span class="line">    msg.body = &quot;Hello Flask message sent from Flask-Mail&quot;</span><br><span class="line">    mail.send(msg)</span><br><span class="line">    return &quot;Sent&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于Web的应用程序通常需要具有向用户/客户端发送邮件的功能。 Flask-Mail扩展使得用任何电子邮件服务器设置一个简单接口变得非常简单.&lt;/p&gt;
&lt;p&gt;起初，Flask-Mail扩展可使用pip工具来安装，如下所示&lt;br&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="邮件" scheme="https://snjl.github.io/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>flask：http方法</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9Ahttp%E6%96%B9%E6%B3%95/"/>
    <id>https://snjl.github.io/2019/02/13/flask：http方法/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:34:10.231Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，Flask路由响应GET请求。 但是，可以通过为route()装饰器提供方法参数来更改此首选项。为了演示在URL路由中使用POST方法，首先创建一个HTML表单并使用POST方法将表单数据发送到URL。将以下脚本保存到文件:login.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;Flask HTTP请求方法处理&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;form action = &quot;http://localhost:5000/login&quot; method = &quot;post&quot;&gt;</span><br><span class="line">         &lt;p&gt;输入姓名:&lt;/p&gt;</span><br><span class="line">         &lt;p&gt;&lt;input type = &quot;text&quot; name = &quot;name&quot; value=&quot;&quot;/&gt;&lt;/p&gt;</span><br><span class="line">         &lt;p&gt;&lt;input type = &quot;submit&quot; value = &quot;提交&quot; /&gt;&lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>HTML现在在Python shell中输入以下脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, redirect, url_for, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/success/&lt;name&gt;&apos;)</span><br><span class="line">def success(name):</span><br><span class="line">    return &apos;welcome %s&apos; % name</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;,methods = [&apos;POST&apos;, &apos;GET&apos;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        user = request.form[&apos;name&apos;]</span><br><span class="line">        return redirect(url_for(&apos;success&apos;,name = user))</span><br><span class="line">    else:</span><br><span class="line">        user = request.args.get(&apos;name&apos;)</span><br><span class="line">        return redirect(url_for(&apos;success&apos;,name = user))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><p>Python开发服务器开始运行后，在浏览器中打开login.html，在文本字段中输入名称(如:maxsu )并单击提交。</p><p>表单数据被提交到<form>标签的action属性指定的URL。<a href="http://localhost:5000/login被映射到login()函数。" target="_blank" rel="noopener">http://localhost:5000/login被映射到login()函数。</a> 由于服务器已通过POST方法接收数据，因此从表单数据获得’name’参数的值，通过以下方式-<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = request.form[&apos;name&apos;]</span><br></pre></td></tr></table></figure></form></p><p>Python它作为可变部分传递给URL:/success。 浏览器在窗口中显示欢迎消息。</p><p>将login.html中的方法参数更改为GET并在浏览器中再次打开。 在服务器上收到的数据是通过GET方法。 ‘name’参数的值现在通过以下方式获得 -<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User = request.args.get(&apos;name&apos;)</span><br></pre></td></tr></table></figure></p><p>Python这里，args是字典对象，它包含一系列表单参数及其对应值。 与之前一样，与’name’参数对应的值将传递到URL:/success。</p><h1 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h1><p>来自客户端网页的数据作为全局请求对象发送到服务器。要处理请求数据，请求对旬应该从Flask模块导入。请求对象的重要属性如下所列 </p><ul><li>form  包含表单参数及其值的键和值对的字典对象。</li><li>args  解析问号(?)后的URL部分查询字符串的内容。</li><li>cookies 保存Cookie名称和值的字典对象。</li><li>file 与上传文件有关的数据。</li><li>method 当前请求方法。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下，Flask路由响应GET请求。 但是，可以通过为route()装饰器提供方法参数来更改此首选项。为了演示在URL路由中使用POST方法，首先创建一个HTML表单并使用POST方法将表单数据发送到URL。将以下脚本保存到文件:login.html&lt;br&gt;&lt;figu
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>SQLAlchemy：简单使用SQLAlchemy</title>
    <link href="https://snjl.github.io/2019/02/13/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8SQLAlchemy/"/>
    <id>https://snjl.github.io/2019/02/13/简单使用SQLAlchemy/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:39:14.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>导入SQLAlchemy，并初始化DBSession：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 导入:</span><br><span class="line">from sqlalchemy import Column, String, create_engine</span><br><span class="line">from sqlalchemy.orm import sessionmaker</span><br><span class="line">from sqlalchemy.ext.declarative import declarative_base</span><br><span class="line"></span><br><span class="line"># 创建对象的基类:</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"># 定义User对象:</span><br><span class="line">class User(Base):</span><br><span class="line">    # 表的名字:</span><br><span class="line">    __tablename__ = &apos;user&apos;</span><br><span class="line"></span><br><span class="line">    # 表的结构:</span><br><span class="line">    id = Column(String(20), primary_key=True)</span><br><span class="line">    name = Column(String(20))</span><br><span class="line"></span><br><span class="line"># 初始化数据库连接:</span><br><span class="line">engine = create_engine(&apos;mysql+mysqlconnector://root:password@localhost:3306/test&apos;)</span><br><span class="line"># 创建DBSession类型:</span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br></pre></td></tr></table></figure></p><p><strong>注：create_engine可以使用echo参数，echo=True，可以输出日志，如下所示“</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2019-02-05 16:20:31,866 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE &apos;sql_mode&apos;</span><br><span class="line">2019-02-05 16:20:31,866 INFO sqlalchemy.engine.base.Engine &#123;&#125;</span><br><span class="line">2019-02-05 16:20:31,872 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE &apos;lower_case_table_names&apos;</span><br><span class="line">2019-02-05 16:20:31,872 INFO sqlalchemy.engine.base.Engine &#123;&#125;</span><br><span class="line">2019-02-05 16:20:31,879 INFO sqlalchemy.engine.base.Engine SELECT DATABASE()</span><br><span class="line">2019-02-05 16:20:31,879 INFO sqlalchemy.engine.base.Engine &#123;&#125;</span><br><span class="line">2019-02-05 16:20:31,882 INFO sqlalchemy.engine.base.Engine SELECT CAST(&apos;test plain returns&apos; AS CHAR(60)) AS anon_1</span><br><span class="line">2019-02-05 16:20:31,882 INFO sqlalchemy.engine.base.Engine &#123;&#125;</span><br><span class="line">2019-02-05 16:20:31,883 INFO sqlalchemy.engine.base.Engine SELECT CAST(&apos;test unicode returns&apos; AS CHAR(60)) AS anon_1</span><br><span class="line">2019-02-05 16:20:31,883 INFO sqlalchemy.engine.base.Engine &#123;&#125;</span><br><span class="line">2019-02-05 16:20:31,885 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)</span><br><span class="line">2019-02-05 16:20:31,887 INFO sqlalchemy.engine.base.Engine SELECT `USER`.id AS `USER_id`, `USER`.name AS `USER_name` </span><br><span class="line">FROM `USER` </span><br><span class="line">WHERE `USER`.name = %(name_1)s AND `USER`.id = %(id_1)s</span><br><span class="line">2019-02-05 16:20:31,887 INFO sqlalchemy.engine.base.Engine &#123;&apos;name_1&apos;: &apos;Bob&apos;, &apos;id_1&apos;: &apos;5&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码完成SQLAlchemy的初始化和具体每个表的class定义。如果有多个表，就继续定义其他class，例如School：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class School(Base):</span><br><span class="line">    __tablename__ = &apos;school&apos;</span><br><span class="line">    id = ...</span><br><span class="line">    name = ...</span><br></pre></td></tr></table></figure></p><p><strong>注：类必须继承Base基类，而且必须定义<strong>tablename</strong>，对应数据库中表的名称，且类中每个字段的名称必须对应数据库中的字段名称（windows中可以大小写，linux未测试），类中的字段可以少，例如数据库中有time字段，如果不是必要字段，可以在类中不定义time字段。</strong></p><p>定义了<strong>tablename</strong>，可以输出类构建的表的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; User.__table__</span><br><span class="line">Out[2]: Table(&apos;USER&apos;, MetaData(bind=None), Column(&apos;id&apos;, String(length=20), table=&lt;USER&gt;, primary_key=True, nullable=False), Column(&apos;name&apos;, String(length=20), table=&lt;USER&gt;), schema=None)</span><br></pre></td></tr></table></figure></p><p>create_engine()用来初始化数据库连接。SQLAlchemy用一个字符串表示连接信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;数据库类型+数据库驱动名称://用户名:口令@机器地址:端口号/数据库名&apos;</span><br></pre></td></tr></table></figure></p><p>你只需要根据需要替换掉用户名、口令等信息即可。</p><p>下面，我们看看如何向数据库表中添加一行记录。</p><p>由于有了ORM，我们向数据库表中添加一行记录，可以视为添加一个User对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建session对象:</span><br><span class="line">session = DBSession()</span><br><span class="line"># 创建新User对象:</span><br><span class="line">new_user = User(id=&apos;5&apos;, name=&apos;Bob&apos;)</span><br><span class="line"># 添加到session:</span><br><span class="line">session.add(new_user)</span><br><span class="line"># 提交即保存到数据库:</span><br><span class="line">session.commit()</span><br><span class="line"># 关闭session:</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></p><p><strong>注：这里的sesson就是pymysql中的cursor游标，DBSession才是pymysql中的session。</strong><br>可见，关键是获取session，然后把对象添加到session，最后提交并关闭。DBSession对象可视为当前数据库连接。</p><p>如何从数据库表中查询数据呢？有了ORM，查询出来的可以不再是tuple，而是User对象。SQLAlchemy提供的查询接口如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 创建Session:</span><br><span class="line">session = DBSession()</span><br><span class="line"># 创建Query查询，filter是where条件，最后调用one()返回唯一行，如果调用all()则返回所有行:</span><br><span class="line">user = session.query(User).filter(User.id==&apos;5&apos;).one()</span><br><span class="line"># 打印类型和对象的name属性:</span><br><span class="line">print(&apos;type:&apos;, type(user))</span><br><span class="line">print(&apos;name:&apos;, user.name)</span><br><span class="line"># 关闭Session:</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: &lt;class &apos;__main__.User&apos;&gt;</span><br><span class="line">name: Bob</span><br></pre></td></tr></table></figure></p><p>如果要查找多个条件，可以写成以下几种形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(User).filter(User.name == &apos;Bob&apos;).filter(User.id == &apos;5&apos;).all()</span><br><span class="line">a = session.query(User).filter(User.name == &apos;Bob&apos;, User.id == &apos;5&apos;).all()</span><br><span class="line">a = session.query(User).filter(User.name == &apos;Bob&apos; and User.id == &apos;5&apos;).all()</span><br></pre></td></tr></table></figure></p><p>更通用的方法是用and_<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(User).filter(and_(User.name == &apos;Bob&apos;, User.id == &apos;5&apos;)).all()</span><br></pre></td></tr></table></figure></p><p>使用like，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(User).filter(and_(User.name.like(&quot;%%&quot;), User.id.like(&apos;%2%&apos;))).all()</span><br></pre></td></tr></table></figure></p><p>使用filter_by<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = session.query(User).filter_by(id=&apos;5&apos;).all()</span><br></pre></td></tr></table></figure></p><p>filter_by特点是不需要使用类属性表示，可以使用参数，例如id,name等。</p><p>可见，ORM就是把数据库表的行与相应的对象建立关联，互相转换。</p><p>由于关系数据库的多个表还可以用外键实现一对多、多对多等关联，相应地，ORM框架也可以提供两个对象之间的一对多、多对多等功能。</p><p>例如，如果一个User拥有多个Book，就可以定义一对多关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class User(Base):</span><br><span class="line">    __tablename__ = &apos;user&apos;</span><br><span class="line"></span><br><span class="line">    id = Column(String(20), primary_key=True)</span><br><span class="line">    name = Column(String(20))</span><br><span class="line">    # 一对多:</span><br><span class="line">    books = relationship(&apos;Book&apos;)</span><br><span class="line"></span><br><span class="line">class Book(Base):</span><br><span class="line">    __tablename__ = &apos;book&apos;</span><br><span class="line"></span><br><span class="line">    id = Column(String(20), primary_key=True)</span><br><span class="line">    name = Column(String(20))</span><br><span class="line">    # “多”的一方的book表是通过外键关联到user表的:</span><br><span class="line">    user_id = Column(String(20), ForeignKey(&apos;user.id&apos;))</span><br></pre></td></tr></table></figure></p><p>当我们查询一个User对象时，该对象的books属性将返回一个包含若干个Book对象的list。</p><h1 id="run参数"><a href="#run参数" class="headerlink" title="run参数"></a>run参数</h1><p>最后，Flask类的run()方法在本地开发服务器上运行应用程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host, port, debug, options)</span><br></pre></td></tr></table></figure></p><p>Python上面方法中的所有参数都是可选的，作用如下表描述说明 </p><table><thead><tr><th>编号</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>host</td><td>监听的主机名。默认为127.0.0.1(localhost)。 设置为’0.0.0.0’使服务器在外部可用</td></tr><tr><td>2</td><td>port</td><td>监听端口号，默认为:5000</td></tr><tr><td>3</td><td>debug</td><td>默认为:false。 如果设置为:true，则提供调试信息</td></tr><tr><td>4</td><td>options</td><td>被转发到底层的Werkzeug服务器。</td></tr></tbody></table><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>ORM框架的作用就是把数据库表的一行记录与一个对象互相做自动转换。</p><p>正确使用ORM的前提是了解关系数据库的原理。</p><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>报错找不到mysql的包，需要安装mysql-connector</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;p&gt;导入SQLAlchemy，并初始化DBSession：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/categories/python/SQLAlchemy/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="SQLAlchemy" scheme="https://snjl.github.io/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>flask返回json数据</title>
    <link href="https://snjl.github.io/2019/02/13/flask%E8%BF%94%E5%9B%9Ejson%E6%95%B0%E6%8D%AE/"/>
    <id>https://snjl.github.io/2019/02/13/flask返回json数据/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:33:12.917Z</updated>
    
    <content type="html"><![CDATA[<p>定义类后，在里面定义方法to_json():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建对象的基类:</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Address对象:</span><br><span class="line">class Address(Base):</span><br><span class="line">    # 表的名字:</span><br><span class="line">    __tablename__ = &apos;address&apos;</span><br><span class="line">    # 表的结构:</span><br><span class="line">    id = Column(Integer, primary_key=True)</span><br><span class="line">    address = Column(String(20))</span><br><span class="line">    status = Column(Integer)</span><br><span class="line"></span><br><span class="line">    def to_json(self):</span><br><span class="line">        return &#123;</span><br><span class="line">            &apos;id&apos;: self.id,</span><br><span class="line">            &apos;address&apos;: self.address,</span><br><span class="line">            &apos;status&apos;: self.status</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>返回dict数据。</p><p>返回json数据，使用jsonify：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, jsonify</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/ajax&apos;)</span><br><span class="line">def ajax():</span><br><span class="line">    session = DBSession()</span><br><span class="line">    try:</span><br><span class="line">        addresses = session.query(Address).filter().all()</span><br><span class="line">        addresses_json = list()</span><br><span class="line">        for address in addresses:</span><br><span class="line">            print(address.address)</span><br><span class="line">            addresses_json.append(address.to_json())</span><br><span class="line">        return jsonify(&#123;&apos;addresses&apos;: addresses_json&#125;)</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">    finally:</span><br><span class="line">        session.close()</span><br></pre></td></tr></table></figure></p><p>返回的数据如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">addresses: [</span><br><span class="line">&#123;</span><br><span class="line">address: &quot;xxx#qq.com&quot;,</span><br><span class="line">id: 1,</span><br><span class="line">status: 0</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">address: &quot;xxx@163.com&quot;,</span><br><span class="line">id: 2,</span><br><span class="line">status: 0</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定义类后，在里面定义方法to_json():&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="json" scheme="https://snjl.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>flask：cookie处理</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9Acookie%E5%A4%84%E7%90%86/"/>
    <id>https://snjl.github.io/2019/02/13/flask：cookie处理/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:33:27.313Z</updated>
    
    <content type="html"><![CDATA[<p>Cookie以文本文件的形式存储在客户端计算机上。</p><p>其目的是记住和跟踪与客户使用有关的数据，以获得更好的访问体验和网站统计。Request对象包含一个cookie的属性。</p><p>它是所有cookie变量及其对应值的字典对象，客户端已发送。</p><p>除此之外，cookie还会存储其到期时间，路径和站点的域名。在Flask中，cookies设置在响应对象上。</p><p>使用make_response()函数从视图函数的返回值中获取响应对象。</p><p>之后，使用响应对象的set_cookie()函数来存储cookie。重读cookie很容易。 </p><p>可以使用request.cookies属性的get()方法来读取cookie。在下面的Flask应用程序中，当访问URL =&gt; / 时，会打开一个简单的表单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&apos;index.html&apos;)</span><br></pre></td></tr></table></figure><p>这个HTML页面包含一个文本输入，完整代码如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Flask Cookies示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line">      &lt;form action = &quot;/setcookie&quot; method = &quot;POST&quot;&gt;</span><br><span class="line">         &lt;p&gt;&lt;h3&gt;Enter userID&lt;/h3&gt;&lt;/p&gt;</span><br><span class="line">         &lt;p&gt;&lt;input type = &apos;text&apos; name = &apos;name&apos;/&gt;&lt;/p&gt;</span><br><span class="line">         &lt;p&gt;&lt;input type = &apos;submit&apos; value = &apos;登录&apos;/&gt;&lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>表单提交到URL =&gt; /setcookie。 关联的视图函数设置一个Cookie名称为:userID，并的另一个页面中呈现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/setcookie&apos;, methods = [&apos;POST&apos;, &apos;GET&apos;])</span><br><span class="line">def setcookie():</span><br><span class="line">   if request.method == &apos;POST&apos;:</span><br><span class="line">        user = request.form[&apos;name&apos;]</span><br><span class="line"></span><br><span class="line">        resp = make_response(render_template(&apos;readcookie.html&apos;))</span><br><span class="line">        resp.set_cookie(&apos;userID&apos;, user)</span><br><span class="line"></span><br><span class="line">        return resp</span><br></pre></td></tr></table></figure></p><p>readcookie.html代码可为空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>readcookie.html 包含超链接到另一个函数getcookie()的视图，该函数读回并在浏览器中显示cookie值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/getcookie&apos;)</span><br><span class="line">def getcookie():</span><br><span class="line">    name = request.cookies.get(&apos;userID&apos;)</span><br><span class="line">    return &apos;&lt;h1&gt;welcome &apos;+name+&apos;&lt;/h1&gt;&apos;</span><br></pre></td></tr></table></figure><p>完整的应用程序代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask import render_template</span><br><span class="line">from flask import request</span><br><span class="line">from flask import make_response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&apos;index.html&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/setcookie&apos;, methods = [&apos;POST&apos;, &apos;GET&apos;])</span><br><span class="line">def setcookie():</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        user = request.form[&apos;name&apos;]</span><br><span class="line"></span><br><span class="line">        resp = make_response(render_template(&apos;readcookie.html&apos;))</span><br><span class="line">        resp.set_cookie(&apos;userID&apos;, user)</span><br><span class="line">        return resp</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/getcookie&apos;)</span><br><span class="line">def getcookie():</span><br><span class="line">    name = request.cookies.get(&apos;userID&apos;)</span><br><span class="line">    print (name)</span><br><span class="line">    return &apos;&lt;h1&gt;welcome, &apos;+name+&apos;&lt;/h1&gt;&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><p>运行该应用程序并访问URL =&gt; <a href="http://localhost:5000/，设置cookie后，会跳转到readcookie.html，再访问getcookie页面，会看到cookie值。" target="_blank" rel="noopener">http://localhost:5000/，设置cookie后，会跳转到readcookie.html，再访问getcookie页面，会看到cookie值。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cookie以文本文件的形式存储在客户端计算机上。&lt;/p&gt;
&lt;p&gt;其目的是记住和跟踪与客户使用有关的数据，以获得更好的访问体验和网站统计。Request对象包含一个cookie的属性。&lt;/p&gt;
&lt;p&gt;它是所有cookie变量及其对应值的字典对象，客户端已发送。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="cookie" scheme="https://snjl.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>flask：消息闪现</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9A%E6%B6%88%E6%81%AF%E9%97%AA%E7%8E%B0/"/>
    <id>https://snjl.github.io/2019/02/13/flask：消息闪现/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:36:12.942Z</updated>
    
    <content type="html"><![CDATA[<p>一个基于GUI好的应用程序需要向用户提供交互的反馈信息。 例如，桌面应用程序使用对话框或消息框，JavaScript使用alert()函数用于类似的目的。</p><p>在Flask Web应用程序中生成这样的信息消息很容易。 Flask框架的闪现系统使得可以在一个视图中创建一个消息并将其呈现在名为next的视图函数中。</p><p>Flask模块包含flash()方法。 它将消息传递给下一个请求，该请求通常是一个模板。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash(message, category)</span><br></pre></td></tr></table></figure></p><p>在这里 </p><ul><li>message - 参数是要刷新的实际消息。</li><li>category - 参数是可选的。 它可以是’错误’，’信息’或’警告’。</li></ul><p>要从会话中删除消息，模板调用get_flashed_messages()函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_flashed_messages(with_categories, category_filter)</span><br></pre></td></tr></table></figure></p><p>两个参数都是可选的。 如果收到的消息具有类别，则第一个参数是元组。 第二个参数对于仅显示特定消息很有用。</p><p>以下闪现模板中收到消息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">   &#123;% if messages %&#125;</span><br><span class="line">      &#123;% for message in messages %&#125;</span><br><span class="line">         &#123;&#123; message &#125;&#125;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">   &#123;% endif %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><p>现在我们来看一个简单的例子，演示Flask中的闪现机制。 在下面的代码中，URL =&gt; “/”显示了到登录页面的链接，没有指定要发送的消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&apos;index.html&apos;)</span><br></pre></td></tr></table></figure></p><p>该链接引导用户显示登录表单的URL =&gt; “/login”。 提交时，login()函数验证用户名和密码，并相应地闪现“成功”或“错误”变量消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/login&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def login():</span><br><span class="line">    error = None</span><br><span class="line"></span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        if request.form[&apos;username&apos;] != &apos;admin&apos; or \</span><br><span class="line">            request.form[&apos;password&apos;] != &apos;admin&apos;:</span><br><span class="line">            error = &apos;Invalid username or password. Please try again!&apos;</span><br><span class="line">        else:</span><br><span class="line">            flash(&apos;You were successfully logged in&apos;)</span><br><span class="line">            return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    return render_template(&apos;login.html&apos;, error = error)</span><br></pre></td></tr></table></figure></p><p>如有错误，登录模板将重新显示并显示错误消息。</p><p>模板文件:login.html 代码如下 -<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Flask示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line">     &lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">      &#123;% if error %&#125;</span><br><span class="line">      &lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt; &#123;&#123; error &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">      &lt;form action = &quot;/login&quot; method =&quot;POST&quot;&gt;</span><br><span class="line">         &lt;dl&gt;</span><br><span class="line">            &lt;dt&gt;用户名:&lt;/dt&gt;</span><br><span class="line">            &lt;dd&gt;</span><br><span class="line">               &lt;input type = text name = &quot;username&quot; </span><br><span class="line">                  value = &quot;&#123;&#123;request.form.username &#125;&#125;&quot;&gt;</span><br><span class="line">            &lt;/dd&gt;</span><br><span class="line">            &lt;dt&gt;密码:&lt;/dt&gt;</span><br><span class="line">            &lt;dd&gt;&lt;input type =&quot;password&quot; name =&quot;password&quot;&gt;&lt;/dd&gt;</span><br><span class="line">         &lt;/dl&gt;</span><br><span class="line">         &lt;p&gt;&lt;input type = submit value =&quot;登录&quot;&gt;&lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>如果登录成功，则在索引模板上闪现成功消息。以下代码保存在文件(index.html)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Flask消息闪现&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">          &#123;% if messages %&#125;</span><br><span class="line">            &lt;ul class=flashes&gt;</span><br><span class="line">            &#123;% for message in messages %&#125;</span><br><span class="line">              &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">        &#123;% endwith %&#125;</span><br><span class="line"></span><br><span class="line">      &lt;h1&gt;Flask Message Flashing Example&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;您想要&lt;a href = &quot;&#123;&#123; url_for(&apos;login&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">         &lt;b&gt;登录?&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>Flask消息闪现示例的完整代码如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, flash, redirect, render_template, request, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = &apos;random string&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">   return render_template(&apos;index.html&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def login():</span><br><span class="line">    error = None</span><br><span class="line">    print(request.method)</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        if request.form[&apos;username&apos;] != &apos;admin&apos; or \</span><br><span class="line">            request.form[&apos;password&apos;] != &apos;admin&apos;:</span><br><span class="line">            error = &apos;Invalid username or password. Please try again!&apos;</span><br><span class="line">        else:</span><br><span class="line">            #flash(&apos;您已成功登录&apos;)</span><br><span class="line">            flash(&apos;You were successfully logged in&apos;)</span><br><span class="line">            return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    return render_template(&apos;login.html&apos;, error = error)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个基于GUI好的应用程序需要向用户提供交互的反馈信息。 例如，桌面应用程序使用对话框或消息框，JavaScript使用alert()函数用于类似的目的。&lt;/p&gt;
&lt;p&gt;在Flask Web应用程序中生成这样的信息消息很容易。 Flask框架的闪现系统使得可以在一个视图中创
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="消息" scheme="https://snjl.github.io/tags/%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>flask简单示例：学生信息添加展示</title>
    <link href="https://snjl.github.io/2019/02/13/flask%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B%EF%BC%9A%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E6%B7%BB%E5%8A%A0%E5%B1%95%E7%A4%BA/"/>
    <id>https://snjl.github.io/2019/02/13/flask简单示例：学生信息添加展示/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:33:52.252Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/python.flask.student_item.git" target="_blank" rel="noopener">https://github.com/snjl/python.flask.student_item.git</a></p><p>使用的是flask-sqlalchemy，需要使用pip安装然后导入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><p>第1步 - 安装Flask-SQLAlchemy扩展。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure></p><p>Shell第2步 - 需要从该模块导入SQLAlchemy类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br></pre></td></tr></table></figure></p><p>Python第3步 - 现在创建一个Flask应用程序对象并为要使用的数据库设置URI。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;sqlite:///students.sqlite3&apos;</span><br></pre></td></tr></table></figure></p><p>Python第4步 - 然后用应用程序对象作为参数创建一个SQLAlchemy类的对象。 该对象包含ORM操作的辅助函数。 它还提供了一个使用其声明用户定义模型的父级模型类。 在下面的代码片段中，创建了一个学生模型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br><span class="line">class students(db.Model):</span><br><span class="line">    id = db.Column(&apos;student_id&apos;, db.Integer, primary_key = True)</span><br><span class="line">    name = db.Column(db.String(100))</span><br><span class="line">    city = db.Column(db.String(50))  </span><br><span class="line">    addr = db.Column(db.String(200))</span><br><span class="line">    pin = db.Column(db.String(10))</span><br><span class="line"></span><br><span class="line">def __init__(self, name, city, addr,pin):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.city = city</span><br><span class="line">    self.addr = addr</span><br><span class="line">    self.pin = pin</span><br></pre></td></tr></table></figure></p><p>Python第5步 - 要创建/使用URI中提到的数据库，请运行create_all()方法。db.create_all()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.create_all()</span><br></pre></td></tr></table></figure></p><h1 id="控制层与显示层"><a href="#控制层与显示层" class="headerlink" title="控制层与显示层"></a>控制层与显示层</h1><p>SQLAlchemy的Session对象管理ORM对象的所有持久性操作。以下会话方法执行CRUD操作  </p><ul><li>db.session.add(模型对象)将一条记录插入到映射表中</li><li>db.session.delete(模型对象)从表中删除记录</li><li>model.query.all()从表中检索所有记录(对应于SELECT查询)</li></ul><p>可以使用filter属性将筛选器应用于检索到的记录集。</p><p>例如，要在students表中检索city =’Haikou’的记录，请使用以下语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Students.query.filter_by(city = &apos;Haikou&apos;).all()</span><br></pre></td></tr></table></figure></p><p>了这么多的背景知识，现在我们将为我们的应用程序提供视图函数来添加学生数据。应用程序的入口点是绑定到URL =&gt; ‘/‘的show_all()函数。学生的记录集作为参数发送给HTML模板。 模板中的服务器端代码以HTML表格形式呈现记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def show_all():</span><br><span class="line">    return render_template(&apos;show_all.html&apos;, students = students.query.all() )</span><br></pre></td></tr></table></figure></p><p>Python模板的HTML脚本(show_all.html)就像这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Flask示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line"></span><br><span class="line">      &lt;h3&gt;</span><br><span class="line">         &lt;a href = &quot;&#123;&#123; url_for(&apos;show_all&apos;) &#125;&#125;&quot;&gt;学生列表 - Flask </span><br><span class="line">            SQLAlchemy示例&lt;/a&gt;</span><br><span class="line">      &lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line">      &#123;%- for message in get_flashed_messages() %&#125;</span><br><span class="line">         &#123;&#123; message &#125;&#125;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">      &lt;h3&gt;学生 (&lt;a href = &quot;&#123;&#123; url_for(&apos;new&apos;) &#125;&#125;&quot;&gt;添加</span><br><span class="line">         &lt;/a&gt;)&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">      &lt;table&gt;</span><br><span class="line">         &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">               &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">               &lt;th&gt;城市&lt;/th&gt;</span><br><span class="line">               &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">               &lt;th&gt;Pin&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">         &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">         &lt;tbody&gt;</span><br><span class="line">            &#123;% for student in students %&#125;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                  &lt;td&gt;&#123;&#123; student.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;&#123;&#123; student.city &#125;&#125;&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;&#123;&#123; student.addr &#125;&#125;&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;&#123;&#123; student.pin &#125;&#125;&lt;/td&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">         &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>此处的get_flashed_messages是获取后台传输过来的信息。</strong><br>HTML上面的页面包含一个指向URL:/new 映射new()函数的超链接。点击后，它会打开一个学生信息表单。 数据在POST方法中发布到相同的URL。模板文件:new.html 的代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Flask示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">    &lt;h3&gt;学生信息 - Flask SQLAlchemy示例&lt;/h3&gt;</span><br><span class="line">      &lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">      &#123;%- for category, message in get_flashed_messages(with_categories = true) %&#125;</span><br><span class="line">         &lt;div class = &quot;alert alert-danger&quot;&gt;</span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">      &lt;form action = &quot;&#123;&#123; request.path &#125;&#125;&quot; method = &quot;post&quot;&gt;</span><br><span class="line">         &lt;label for = &quot;name&quot;&gt;姓名&lt;/label&gt;&lt;br&gt;</span><br><span class="line">         &lt;input type = &quot;text&quot; name = &quot;name&quot; placeholder = &quot;Name&quot; /&gt;&lt;br&gt;</span><br><span class="line">         &lt;label for = &quot;email&quot;&gt;城市&lt;/label&gt;&lt;br&gt;</span><br><span class="line">         &lt;input type = &quot;text&quot; name = &quot;city&quot; placeholder = &quot;city&quot; /&gt;&lt;br&gt;</span><br><span class="line">         &lt;label for = &quot;addr&quot;&gt;地址&lt;/label&gt;&lt;br&gt;</span><br><span class="line">          &lt;textarea name = &quot;addr&quot; placeholder = &quot;addr&quot;&gt;&lt;/textarea&gt;  &lt;br&gt;</span><br><span class="line">         &lt;label for = &quot;PIN&quot;&gt;城市&lt;/label&gt;&lt;br&gt;</span><br><span class="line">         &lt;input type = &quot;text&quot; name = &quot;pin&quot; placeholder = &quot;pin&quot; /&gt;&lt;br&gt;</span><br><span class="line">         &lt;input type = &quot;submit&quot; value = &quot;提交&quot; /&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>HTML当检测到http方法为POST时，表单数据将插入到students表中，并且应用程序返回到显示数据的主页。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/new&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def new():</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">       if not request.form[&apos;name&apos;] or not request.form[&apos;city&apos;] or not request.form[&apos;addr&apos;]:</span><br><span class="line">         flash(&apos;Please enter all the fields&apos;, &apos;error&apos;)</span><br><span class="line">       else:</span><br><span class="line">          student = students(request.form[&apos;name&apos;], request.form[&apos;city&apos;],</span><br><span class="line">             request.form[&apos;addr&apos;], request.form[&apos;pin&apos;])</span><br><span class="line"></span><br><span class="line">          db.session.add(student)</span><br><span class="line">          db.session.commit()</span><br><span class="line"></span><br><span class="line">          flash(&apos;Record was successfully added&apos;)</span><br><span class="line">          return redirect(url_for(&apos;show_all&apos;))</span><br><span class="line">    return render_template(&apos;new.html&apos;)</span><br></pre></td></tr></table></figure><p>Python下面给出的是完整的应用程序代码(app.py)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, request, flash, url_for, redirect, render_template</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;sqlite:///students.sqlite3&apos;</span><br><span class="line">app.config[&apos;SECRET_KEY&apos;] = &quot;random string&quot;</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">class students(db.Model):</span><br><span class="line">    id = db.Column(&apos;student_id&apos;, db.Integer, primary_key = True)</span><br><span class="line">    name = db.Column(db.String(100))</span><br><span class="line">    city = db.Column(db.String(50))</span><br><span class="line">    addr = db.Column(db.String(200)) </span><br><span class="line">    pin = db.Column(db.String(10))</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, city, addr,pin):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.city = city</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.pin = pin</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def show_all():</span><br><span class="line">    return render_template(&apos;show_all.html&apos;, students = students.query.all() )</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/new&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def new():</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">       if not request.form[&apos;name&apos;] or not request.form[&apos;city&apos;] or not request.form[&apos;addr&apos;]:</span><br><span class="line">          flash(&apos;Please enter all the fields&apos;, &apos;error&apos;)</span><br><span class="line">       else:</span><br><span class="line">          student = students(request.form[&apos;name&apos;], request.form[&apos;city&apos;],request.form[&apos;addr&apos;], request.form[&apos;pin&apos;])</span><br><span class="line">          print(student)</span><br><span class="line">          db.session.add(student)</span><br><span class="line">          db.session.commit()</span><br><span class="line">          flash(&apos;Record was successfully added&apos;)</span><br><span class="line">          return redirect(url_for(&apos;show_all&apos;))</span><br><span class="line">    return render_template(&apos;new.html&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    db.create_all()</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><h1 id="flask-SQLAlchemy和SQLAlchemy使用区别"><a href="#flask-SQLAlchemy和SQLAlchemy使用区别" class="headerlink" title="flask-SQLAlchemy和SQLAlchemy使用区别"></a>flask-SQLAlchemy和SQLAlchemy使用区别</h1><p>使用前者，需要配置在app里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = &apos;mysql+mysqlconnector://root:123456@localhost:3306/test&apos;</span><br><span class="line">app.config[&apos;SECRET_KEY&apos;] = &quot;random string&quot;</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></p><p>而且使用的字段，是调用的db，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class students(db.Model):</span><br><span class="line">    id = db.Column(&apos;student_id&apos;, db.Integer, primary_key=True)</span><br><span class="line">    name = db.Column(db.String(100))</span><br><span class="line">    city = db.Column(db.String(50))</span><br><span class="line">    addr = db.Column(db.String(200))</span><br><span class="line">    pin = db.Column(db.String(10))</span><br></pre></td></tr></table></figure></p><p>使用后者，使用engine配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 初始化数据库连接:</span><br><span class="line">engine = create_engine(&apos;mysql+mysqlconnector://root:snjlSHU@139.224.113.131:3306/stock_test&apos;)</span><br><span class="line"># 创建DBSession类型:</span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure></p><p>使用字段，用的是SQLAlchemy的包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import Column, String, create_engine, Integer</span><br><span class="line"></span><br><span class="line"># Address对象:</span><br><span class="line">class Address(Base):</span><br><span class="line">    # 表的名字:</span><br><span class="line">    __tablename__ = &apos;address&apos;</span><br><span class="line">    # 表的结构:</span><br><span class="line">    id = Column(Integer, primary_key=True)</span><br><span class="line">    address = Column(String(20))</span><br><span class="line">    status = Column(Integer)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/python.flask.student_item.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/python.flask.student_item.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用的是flask-sqlalchemy，需要使用pip安装然后导入&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from flask_sqlalchemy import SQLAlchemy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="项目" scheme="https://snjl.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>flask：变量规则</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9A%E5%8F%98%E9%87%8F%E8%A7%84%E5%88%99/"/>
    <id>https://snjl.github.io/2019/02/13/flask：变量规则/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:35:43.887Z</updated>
    
    <content type="html"><![CDATA[<p>可以通过将可变部分添加到规则参数来动态构建URL。 这个变量部分被标记为<variable-name>。 它作为关键字参数传递给规则所关联的函数。在以下示例中，route()装饰器的规则参数包含附加到URL /hello的<name>变量部分。 因此，如果在浏览器中输入URL: <a href="http://localhost:5000/hello/YiibaiYiibai，那么" target="_blank" rel="noopener">http://localhost:5000/hello/YiibaiYiibai，那么</a> ‘YiibaiYiibai’ 将作为参数提供给hello()函数。参考如下代码 -<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/hello/&lt;name&gt;&apos;)</span><br><span class="line">def hello_name(name):</span><br><span class="line">    return &apos;Hello %s!&apos; % name</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></name></variable-name></p><p>Python将上面的脚本保存到文件:hello.py，并从Python shell运行它。<br>接下来，打开浏览器并输入URL =&gt; <a href="http://localhost:5000/hello/YiibaiYiibai可以看到结果。" target="_blank" rel="noopener">http://localhost:5000/hello/YiibaiYiibai可以看到结果。</a> </p><p>除了默认的字符串变量部分之外，还可以使用以下转换器构造规则 -<br>编号 | 转换器 | 描述<br>—|—|—<br>1 | int | 接受整数<br>2 | float | 对于浮点值<br>3 | path | 接受用作目录分隔符的斜杠符(/)在下面的代码中，使用了所有这些构造函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/blog/&lt;int:postID&gt;&apos;)</span><br><span class="line">def show_blog(postID):</span><br><span class="line">    return &apos;Blog Number %d&apos; % postID</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/rev/&lt;float:revNo&gt;&apos;)</span><br><span class="line">def revision(revNo):</span><br><span class="line">    return &apos;Revision Number %f&apos; % revNo</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>Python从Python Shell运行上述代码。 在浏览器中访问URL =&gt; http:// localhost:5000/blog/11。给定的数字值作为:show_blog()函数的参数。 浏览器显示以下输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blog Number 11</span><br></pre></td></tr></table></figure></p><p>Shell在浏览器中输入此URL - <a href="http://localhost:5000/rev/1.1revision()函数将浮点数作为参数。" target="_blank" rel="noopener">http://localhost:5000/rev/1.1revision()函数将浮点数作为参数。</a> 以下结果出现在浏览器窗口中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Revision Number 1.100000</span><br></pre></td></tr></table></figure></p><p>ShellFlask的URL规则基于Werkzeug的路由模块。<br>这确保了形成的URL是唯一的，并且基于Apache制定的先例。考虑以下脚本中定义的规则 -<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/flask&apos;)</span><br><span class="line">def hello_flask():</span><br><span class="line">    return &apos;Hello Flask&apos;</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/python/&apos;)</span><br><span class="line">def hello_python():</span><br><span class="line">    return &apos;Hello Python&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>Python两条规则看起来都很相似，但在第二条规则中，使用了尾部斜线(/)。 因此，它变成了一个规范的URL。 因此，使用/python或/python/返回相同的输出。 但是，在第一条规则的情况下， URL:/flask/会导致404 Not Found页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可以通过将可变部分添加到规则参数来动态构建URL。 这个变量部分被标记为&lt;variable-name&gt;。 它作为关键字参数传递给规则所关联的函数。在以下示例中，route()装饰器的规则参数包含附加到URL /hello的&lt;name&gt;变量部分。 因此，如果在浏览器中输入UR
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask：路由</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9A%E8%B7%AF%E7%94%B1/"/>
    <id>https://snjl.github.io/2019/02/13/flask：路由/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:36:26.535Z</updated>
    
    <content type="html"><![CDATA[<p>现代Web框架使用路由技术来帮助用户记住应用程序URL。 无需从主页导航即可直接访问所需页面。Flask中的route()装饰器用于将URL绑定到函数。 例如 <a href="mailto:-@app.route" target="_blank" rel="noopener">-@app.route</a>(‘/hello’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def hello_world():</span><br><span class="line">    return &apos;hello world&apos;</span><br></pre></td></tr></table></figure></p><p>Python这里，URL /hello规则绑定到hello_world()函数。 因此，如果用户访问URL : <a href="http://localhost:5000/hello" target="_blank" rel="noopener">http://localhost:5000/hello</a> ，就会调用hello_world()函数，这个函数中的执行的结果输出将在浏览器中呈现。应用程序对象的add_url_rule()函数也可用于将URL与函数绑定，如上例所示，使用route()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def hello_world():</span><br><span class="line">    return &apos;hello world&apos;</span><br><span class="line"></span><br><span class="line">app.add_url_rule(&apos;/&apos;, &apos;hello&apos;, hello_world)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现代Web框架使用路由技术来帮助用户记住应用程序URL。 无需从主页导航即可直接访问所需页面。Flask中的route()装饰器用于将URL绑定到函数。 例如 &lt;a href=&quot;mailto:-@app.route&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="路由" scheme="https://snjl.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>flask静态文件</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9A%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    <id>https://snjl.github.io/2019/02/13/flask：静态文件/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:37:11.287Z</updated>
    
    <content type="html"><![CDATA[<p>Web应用程序通常需要一个静态文件，例如支持显示网页的JavaScript文件或CSS文件。 通常，可以通过配置Web服务器提供这些服务，但在开发过程中，这些文件将从包中的静态文件夹或模块旁边提供，它将在应用程序的/static上提供。使用特殊的端点“静态”来为静态文件生成URL。在以下示例中，index.html中的HTML按钮的OnClick事件调用hello.js中定义的javascript函数，该函数在Flask应用程序的URL =&gt; / 中呈现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><p>Pythonindex.html 中的HTML脚本如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;script type = &quot;text/javascript&quot; </span><br><span class="line">         src = &quot;&#123;&#123; url_for(&apos;static&apos;, filename = &apos;hello.js&apos;) &#125;&#125;&quot; &gt;&lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;input type = &quot;button&quot; onclick = &quot;sayHello()&quot; value = &quot;Say Hello&quot; /&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>HTML文件:hello.js 中定义包含 sayHello() 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sayHello() &#123;</span><br><span class="line">   alert(&quot;Hello World&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以使用html正常的引入方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type = &quot;text/javascript&quot; src = &quot;/static/hello.js&quot; &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Web应用程序通常需要一个静态文件，例如支持显示网页的JavaScript文件或CSS文件。 通常，可以通过配置Web服务器提供这些服务，但在开发过程中，这些文件将从包中的静态文件夹或模块旁边提供，它将在应用程序的/static上提供。使用特殊的端点“静态”来为静态文件生成
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask：重定向和错误</title>
    <link href="https://snjl.github.io/2019/02/13/flask%EF%BC%9A%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E9%94%99%E8%AF%AF/"/>
    <id>https://snjl.github.io/2019/02/13/flask：重定向和错误/</id>
    <published>2019-02-13T08:22:05.000Z</published>
    <updated>2019-02-13T06:36:54.305Z</updated>
    
    <content type="html"><![CDATA[<p>Flask类有重定向redirect()函数。调用时，它会返回一个响应对象，并将用户重定向到具有指定状态码的另一个目标位置。</p><p>redirect()函数的原型如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flask.redirect(location, statuscode, response)</span><br></pre></td></tr></table></figure></p><p>在上述函数中 </p><ul><li>location 参数是响应应该被重定向的URL。</li><li>statuscode 参数发送到浏览器的头标，默认为302。</li><li>response 参数用于实例化响应。</li></ul><p>以下状态代码是标准化的 </p><ul><li>HTTP_300_MULTIPLE_CHOICES</li><li>HTTP_301_MOVED_PERMANENTLY</li><li>HTTP_302_FOUND</li><li>HTTP_303_SEE_OTHER</li><li>HTTP_304_NOT_MODIFIED</li><li>HTTP_305_USE_PROXY</li><li>HTTP_306_RESERVED</li><li>HTTP_307_TEMPORARY_REDIRECT</li></ul><p>默认状态码是302，这是表示’找到’页面。</p><p>在以下示例中，redirect()函数用于在登录尝试失败时再次显示登录页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, redirect, url_for, render_template, request</span><br><span class="line"># Initialize the Flask application</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&apos;log_in.html&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;,methods = [&apos;POST&apos;, &apos;GET&apos;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &apos;POST&apos; and</span><br><span class="line">        request.form[&apos;username&apos;] == &apos;admin&apos; :</span><br><span class="line">        return redirect(url_for(&apos;success&apos;))</span><br><span class="line">    return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/success&apos;)</span><br><span class="line">def success():</span><br><span class="line">    return &apos;logged in successfully&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure></p><p>Flask类具有带有错误代码的abort()函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flask.abort(code)</span><br></pre></td></tr></table></figure></p><p>code参数使用以下值之一 </p><ul><li>400 - 对于错误的请求</li><li>401 - 用于未经身份验证</li><li>403 - 禁止404 - 未找到</li><li>406 - 不可接受</li><li>415 - 用于不支持的媒体类型</li><li>429 - 请求过多</li></ul><p>这里对上面的代码中的login()函数进行一些细微的修改。 如果要显示“Unauthourized”页面，而不是重新显示登录页面，请将其替换为中止(401)的调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, redirect, url_for, render_template, request, abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">   return render_template(&apos;log_in.html&apos;)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;,methods = [&apos;POST&apos;, &apos;GET&apos;])</span><br><span class="line">def login():</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        if request.form[&apos;username&apos;] == &apos;admin&apos; :</span><br><span class="line">            return redirect(url_for(&apos;success&apos;))</span><br><span class="line">        else:</span><br><span class="line">            abort(401)</span><br><span class="line">    else:</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/success&apos;)</span><br><span class="line">def success():</span><br><span class="line">    return &apos;logged in successfully&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(debug = True)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flask类有重定向redirect()函数。调用时，它会返回一个响应对象，并将用户重定向到具有指定状态码的另一个目标位置。&lt;/p&gt;
&lt;p&gt;redirect()函数的原型如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="flask" scheme="https://snjl.github.io/categories/flask/"/>
    
    
      <category term="flask" scheme="https://snjl.github.io/tags/flask/"/>
    
      <category term="重定向" scheme="https://snjl.github.io/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="错误" scheme="https://snjl.github.io/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
</feed>
