<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snjl</title>
  
  <subtitle>我大概率会编程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://snjl.github.io/"/>
  <updated>2018-12-07T15:30:06.294Z</updated>
  <id>https://snjl.github.io/</id>
  
  <author>
    <name>snjl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker：简介</title>
    <link href="https://snjl.github.io/2018/12/07/docker%EF%BC%9A%E7%AE%80%E4%BB%8B/"/>
    <id>https://snjl.github.io/2018/12/07/docker：简介/</id>
    <published>2018-12-07T15:29:31.000Z</published>
    <updated>2018-12-07T15:30:06.294Z</updated>
    
    <content type="html"><![CDATA[<p>参考： <a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1543970179&amp;ver=1283&amp;signature=dn5DgnKs2J2yUd7VvmKjsb-uL5RJgnl1VKGsyxX4COsRSx*igc9g42iAU5pEXQ2FLaVT1QnYRn5HsReBmIGIMdJuxOyv9y0h*cpyQXzy5rlto*QwRgGJ7vm6dmFDuhc-&amp;new=1" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1543970179&amp;ver=1283&amp;signature=dn5DgnKs2J2yUd7VvmKjsb-uL5RJgnl1VKGsyxX4COsRSx*igc9g42iAU5pEXQ2FLaVT1QnYRn5HsReBmIGIMdJuxOyv9y0h*cpyQXzy5rlto*QwRgGJ7vm6dmFDuhc-&amp;new=1</a></p><p><a href="http://dockone.io/article/126" target="_blank" rel="noopener">http://dockone.io/article/126</a></p><p>维基百科：</p><p>Docker is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of operating-system-level virtualization on Linux. Docker uses the resource isolation features of the Linux kernel such as cgroups and kernel namespaces, and a union-capable filesystem such as aufs and others to allow independent “containers” to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines.</p><p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。——摘自维基百科</p><h1 id="现在服务器部署问题"><a href="#现在服务器部署问题" class="headerlink" title="现在服务器部署问题"></a>现在服务器部署问题</h1><h3 id="1-合作开发的时候，在本机可以跑，别人的电脑跑不起来。"><a href="#1-合作开发的时候，在本机可以跑，别人的电脑跑不起来。" class="headerlink" title="1. 合作开发的时候，在本机可以跑，别人的电脑跑不起来。"></a>1. 合作开发的时候，在本机可以跑，别人的电脑跑不起来。</h3><p>这里我们拿java Web应用程序举例，我们一个java Web应用程序涉及很多东西，比如jdk、tomcat、spring等等。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序直接打包成镜像，直接运行在容器中即可。</p><h3 id="2-服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了。"><a href="#2-服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了。" class="headerlink" title="2. 服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了。"></a>2. 服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了。</h3><p>这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。</p><h3 id="3-公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器。"><a href="#3-公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器。" class="headerlink" title="3. 公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器。"></a>3. 公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器。</h3><p>在没有Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用Docker的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率。</p><h1 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h1><p><img src="http://pi6jpxhir.bkt.clouddn.com/docker/docker_introduction.png" alt="image"></p><p>比较上面两张图，我们发现虚拟机是携带操作系统，本身很小的应用程序却因为携带了操作系统而变得非常大，很笨重。Docker是不携带操作系统的，所以Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等等这些资源的时候，拿内存举例，虚拟机是利用Hypervisor去虚拟化内存，整个调用过程是虚拟内存-&gt;虚拟物理内存-&gt;真正物理内存，但是Docker是利用Docker Engine去调用宿主的的资源，这时候过程是虚拟内存-&gt;真正物理内存。</p><h2 id="1-简化配置"><a href="#1-简化配置" class="headerlink" title="1. 简化配置"></a>1. 简化配置</h2><p>这是Docker公司宣传的Docker的主要使用场景。虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。</p><h2 id="2-代码流水线（Code-Pipeline）"><a href="#2-代码流水线（Code-Pipeline）" class="headerlink" title="2. 代码流水线（Code Pipeline）"></a>2. 代码流水线（Code Pipeline）</h2><p>管理前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。</p><h2 id="3-提高开发效率"><a href="#3-提高开发效率" class="headerlink" title="3. 提高开发效率"></a>3. 提高开发效率</h2><p>这就带来了一些额外的好处：Docker能提升开发者的开发效率。如果你想看一个详细一点的例子，可以参考Aater在DevOpsDays Austin 2014 大会或者是DockerCon上的演讲。不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是Docker做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟的时候，我们经常需要为开发环境的机器加内存，而现在Docker可以轻易的让几十个服务在Docker中跑起来。</p><h2 id="4-隔离应用"><a href="#4-隔离应用" class="headerlink" title="4. 隔离应用"></a>4. 隔离应用</h2><p>有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（译者注：微服务架构）。如果你想了解为什么松耦合的应用这么重要，请参考Steve Yege的这篇论文，文中将Google和亚马逊做了比较。</p><h2 id="5-整合服务器"><a href="#5-整合服务器" class="headerlink" title="5. 整合服务器"></a>5. 整合服务器</h2><p>正如通过虚拟机来整合多个应用，Docker隔离应用的能力使得Docker可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker可以比虚拟机提供更好的服务器整合解决方案。</p><h2 id="6-调试能力"><a href="#6-调试能力" class="headerlink" title="6. 调试能力"></a>6. 调试能力</h2><p>Docker提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug。你可以在《Docker拯救世界》的文章中找到这一点的例证。</p><h2 id="7-多租户环境"><a href="#7-多租户环境" class="headerlink" title="7. 多租户环境"></a>7. 多租户环境</h2><p>另外一个Docker有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为IoT（译者注：物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于Docker环境的启动速度和其高效的diff命令。你可以在这里了解关于此场景的更多信息。</p><h2 id="8-快速部署"><a href="#8-快速部署" class="headerlink" title="8. 快速部署"></a>8. 快速部署</h2><p>在虚拟机之前，引入新的硬件资源需要消耗几天的时间。Docker的虚拟化技术将这个时间降到了几分钟，Docker只是创建一个容器进程而无需启动操作系统，这个过程只需要秒级的时间。这正是Google和Facebook都看重的特性。你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有30%，通过使用Docker并进行有效的资源分配可以提高资源的利用率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考： &lt;a href=&quot;https://mp.weixin.qq.com/s?src=11&amp;amp;timestamp=1543970179&amp;amp;ver=1283&amp;amp;signature=dn5DgnKs2J2yUd7VvmKjsb-uL5RJgnl1VKGsyx
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="https://snjl.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="docker" scheme="https://snjl.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib画3D图</title>
    <link href="https://snjl.github.io/2018/12/07/matplotlib%E7%94%BB3D%E5%9B%BE/"/>
    <id>https://snjl.github.io/2018/12/07/matplotlib画3D图/</id>
    <published>2018-12-07T15:28:41.000Z</published>
    <updated>2018-12-07T15:29:13.716Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">X = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">Y = np.arange(<span class="number">-4</span>, <span class="number">4</span>, <span class="number">0.25</span>)</span><br><span class="line">X, Y = np.meshgrid(X, Y)</span><br><span class="line">R = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">Z = np.sin(R)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体函数方法可用 help(function) 查看，如：help(ax.plot_surface)</span></span><br><span class="line">ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://pi6jpxhir.bkt.clouddn.com/python/matplotlib_3d.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="画图" scheme="https://snjl.github.io/tags/%E7%94%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>模式识别作业</title>
    <link href="https://snjl.github.io/2018/12/07/%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB%E4%BD%9C%E4%B8%9A/"/>
    <id>https://snjl.github.io/2018/12/07/模式识别作业/</id>
    <published>2018-12-07T15:27:50.000Z</published>
    <updated>2018-12-07T15:28:46.726Z</updated>
    
    <content type="html"><![CDATA[<ol><li>以下述两类模式为样本，用感知器算法求判别函数：ω1:{(0 0 0)t,(1 0 0)t,(1 0 1)t,(1 1 0)t}; ω2:{(0 0 1)t,(0 1 1)t,(0 1 0)t,(1 1 1)t}.且令W(1)=(-1 –2 –2 0)t， C=1.</li><li>画出上题所给的二类样本，及所求的判决界面。</li><li>用LMSE算法对题1所给的两样本求判别函数 (可取C=1或C=2) 。</li><li>用势函数算法对题1所给的两样本求判别函数。</li></ol><p>代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">np1 = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line">np2 = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">new_np1 = np.c_[np1, np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])]</span><br><span class="line">new_np2 = np.c_[np2, np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(new_np1)</span></span><br><span class="line"><span class="comment"># print(new_np2)</span></span><br><span class="line">C = <span class="number">1</span></span><br><span class="line">args = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">question1</span><span class="params">()</span>:</span></span><br><span class="line">    w = dict()</span><br><span class="line">    w[<span class="number">1</span>] = np.array([<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">0</span>])</span><br><span class="line">    change_w = list()</span><br><span class="line"></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    error = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> error != <span class="number">0</span>:</span><br><span class="line">        error = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> new_np1:</span><br><span class="line">            <span class="comment"># 在new_np1中的计算结果必须&gt;0，惩罚为+C*row</span></span><br><span class="line">            <span class="comment"># if (w[i] * row).sum() &gt; 0:</span></span><br><span class="line">            <span class="keyword">if</span> w[i].dot(row) &gt; <span class="number">0</span>:</span><br><span class="line">                w[i + <span class="number">1</span>] = w[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                w[i + <span class="number">1</span>] = w[i] + C * row</span><br><span class="line">                error += <span class="number">1</span></span><br><span class="line">                print(<span class="string">"the new w[%s] is :%s"</span> % (i + <span class="number">1</span>, str(w[i + <span class="number">1</span>])))</span><br><span class="line">                change_w.append(w[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> new_np2:</span><br><span class="line">            <span class="comment"># 在new_np1中的计算结果必须&lt;0，惩罚为-C*row</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if (w[i] * row).sum() &lt; 0:</span></span><br><span class="line">            <span class="keyword">if</span> w[i].dot(row) &lt; <span class="number">0</span>:</span><br><span class="line">                w[i + <span class="number">1</span>] = w[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                w[i + <span class="number">1</span>] = w[i] - C * row</span><br><span class="line">                error += <span class="number">1</span></span><br><span class="line">                print(<span class="string">"the new w[%s] is :%s"</span> % (i + <span class="number">1</span>, str(w[i + <span class="number">1</span>])))</span><br><span class="line">                change_w.append(w[i + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    print(w)</span><br><span class="line">    <span class="keyword">return</span> change_w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">question2</span><span class="params">(w)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> np_w <span class="keyword">in</span> w[<span class="number">-1</span>:]:</span><br><span class="line">        fig = plt.figure()</span><br><span class="line">        ax = Axes3D(fig)</span><br><span class="line">        ax.scatter(np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]), np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]), np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]), c=<span class="string">'red'</span>, marker=<span class="string">'o'</span>)</span><br><span class="line">        ax.scatter(np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]), np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]), np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]), c=<span class="string">'blue'</span>, marker=<span class="string">'^'</span>)</span><br><span class="line">        print(np_w)</span><br><span class="line">        <span class="comment"># 生成[0，2] 间隔0.5的数列，间隔越小，曲面越平滑</span></span><br><span class="line">        X = np.arange(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0.5</span>)</span><br><span class="line">        Y = np.arange(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0.5</span>)</span><br><span class="line">        <span class="comment"># 原为F(x)= ax1+bx2+cx3+d,x3作为z放到左边,右边全为负且需要除以参数c</span></span><br><span class="line">        X_arg = np_w[<span class="number">0</span>] / np_w[<span class="number">2</span>]</span><br><span class="line">        Y_arg = np_w[<span class="number">1</span>] / np_w[<span class="number">2</span>]</span><br><span class="line">        H = np_w[<span class="number">3</span>] / np_w[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 格点矩阵</span></span><br><span class="line">        X, Y = np.meshgrid(X, Y)</span><br><span class="line">        Z = - X * X_arg - Y * Y_arg - H</span><br><span class="line">        ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line"></span><br><span class="line">        ax.set_xlabel(<span class="string">'X Label'</span>)</span><br><span class="line"></span><br><span class="line">        ax.set_ylabel(<span class="string">'Y Label'</span>)</span><br><span class="line"></span><br><span class="line">        ax.set_zlabel(<span class="string">'Z Label'</span>)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">question3</span><span class="params">()</span>:</span></span><br><span class="line">    C = <span class="number">2</span></span><br><span class="line">    lmse_np = np.concatenate((new_np1, -new_np2), axis=<span class="number">0</span>)</span><br><span class="line">    lmse_pinv_np = np.linalg.pinv(lmse_np)</span><br><span class="line">    b = dict()</span><br><span class="line">    print(lmse_pinv_np)</span><br><span class="line">    b[<span class="number">1</span>] = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">    w = dict()</span><br><span class="line">    w[<span class="number">1</span>] = lmse_pinv_np @ b[<span class="number">1</span>]</span><br><span class="line">    e = dict()</span><br><span class="line">    e[<span class="number">1</span>] = lmse_np @ w[<span class="number">1</span>] - b[<span class="number">1</span>]</span><br><span class="line">    print(e[<span class="number">1</span>])</span><br><span class="line">    error = <span class="number">1</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 向量的模 np.sum(vector**2)**0.5</span></span><br><span class="line">    <span class="keyword">while</span> error != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> all(e[i] &lt;= <span class="number">0.01</span>):</span><br><span class="line">            error = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b[i + <span class="number">1</span>] = b[i] + C * (e[i] + abs(e[i]))</span><br><span class="line">            w[i + <span class="number">1</span>] = lmse_pinv_np @ b[i + <span class="number">1</span>]</span><br><span class="line">            e[i + <span class="number">1</span>] = lmse_np @ w[i + <span class="number">1</span>] - b[i + <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># print(e[i])</span></span><br><span class="line">            print(<span class="string">"b[%s]:%s"</span> % (i, b[i]))</span><br><span class="line">            print(<span class="string">"w[%s]:%s"</span> % (i, w[i]))</span><br><span class="line">            print(<span class="string">"e[%s]:%s"</span> % (i, e[i]))</span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># np.around()四舍五入取近似值</span></span><br><span class="line">    print(<span class="string">"判别函数为："</span> + str(np.around(w[i])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z, args=args)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> args:</span><br><span class="line">        sum += l[<span class="number">3</span>] * np.exp(-((x - l[<span class="number">0</span>]) ** <span class="number">2</span> + (y - l[<span class="number">1</span>]) ** <span class="number">2</span> + (z - l[<span class="number">2</span>]) ** <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_implicit</span><span class="params">(fn, bbox=<span class="params">(<span class="number">-1</span>, <span class="number">1</span>)</span>)</span>:</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line">    <span class="string">''' create a plot of an implicit function</span></span><br><span class="line"><span class="string">    fn ...implicit function (plot where fn==0)</span></span><br><span class="line"><span class="string">    bbox ..the x,y,and z limits of plotted interval'''</span></span><br><span class="line">    xmin, xmax, ymin, ymax, zmin, zmax = bbox * <span class="number">3</span></span><br><span class="line">    A = np.linspace(xmin, xmax, <span class="number">100</span>)  <span class="comment"># resolution of the contour</span></span><br><span class="line">    B = np.linspace(xmin, xmax, <span class="number">15</span>)  <span class="comment"># number of slices</span></span><br><span class="line">    A1, A2 = np.meshgrid(A, A)  <span class="comment"># grid on which the contour is plotted</span></span><br><span class="line"></span><br><span class="line">    ax.scatter(np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]), np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]), np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]), c=<span class="string">'red'</span>, marker=<span class="string">'o'</span>)</span><br><span class="line">    ax.scatter(np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]), np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]), np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]), c=<span class="string">'blue'</span>, marker=<span class="string">'^'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> B:  <span class="comment"># plot contours in the XY plane</span></span><br><span class="line">        X, Y = A1, A2</span><br><span class="line">        Z = fn(X, Y, z)</span><br><span class="line">        cset = ax.contour(X, Y, Z + z, [z], zdir=<span class="string">'z'</span>)</span><br><span class="line">    <span class="comment"># [z] defines the only level to plot for this contour for this value of z</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> B:  <span class="comment"># plot contours in the XZ plane</span></span><br><span class="line">        X, Z = A1, A2</span><br><span class="line">        Y = fn(X, y, Z)</span><br><span class="line">        cset = ax.contour(X, Y + y, Z, [y], zdir=<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> B:  <span class="comment"># plot contours in the YZ plane</span></span><br><span class="line">        Y, Z = A1, A2</span><br><span class="line">        X = fn(x, Y, Z)</span><br><span class="line">        cset = ax.contour(X + x, Y, Z, [x], zdir=<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># must set plot limits because the contour will likely extend</span></span><br><span class="line">    <span class="comment"># way beyond the displayed level. Otherwise matplotlib extends the plot limits</span></span><br><span class="line">    <span class="comment"># to encompass all values in the contour.</span></span><br><span class="line">    ax.set_zlim3d(zmin, zmax)</span><br><span class="line">    ax.set_xlim3d(xmin, xmax)</span><br><span class="line">    ax.set_ylim3d(ymin, ymax)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">question4</span><span class="params">()</span>:</span></span><br><span class="line">    error = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> error != <span class="number">0</span>:</span><br><span class="line">        error = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> f_arg <span class="keyword">in</span> np1:</span><br><span class="line">            <span class="keyword">if</span> f(f_arg[<span class="number">0</span>], f_arg[<span class="number">1</span>], f_arg[<span class="number">2</span>]) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                args.append([f_arg[<span class="number">0</span>], f_arg[<span class="number">1</span>], f_arg[<span class="number">2</span>], <span class="number">1</span>])</span><br><span class="line">                print(<span class="string">"修正："</span> + str(args))</span><br><span class="line">                error = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> f_arg <span class="keyword">in</span> np2:</span><br><span class="line">            <span class="keyword">if</span> f(f_arg[<span class="number">0</span>], f_arg[<span class="number">1</span>], f_arg[<span class="number">2</span>]) &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                args.append([f_arg[<span class="number">0</span>], f_arg[<span class="number">1</span>], f_arg[<span class="number">2</span>], <span class="number">-1</span>])</span><br><span class="line">                print(<span class="string">"修正："</span> + str(args))</span><br><span class="line">                error = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    plot_implicit(f, bbox=(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list_for_q2 = question1()</span><br><span class="line">    question2(list_for_q2)</span><br><span class="line">    question3()</span><br><span class="line">    question4()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;以下述两类模式为样本，用感知器算法求判别函数：ω1:{(0 0 0)t,(1 0 0)t,(1 0 1)t,(1 1 0)t}; ω2:{(0 0 1)t,(0 1 1)t,(0 1 0)t,(1 1 1)t}.且令W(1)=(-1 –2 –2 0)t， C=1
      
    
    </summary>
    
      <category term="机器学习" scheme="https://snjl.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://snjl.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="感知器算法" scheme="https://snjl.github.io/tags/%E6%84%9F%E7%9F%A5%E5%99%A8%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>react：设置global变量</title>
    <link href="https://snjl.github.io/2018/12/07/react%EF%BC%9A%E8%AE%BE%E7%BD%AEglobal%E5%8F%98%E9%87%8F/"/>
    <id>https://snjl.github.io/2018/12/07/react：设置global变量/</id>
    <published>2018-12-07T15:27:05.000Z</published>
    <updated>2018-12-07T15:27:20.280Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个config.js，在其他react的js文件中引入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">global.serverConfig = &#123;</span><br><span class="line">    domainName:<span class="string">'http://localhost'</span>,</span><br><span class="line">    port:<span class="string">'2222'</span>,</span><br><span class="line">    project:<span class="string">'project'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">global.server = &#123;</span><br><span class="line">    host:global.serverConfig.domainName + <span class="string">':'</span> + global.serverConfig.port + <span class="string">'/'</span> + global.serverConfig.project + <span class="string">'/'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>即<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global.server.host = <span class="string">'httpL//localhost:2222/project/'</span></span><br></pre></td></tr></table></figure></p><p>其他react的js文件中引入并可以直接调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'/config'</span></span><br><span class="line"></span><br><span class="line">alert(global.server.host)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建一个config.js，在其他react的js文件中引入：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
      
    
    </summary>
    
      <category term="react" scheme="https://snjl.github.io/categories/react/"/>
    
    
      <category term="前端" scheme="https://snjl.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://snjl.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react：搜索中设置回车搜索和点击搜索</title>
    <link href="https://snjl.github.io/2018/12/07/react%EF%BC%9A%E6%90%9C%E7%B4%A2%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%9B%9E%E8%BD%A6%E6%90%9C%E7%B4%A2%E5%92%8C%E7%82%B9%E5%87%BB%E6%90%9C%E7%B4%A2/"/>
    <id>https://snjl.github.io/2018/12/07/react：搜索中设置回车搜索和点击搜索/</id>
    <published>2018-12-07T15:26:23.000Z</published>
    <updated>2018-12-07T15:27:08.198Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com_search</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            code: <span class="string">''</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleUsernameChange (event) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            code: event.target.value</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    triggerSearch()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.code.trim());</span><br><span class="line">    &#125;</span><br><span class="line">    keyDownSearch()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.event.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.code.trim());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"search-panel"</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">"content"</span>&gt;</span><br><span class="line">                    &lt;a href=<span class="string">'/index'</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"logo"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">                    &lt;div className=<span class="string">"search-wrap"</span>&gt;</span><br><span class="line">                        &lt;input placeholder=<span class="string">"请输入关键词"</span> onKeyDown=&#123;<span class="keyword">this</span>.keyDownSearch.bind(<span class="keyword">this</span>)&#125; defaultValue=&#123;<span class="keyword">this</span>.state.code&#125; onChange=&#123;<span class="keyword">this</span>.handleUsernameChange.bind(<span class="keyword">this</span>)&#125; /&gt;</span><br><span class="line">                        &lt;div className=<span class="string">"butn"</span>  onClick=&#123;<span class="keyword">this</span>.triggerSearch.bind(<span class="keyword">this</span>)&#125; &gt;搜索&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>div&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Com_search;</span><br></pre></td></tr></table></figure><p>搜索框使用onKeyDown方法，在keyDownSearch中判断按键是否为回车，回车即调用；</p><p>点击div的搜索，即调用onClick方法，直接进行搜索。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="react" scheme="https://snjl.github.io/categories/react/"/>
    
    
      <category term="前端" scheme="https://snjl.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://snjl.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react：form的textarea</title>
    <link href="https://snjl.github.io/2018/12/04/react%EF%BC%9Aform%E7%9A%84textarea/"/>
    <id>https://snjl.github.io/2018/12/04/react：form的textarea/</id>
    <published>2018-12-04T14:41:28.000Z</published>
    <updated>2018-12-04T14:41:44.777Z</updated>
    
    <content type="html"><![CDATA[<p>使用react框架的form表单，input标签填入this.state的值的时候，要用defaultValue，使用value属性会报错；</p><p>但是使用textarea，要使用value属性，使用defaultValue属性不能显示this.state的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用react框架的form表单，input标签填入this.state的值的时候，要用defaultValue，使用value属性会报错；&lt;/p&gt;
&lt;p&gt;但是使用textarea，要使用value属性，使用defaultValue属性不能显示this.state的值。&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="https://snjl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://snjl.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://snjl.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>springboot：测试，打包，部署</title>
    <link href="https://snjl.github.io/2018/12/03/springboot%EF%BC%9A%E6%B5%8B%E8%AF%95%EF%BC%8C%E6%89%93%E5%8C%85%EF%BC%8C%E9%83%A8%E7%BD%B2/"/>
    <id>https://snjl.github.io/2018/12/03/springboot：测试，打包，部署/</id>
    <published>2018-12-03T15:50:47.000Z</published>
    <updated>2018-12-03T15:52:04.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h1><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ol><li><p>在pom包中添加spring-boot-starter-test包引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开发测试类</p></li></ol><p>以最简单的helloworld为例，在测试类的类头部需要添加：@RunWith(SpringRunner.class)和@SpringBootTest注解，在测试方法的顶端添加@Test即可，最后在方法上点击右键run就可以运行。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际使用中，可以按照项目的正常使用去注入dao层代码或者是service层代码进行测试验证，spring-boot-starter-test提供很多基础用法，更难得的是增加了对Controller层测试的支持。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单验证结果集是否正确</span></span><br><span class="line">Assert.assertEquals(<span class="number">3</span>, userMapper.getAll().size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证结果集，提示</span></span><br><span class="line">Assert.assertTrue(<span class="string">"错误，正确的返回值为200"</span>, status == <span class="number">200</span>); </span><br><span class="line">Assert.assertFalse(<span class="string">"错误，正确的返回值为200"</span>, status != <span class="number">200</span>);</span><br></pre></td></tr></table></figure></p><p>引入了MockMvc支持了对Controller层的测试，简单示例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControlerTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化执行</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证controller是否正常响应并打印返回结果</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//验证controller是否正常响应并判断返回结果是否正确</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"Hello World"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单元测试是验证你代码第一道屏障，要养成每写一部分代码就进行单元测试的习惯，不要等到全部集成后再进行测试，集成后因为更关注整体运行效果，很容易遗漏掉代码底层的bug。</p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>一般分为两种；一种是打包成jar包直接执行，另一种是打包成war包放到tomcat服务器下。</p><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>如果你使用的是maven来管理项目，执行以下命令既可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd 项目跟目录（和pom.xml同级）</span><br><span class="line">mvn clean package</span><br><span class="line">## 或者执行下面的命令</span><br><span class="line">## 排除测试代码后进行打包</span><br><span class="line">mvn clean package  -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></p><p>打包完成后jar包会生成到target目录下，命名一般是 项目名+版本号.jar</p><p>弃用jar包命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar  target/spring-boot-scheduler-1.0.0.jar</span><br></pre></td></tr></table></figure></p><p>这种方式，只要控制台关闭，服务就不能访问了。下面我们使用在后台运行的方式来启动:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar target/spring-boot-scheduler-1.0.0.jar &amp;</span><br></pre></td></tr></table></figure></p><p>也可以在启动的时候选择读取不同的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar app.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure></p><p>也可以在启动的时候设置jvm参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms10m -Xmx80m -jar app.jar &amp;</span><br></pre></td></tr></table></figure></p><h2 id="打成war包"><a href="#打成war包" class="headerlink" title="打成war包"></a>打成war包</h2><p>打成war包一般可以分两种方式来实现，第一种可以通过eclipse这种开发工具来导出war包，另外一种是使用命令来完成，这里主要介绍后一种</p><ol><li>maven项目，修改pom包</li><li>将<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></li></ol><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>打包时排除tomcat.<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>在这里将scope属性设置为provided，这样在最终形成的WAR中不会包含这个JAR包，因为Tomcat或Jetty等服务器在运行时将会提供相关的API类。</p><ol start="3"><li>注册启动类</li></ol><p>创建ServletInitializer.java，继承SpringBootServletInitializer ，覆盖configure()，把启动类Application注册进去。外部web应用服务器构建Web Application Context的时候，会把启动类添加进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class ServletInitializer extends SpringBootServletInitializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line">        return application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package  -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></p><p>会在target目录下生成：项目名+版本号.war文件，拷贝到tomcat服务器中启动即可。</p><h1 id="生产运维"><a href="#生产运维" class="headerlink" title="生产运维"></a>生产运维</h1><h2 id="查看JVM参数"><a href="#查看JVM参数" class="headerlink" title="查看JVM参数"></a>查看JVM参数</h2><p>可以根据java自带的jinfo命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flags pid</span><br></pre></td></tr></table></figure></p><p>来查看jar 启动后使用的是什么gc、新生代、老年代分批的内存都是多少，示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:CICompilerCount=3 -XX:InitialHeapSize=234881024 -XX:MaxHeapSize=3743416320 -XX:MaxNewSize=1247805440 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=78118912 -XX:OldSize=156762112 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC</span><br></pre></td></tr></table></figure></p><ul><li>-XX:CICompilerCount ：最大的并行编译数</li><li>-XX:InitialHeapSize 和 -XX:MaxHeapSize ：指定JVM的初始和最大堆内存大小</li><li>-XX:MaxNewSize ： JVM堆区域新生代内存的最大可分配大小</li><li>…</li><li>-XX:+UseParallelGC ：垃圾回收使用Parallel收集器</li></ul><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>直接kill掉进程再次启动jar包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep java </span><br><span class="line">##拿到对于Java程序的pid</span><br><span class="line">kill -9 pid</span><br><span class="line">## 再次重启</span><br><span class="line">Java -jar  xxxx.jar</span><br></pre></td></tr></table></figure></p><h2 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h2><p>如果使用的是maven,需要包含以下的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;executable&gt;true&lt;/executable&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p><p>启动方式：</p><ol><li>可以直接./yourapp.jar 来启动</li><li>注册为服务</li></ol><p>也可以做一个软链接指向你的jar包并加入到init.d中，然后用命令来启动。</p><p>init.d 例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /var/yourapp/yourapp.jar /etc/init.d/yourapp</span><br><span class="line">chmod +x /etc/init.d/yourapp</span><br></pre></td></tr></table></figure></p><p>这样就可以使用stop或者是restart命令去管理你的应用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/yourapp start|stop|restart</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service yourapp start|stop|restart</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发阶段&quot;&gt;&lt;a href=&quot;#开发阶段&quot; class=&quot;headerlink&quot; title=&quot;开发阶段&quot;&gt;&lt;/a&gt;开发阶段&lt;/h1&gt;&lt;h2 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在pom包中添加spring-boot-starter-test包引用&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开发测试类&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以最简单的helloworld为例，在测试类的类头部需要添加：@RunWith(SpringRunner.class)和@SpringBootTest注解，在测试方法的顶端添加@Test即可，最后在方法上点击右键run就可以运行。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="部署" scheme="https://snjl.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="测试" scheme="https://snjl.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>springboot：mybatis多数据源</title>
    <link href="https://snjl.github.io/2018/12/03/springboot%EF%BC%9Amybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>https://snjl.github.io/2018/12/03/springboot：mybatis多数据源/</id>
    <published>2018-12-03T15:49:48.000Z</published>
    <updated>2018-12-03T15:50:34.587Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.mulidatasource.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.mulidatasource.git</a></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>数据库配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mybatis.config-locations=classpath:mybatis/mybatis-config.xml</span><br><span class="line"></span><br><span class="line">spring.datasource.test1.driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.test1.url = jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=true&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">spring.datasource.test1.username = root</span><br><span class="line">spring.datasource.test1.password = 123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring.datasource.test2.driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.test2.url = jdbc:mysql://localhost:3306/spring2?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=true&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">spring.datasource.test2.username = root</span><br><span class="line">spring.datasource.test2.password = 123456</span><br></pre></td></tr></table></figure></p><p>一个test1库和一个test2库，其中test1位主库，在使用的过程中必须指定主库，不然会报错。</p><a id="more"></a><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.neo.mapper.test1"</span>, sqlSessionTemplateRef  = <span class="string">"test1SqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSource1Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"test1DataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.test1"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"test1SqlSessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">testSqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"test1DataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mybatis/mapper/test1/*.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"test1TransactionManager"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">testTransactionManager</span><span class="params">(@Qualifier(<span class="string">"test1DataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"test1SqlSessionTemplate"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">testSqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"test1SqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键的地方就是这块了，一层一层注入,首先创建DataSource，然后创建SqlSessionFactory再创建事务，最后包装到SqlSessionTemplate中。其中需要指定分库的mapper文件地址，以及分库dao层代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.neo.mapper.test1"</span>, sqlSessionTemplateRef  = <span class="string">"test1SqlSessionTemplate"</span>)</span><br></pre></td></tr></table></figure></p><p>这块的注解就是指明了扫描dao层，并且给dao层注入指定的SqlSessionTemplate。所有@Bean都需要按照命名指定正确。</p><h1 id="dao层和xml层"><a href="#dao层和xml层" class="headerlink" title="dao层和xml层"></a>dao层和xml层</h1><p>dao层和xml需要按照库来分在不同的目录，比如：test1库dao层在com.neo.mapper.test1包下，test2库在com.neo.mapper.test1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User1Mapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;UserEntity&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">UserEntity <span class="title">getOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(UserEntity user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(UserEntity user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>xml层：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.neo.mapper.test1.User1Mapper"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.neo.entity.UserEntity"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"passWord"</span> <span class="attr">property</span>=<span class="string">"passWord"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_sex"</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">javaType</span>=<span class="string">"com.neo.enums.UserSexEnum"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"nick_name"</span> <span class="attr">property</span>=<span class="string">"nickName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span> &gt;</span></span><br><span class="line">        id, userName, passWord, user_sex, nick_name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>  &gt;</span></span><br><span class="line">       SELECT </span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">   FROM users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOne"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> &gt;</span></span><br><span class="line">        SELECT </span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">   FROM users</span><br><span class="line">   WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.neo.entity.UserEntity"</span> &gt;</span></span><br><span class="line">       INSERT INTO </span><br><span class="line">       users</span><br><span class="line">       (userName,passWord,user_sex) </span><br><span class="line">       VALUES</span><br><span class="line">       (#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.neo.entity.UserEntity"</span> &gt;</span></span><br><span class="line">       UPDATE </span><br><span class="line">       users </span><br><span class="line">       SET </span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span>userName = #&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"passWord != null"</span>&gt;</span>passWord = #&#123;passWord&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       nick_name = #&#123;nickName&#125;</span><br><span class="line">       WHERE </span><br><span class="line">       id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> &gt;</span></span><br><span class="line">       DELETE FROM</span><br><span class="line">        users </span><br><span class="line">       WHERE </span><br><span class="line">        id =#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h1><p>测试可以使用SpringBootTest,也可以放到Controller中，这里只贴Controller层的使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User1Mapper user1Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> User2Mapper user2Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUsers"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;UserEntity&gt; users=user1Mapper.getAll();</span><br><span class="line"><span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    UserEntity user=user2Mapper.getOne(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(UserEntity user)</span> </span>&#123;</span><br><span class="line">        user2Mapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(UserEntity user)</span> </span>&#123;</span><br><span class="line">        user2Mapper.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        user1Mapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/getusers.png" alt="image"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/getuser1.png" alt="image"></p><p>分别用的是数据源1，数据源2。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.mulidatasource.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.mulidatasource.git&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h1&gt;&lt;p&gt;数据库配置：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mybatis.config-locations=classpath:mybatis/mybatis-config.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test1.driverClassName = com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test1.url = jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=UTC&amp;amp;useSSL=true&amp;amp;zeroDateTimeBehavior=convertToNull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test1.username = root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test1.password = 123456&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test2.driverClassName = com.mysql.jdbc.Driver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test2.url = jdbc:mysql://localhost:3306/spring2?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=UTC&amp;amp;useSSL=true&amp;amp;zeroDateTimeBehavior=convertToNull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test2.username = root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.datasource.test2.password = 123456&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个test1库和一个test2库，其中test1位主库，在使用的过程中必须指定主库，不然会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="数据库" scheme="https://snjl.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="mybatis" scheme="https://snjl.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>springboot：随机端口</title>
    <link href="https://snjl.github.io/2018/12/03/springboot%EF%BC%9A%E9%9A%8F%E6%9C%BA%E7%AB%AF%E5%8F%A3/"/>
    <id>https://snjl.github.io/2018/12/03/springboot：随机端口/</id>
    <published>2018-12-03T15:49:11.000Z</published>
    <updated>2018-12-03T15:49:29.880Z</updated>
    
    <content type="html"><![CDATA[<p>为Spring Cloud的应用实用随机端口非常简单，主要有两种方法：</p><p>设置server.port=0，当应用启动的时候会自动的分配一个随机端口，但是该方式在注册到Eureka的时候会一个问题：所有实例都使用了同样的实例名（如：Lenovo-test:hello-service:0），这导致只出现了一个实例。所以，我们还需要修改实例ID的定义，让每个实例的ID不同，比如使用随机数来配置实例ID：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=0</span><br><span class="line">eureka.instance.instance-id=$&#123;spring.application.name&#125;:$&#123;random.int&#125;</span><br></pre></td></tr></table></figure></p><p>除了上面的方法，实际上我们还可以直接使用random函数来配置server.port。这样就可以指定端口的取值范围，比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=$&#123;random.int[10000,19999]&#125;</span><br></pre></td></tr></table></figure></p><p>由于默认的实例ID会由server.port拼接，而此时server.port设置的随机值会重新取一次随机数，所以使用这种方法的时候不需要重新定义实例ID的规则就能产生不同的实例ID了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为Spring Cloud的应用实用随机端口非常简单，主要有两种方法：&lt;/p&gt;
&lt;p&gt;设置server.port=0，当应用启动的时候会自动的分配一个随机端口，但是该方式在注册到Eureka的时候会一个问题：所有实例都使用了同样的实例名（如：Lenovo-test:hell
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot：thymeleaf设置不校验html标签</title>
    <link href="https://snjl.github.io/2018/12/03/springboot%EF%BC%9Athymeleaf%E8%AE%BE%E7%BD%AE%E4%B8%8D%E6%A0%A1%E9%AA%8Chtml%E6%A0%87%E7%AD%BE/"/>
    <id>https://snjl.github.io/2018/12/03/springboot：thymeleaf设置不校验html标签/</id>
    <published>2018-12-03T15:48:38.000Z</published>
    <updated>2018-12-03T15:49:15.082Z</updated>
    
    <content type="html"><![CDATA[<p>默认配置下，thymeleaf对.html的内容要求很严格，比如，如果少封闭符号/，就会报错而转到错误页。也比如你在使用Vue.js这样的库，然后有<div v-cloak=""></div>这样的html代码，也会被thymeleaf认为不符合要求而抛出错误。</p><p>通过设置thymeleaf模板可以解决这个问题，下面是具体的配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.mode=LEGACYHTML5</span><br></pre></td></tr></table></figure></p><p>LEGACYHTML5需要搭配一个额外的库NekoHTML才可用 项目中使用的构建工具是Maven添加如下的依赖即可完成:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认配置下，thymeleaf对.html的内容要求很严格，比如，如果少封闭符号/，就会报错而转到错误页。也比如你在使用Vue.js这样的库，然后有&lt;div v-cloak=&quot;&quot;&gt;&lt;/div&gt;这样的html代码，也会被thymeleaf认为不符合要求而抛出错误。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot：task定时任务（二）</title>
    <link href="https://snjl.github.io/2018/12/03/springboot%EF%BC%9Atask%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://snjl.github.io/2018/12/03/springboot：task定时任务（二）/</id>
    <published>2018-12-03T15:47:30.000Z</published>
    <updated>2018-12-03T15:48:13.636Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.springtask2.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.springtask2.git</a></p><h1 id="pom包配置"><a href="#pom包配置" class="headerlink" title="pom包配置"></a>pom包配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="启动类启用定时"><a href="#启动类启用定时" class="headerlink" title="启动类启用定时"></a>启动类启用定时</h1><p>在启动类上面加上@EnableScheduling即可开启定时<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="创建定时任务实现类"><a href="#创建定时任务实现类" class="headerlink" title="创建定时任务实现类"></a>创建定时任务实现类</h1><p>定时任务1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/6 * * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is scheduler task runing  "</span>+(count++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定时任务2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scheduler2Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">6000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"现在时间："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this is scheduler task runing  0</span><br><span class="line">现在时间：09:44:17</span><br><span class="line">this is scheduler task runing  1</span><br><span class="line">现在时间：09:44:23</span><br><span class="line">this is scheduler task runing  2</span><br><span class="line">现在时间：09:44:29</span><br><span class="line">this is scheduler task runing  3</span><br><span class="line">现在时间：09:44:35</span><br></pre></td></tr></table></figure></p><h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><p>@Scheduled 参数可以接受两种定时的设置，一种是我们常用的cron=”<em>/6 </em> <em> </em> * ?”,一种是 fixedRate = 6000，两种都表示每隔六秒打印一下内容。</p><h2 id="fixeRate说明"><a href="#fixeRate说明" class="headerlink" title="fixeRate说明"></a>fixeRate说明</h2><ul><li>@Scheduled(fixedRate = 6000) ：上一次开始执行时间点之后6秒再执行</li><li>@Scheduled(fixedDelay = 6000) ：上一次执行完毕时间点之后6秒再执行</li><li>@Scheduled(initialDelay=1000, fixedRate=6000) ：第一次延迟1秒后执行，之后按fixedRate的规则每6秒执行一次</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.springtask2.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.sprin
      
    
    </summary>
    
      <category term="spring" scheme="https://snjl.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://snjl.github.io/tags/spring/"/>
    
      <category term="定时" scheme="https://snjl.github.io/tags/%E5%AE%9A%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>springboot：解决分页插件ClassNotFoundException</title>
    <link href="https://snjl.github.io/2018/12/02/springboot%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6ClassNotFoundException/"/>
    <id>https://snjl.github.io/2018/12/02/springboot：解决分页插件ClassNotFoundException/</id>
    <published>2018-12-02T15:53:43.000Z</published>
    <updated>2018-12-02T15:54:36.700Z</updated>
    
    <content type="html"><![CDATA[<p>报错：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration&apos;: Post-processing of merged bean definition failed; nested exception is java.lang.IllegalStateException: Failed to introspect Class [com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration] from ClassLoader [sun.misc.Launcher$AppClassLoader@2f4d3709]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:558) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140) ~[spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:327) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1255) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1243) [spring-boot-2.0.3.RELEASE.jar:2.0.3.RELEASE]</span><br><span class="line">at com.lee.www.DemoApplication.main(DemoApplication.java:14) [classes/:na]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_161]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_161]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_161]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_161]</span><br><span class="line">at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) [idea_rt.jar:na]</span><br><span class="line">Caused by: java.lang.IllegalStateException: Failed to introspect Class [com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration] from ClassLoader [sun.misc.Launcher$AppClassLoader@2f4d3709]</span><br><span class="line">at org.springframework.util.ReflectionUtils.getDeclaredFields(ReflectionUtils.java:758) ~[spring-core-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.util.ReflectionUtils.doWithLocalFields(ReflectionUtils.java:690) ~[spring-core-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.buildResourceMetadata(CommonAnnotationBeanPostProcessor.java:355) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.findResourceMetadata(CommonAnnotationBeanPostProcessor.java:339) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(CommonAnnotationBeanPostProcessor.java:298) ~[spring-context-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:1022) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555) ~[spring-beans-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">... 20 common frames omitted</span><br><span class="line">Caused by: java.lang.NoClassDefFoundError: Lorg/springframework/boot/bind/RelaxedPropertyResolver;</span><br><span class="line">at java.lang.Class.getDeclaredFields0(Native Method) ~[na:1.8.0_161]</span><br><span class="line">at java.lang.Class.privateGetDeclaredFields(Class.java:2583) ~[na:1.8.0_161]</span><br><span class="line">at java.lang.Class.getDeclaredFields(Class.java:1916) ~[na:1.8.0_161]</span><br><span class="line">at org.springframework.util.ReflectionUtils.getDeclaredFields(ReflectionUtils.java:753) ~[spring-core-5.0.7.RELEASE.jar:5.0.7.RELEASE]</span><br><span class="line">... 26 common frames omitted</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.springframework.boot.bind.RelaxedPropertyResolver</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_161]</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_161]</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338) ~[na:1.8.0_161]</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_161]</span><br><span class="line">... 30 common frames omitted</span><br></pre></td></tr></table></figure><p>重点是ClassNotFoundException: org.springframework.boot.bind.RelaxedPropertyResolver。</p><p>原版本为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>升级为1.2.3即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;报错：&lt;/p&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="报错" scheme="https://snjl.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>springboot：日期错误Zero date value prohibited 异常的解决方法</title>
    <link href="https://snjl.github.io/2018/12/02/springboot%EF%BC%9A%E6%97%A5%E6%9C%9F%E9%94%99%E8%AF%AFZero-date-value-prohibited-%E5%BC%82%E5%B8%B8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://snjl.github.io/2018/12/02/springboot：日期错误Zero-date-value-prohibited-异常的解决方法/</id>
    <published>2018-12-02T15:53:09.000Z</published>
    <updated>2018-12-02T15:53:30.832Z</updated>
    
    <content type="html"><![CDATA[<p>实际的错误还应该有：<br>java.sql.SQLException: Value ‘0000-00-00’ can not be represented as java.sql.Date</p><p>更改jdbc连接为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://yourserver:3306/yourdatabase?zeroDateTimeBehavior=convertToNull</span><br></pre></td></tr></table></figure></p><p>即设置zeroDateTimeBehavior=convertToNull</p><p>设置zeroDateTimeBehavior 属性，当遇到DATETIME值完全由0组成时，最终的有效值可以设置为，异常(exception)，一个近似值(round)，或将这个值转换为null(convertToNull)。</p><p>使用convertToNull，返回null来替代0000-00-00这样的日期。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实际的错误还应该有：&lt;br&gt;java.sql.SQLException: Value ‘0000-00-00’ can not be represented as java.sql.Date&lt;/p&gt;
&lt;p&gt;更改jdbc连接为：&lt;br&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="报错" scheme="https://snjl.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>springboot：项目修改访问端口和访问路径</title>
    <link href="https://snjl.github.io/2018/12/02/springboot%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9%E8%AE%BF%E9%97%AE%E7%AB%AF%E5%8F%A3%E5%92%8C%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84/"/>
    <id>https://snjl.github.io/2018/12/02/springboot：项目修改访问端口和访问路径/</id>
    <published>2018-12-02T15:51:19.000Z</published>
    <updated>2018-12-02T15:53:08.682Z</updated>
    
    <content type="html"><![CDATA[<p>创建SpringBoot项目，启动后，默认的访问路径即主机IP+默认端口号8080。</p><h1 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h1><h2 id="使用properties文件方式："><a href="#使用properties文件方式：" class="headerlink" title="使用properties文件方式："></a>使用properties文件方式：</h2><p>在src/main/resoutces目录下创建：application.properties，添加如下配置即可修改端口号：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8088</span><br></pre></td></tr></table></figure></p><h2 id="使用yml文件方式："><a href="#使用yml文件方式：" class="headerlink" title="使用yml文件方式："></a>使用yml文件方式：</h2><p>在src/main/resoutces目录下创建：application.yml，添加如下配置即可修改端口号：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port:8088</span><br></pre></td></tr></table></figure></p><h1 id="修改项目访问路径"><a href="#修改项目访问路径" class="headerlink" title="修改项目访问路径"></a>修改项目访问路径</h1><h2 id="使用properties文件方式：-1"><a href="#使用properties文件方式：-1" class="headerlink" title="使用properties文件方式："></a>使用properties文件方式：</h2><p>在application.properties，添加如下配置即可修改项目访问路径：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet.context-path=/test</span><br></pre></td></tr></table></figure></p><h2 id="使用yml文件方式：-1"><a href="#使用yml文件方式：-1" class="headerlink" title="使用yml文件方式："></a>使用yml文件方式：</h2><p>在src/main/resoutces目录下创建：application.yml，添加如下配置即可修改端口号：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port:8088</span><br><span class="line">  servlet:</span><br><span class="line">    context-path:/test</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建SpringBoot项目，启动后，默认的访问路径即主机IP+默认端口号8080。&lt;/p&gt;
&lt;h1 id=&quot;修改端口号&quot;&gt;&lt;a href=&quot;#修改端口号&quot; class=&quot;headerlink&quot; title=&quot;修改端口号&quot;&gt;&lt;/a&gt;修改端口号&lt;/h1&gt;&lt;h2 id=&quot;使用p
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot：报错Invalid CORS request， CORS 跨域请求设置</title>
    <link href="https://snjl.github.io/2018/12/02/springboot%EF%BC%9A%E6%8A%A5%E9%94%99Invalid-CORS-request%EF%BC%8C-CORS-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%AE%BE%E7%BD%AE/"/>
    <id>https://snjl.github.io/2018/12/02/springboot：报错Invalid-CORS-request，-CORS-跨域请求设置/</id>
    <published>2018-12-02T15:50:41.000Z</published>
    <updated>2018-12-03T15:46:41.790Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot提供的跨域配置有两种，一种是全局的，一种是具体到方法的。如果同时配置了那么具体方法的优先。</p><h1 id="全局跨域配置"><a href="#全局跨域配置" class="headerlink" title="全局跨域配置"></a>全局跨域配置</h1><p>提供一个自定义的WebMvcConfigurer bean，该bean的addCorsMappings方法中定义自己的跨域配置。<br>可以看到我的跨域配置是允许来自<a href="http://localhost:6677访问/user/users/*的方法。等程序运行后我们可以发现如果我们的前端使用http://127.0.0.1:6677" target="_blank" rel="noopener">http://localhost:6677访问/user/users/*的方法。等程序运行后我们可以发现如果我们的前端使用http://127.0.0.1:6677</a> 或者我们的前端运行在<a href="http://localhost:8080都无法通过rest访问对应的API（备注，示例程序提供了/user/users和/user/users/{userId}方法）" target="_blank" rel="noopener">http://localhost:8080都无法通过rest访问对应的API（备注，示例程序提供了/user/users和/user/users/{userId}方法）</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(CorsDemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"http://localhost:6677"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处，设置addMapping是设置访问路径（pathPattern—），设置了可以被跨域访问的路径和可以被哪些主机跨域访问，而不是设置包的路径。即包名为app.api.controller，但是controller里面的地址设置为/user/paper/<em>，/user/user/</em>，则这里应该写为/user/**。</p><h1 id="具体方法的跨域配置-CrossOrigin"><a href="#具体方法的跨域配置-CrossOrigin" class="headerlink" title="具体方法的跨域配置@CrossOrigin"></a>具体方法的跨域配置@CrossOrigin</h1><p>我们可以使用@CrossOrigin在具体的API上配置跨域设置。@CrossOrigin(origins = “<a href="http://localhost:9000”)表明该方法允许来自http://localhost:9000访问，也就是前端可以是localhost:9000。" target="_blank" rel="noopener">http://localhost:9000”)表明该方法允许来自http://localhost:9000访问，也就是前端可以是localhost:9000。</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"查询所有用户"</span>)</span><br><span class="line"> <span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://localhost:9000"</span>)</span><br><span class="line"> <span class="meta">@GetMapping</span>(value = <span class="string">"/users"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Iterable&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Collection&lt;User&gt; users = userMap.values();</span><br><span class="line">     <span class="keyword">return</span> users;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot提供的跨域配置有两种，一种是全局的，一种是具体到方法的。如果同时配置了那么具体方法的优先。&lt;/p&gt;
&lt;h1 id=&quot;全局跨域配置&quot;&gt;&lt;a href=&quot;#全局跨域配置&quot; class=&quot;headerlink&quot; title=&quot;全局跨域配置&quot;&gt;&lt;/a&gt;全局跨域配
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="跨域" scheme="https://snjl.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>java web项目中的dao，service层的接口的必要性</title>
    <link href="https://snjl.github.io/2018/12/01/java-web%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84dao%EF%BC%8Cservice%E5%B1%82%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/"/>
    <id>https://snjl.github.io/2018/12/01/java-web项目中的dao，service层的接口的必要性/</id>
    <published>2018-12-01T15:22:11.000Z</published>
    <updated>2018-12-01T15:22:52.090Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.jianshu.com/p/64abdd29bdf6" target="_blank" rel="noopener">https://www.jianshu.com/p/64abdd29bdf6</a></p><p><a href="https://www.zhihu.com/question/36021012" target="_blank" rel="noopener">https://www.zhihu.com/question/36021012</a></p><p>DAO接口<br>为每个DAO声明接口的好处在于：</p><p>可以在尚未实现具体DAO的时候编写上层代码,如Service里对DAO的调用<br>可以为DAO进行多实现,例如有JDBCDAO实现,MyBatisDAO实现,而不需要更改上层代码,只需要简单的在Spring的IoC配置里修改一下注入的DAO实现</p><a id="more"></a><p>Service接口</p><p>可以在尚未实现具体Service情况下编写上层改代码,如Controller对Service的调用<br>Spring无论是AOP还是事务管理的实现都是基于动态代理的,而动态代理的实现依赖于接口,所以必须有接口的定义才能使用这些功能<br>可以对Service进行多实现<br>总的来说,接口的优势就在于规范方法参数,返回值,另外可以实现多态,结合Spring来说接口对于使用Spring的各种功能也是不可或缺的</p><p>另外,使用接口对于测试代码也是有好处的,对于mock一个方法来说,我们不需要关注方法的具体实现,因为本来mock就会将方法内部实现置空,我们的关注点集中于方法参数以及返回值,所以使用接口对于快速实现流程上的测试是有好处的.</p><p>使用接口是为了调用与实现解耦，带来的好处是可以各干各的了，带来的坏处是从一个概念变成了两个概念，增加了系统的复杂度。衡量一下在具体场景中是弊大于利还是利大于弊，就可以做选择了。当然，在大部分场景下，还要考虑一个因素，就是你会不会写接口。没有良好接口设计能力的人，写出来的接口抽象不合理，等于没写，什么好处都得不到，只有坏处，这种情况下干脆别写。那怎么衡量你会不会写接口呢，我的经验是，至少见过一次写了接口后得到明确好处的例子。</p><p>什么情况下需要各干各的？</p><p>最简单的场景，写接口的是你，写实现的是你小弟。当然大多数类似情况没必要真的建一个interface然后再让人家去implements，把函数的第一行写好，注释写好，代码提交上，里面的内容让小弟去填就行了。</p><p>另一种情况，调用代码先于实现代码编写。比如你开发的是struts这种东西，那你指定得搞个Action接口。</p><p>再一种情况，多种业务的模式类似。此时这个接口类实际上相当于某一层的抽象。定义出一个层后，有多种实现，然后通过向调用端注入不同的实现类，实现不同的逻辑。如果这种注入不能在编译期完成的话，也就需要用接口抽象一下。</p><p>上面这几种情况写得有点绕，没办法，太难表述了并且好多事我自己也没想明白……</p><p>说到题目中的场景。</p><p>先说dao，这玩意儿是做数据库读写的。对应一下上面那几种情况：你作为项目架构师想写两行代码就让苦逼小弟加班干活然则自己去泡妹子的话，可能需要写个interface里面几个抽象的insert、delete之类的函数；项目在快速原型阶段如果客户满意就掏钱买oracle如果客户不满意就得免费MySQL的话，你可能需要定义个dao接口然后先用内存数据库写点能让原型跑起来的实现，等一切有定论了再说；每个类都有一个dao，每个dao都有crud基本方法的话你可能需要定义一个通用Dao接口然后搞点代码技巧不用一个个的去写体力代码从此登上人生巅峰。所以dao接口还是有用的。</p><p>再说service，这玩意儿更得具体问题具体分析。不去抠理论的话，什么是service，我的理解就是一段段实现了某个逻辑的代码的组合。所以service是个比dao更抽象的概念，严格来讲dao就是一种service。只不过在java web开发中，dao是个人人都得写的东西，所以都拿出来单说了。因此，后面说的service跟dao没有本质分别。</p><p>还是上面说的那几种情况：</p><p>先从工序上说，你在写上一层的时候，会用到下一层提供的逻辑，具体表现形式就是各种各样的service类和里面的方法。上一层开搞的时候，一定会知道的一个事是下一层会干什么事，比如“将传入编号对应的人员信息设置为离职”，但下一层的代码不一定已经一行一行写出来了。所以这会儿需要有个接口，让写上层代码的人先能把代码写下去。有各种理由可以支持这种工序的合理性，比如一般来说，上一层的一行代码会对应下一层的好多行代码，那先让写上层代码的人写一遍，解决高端层面的bug，会提高很多效率。</p><p>再从抽象角度说，不同业务模块之间的共用，不一定是共用某段代码，也可能是共用某段逻辑框架，这时候就需要抽象一个接口层出来，再通过不同的注入逻辑实现。比如模块1是登记学生信息，模块2是新闻发布，看上去风马牛不相及。但分析下来如果两个模块都有共同点，顺序都是1、验证是否有权限 2、验证输入参数是否合法 3、将输入参数转化为业务数据 4、数据库存取 5、写log，那就可以写一个service接口，里面有上述5个函数，再分别写两个service实现。具体执行的时候，通过各种注入方法，直接new也好，用spring注入也好，实现不同的效果。</p><p>当然上面说的这种情况很少有人这么干，因为已经普遍到这个程度，再精化精化就是struts了，java web的各种mvc框架都提供机制给你干这个事。但是每个项目或产品，都应该可以用类似的思路抽象出一些东西，如果抽象合理，会很大程度的提高项目架构的合理性。</p><p>这些要是能搞定，那什么写个接口然后实现个mock用于测试这种事，信手拈来。</p><p>JavaWeb 开发中，服务器端通常分为表示层、业务层、持久层，这就是所谓的三层架构。三层架构的每一层都有自己的开发模式，即架构模式。</p><p>其中，表示层一般是采用 MVC 架构模式，业务层有事务脚本模式、领域模型模式等，持久层有数据映射器模式（Hibernate即是典型的）、入口模式（iBatis、JDBC）。企业应用中最关键的显然是业务层。而对于初学者来说，事务脚本模式是最为简单，最容易掌握的。如果开发团队面向对象设计能力一般，而且业务逻辑相对简单，业务层一般都会采用事务脚本模式。为嘛？简单呀，是个人都能很快学会！（当然，如果业务逻辑复杂，用事务脚本模式就很不明智了。嗯，简单点讲，就是违背了单一职责设计原则，Service类成为万能的上帝，承担了太多职责。。。）<br>那么什么是事务脚本模式呢？<br>所谓事务，就是表示层的一个请求；所谓脚本就是一个方法或者一个函数；所谓事务脚本就是将一次请求封装为一个方法或者一个函数。</p><p>在事务脚本模式中，有三类对象。其中，Service类封装业务流程（或者说是界面上的业务流程），DAO类封装对持久层的访问，DTO类封装业务实体对象。各个对象之间的关系如上图所示，这就是所谓业务逻辑的组织方式。</p><p>为什么要用Service接口和DAO接口？我们还得回到最基本的面向对象设计原则上去。<br>面向对象设计原则中有三条与此相关：开闭原则、依赖倒转原则、理氏替换原则。还记得依赖倒转原则吧？高层不依赖于低层，二者都依赖于抽象，也就是面向接口编程。<br>为什么要用Service接口？是让表示层不依赖于业务层的具体实现。为什么要用DAO接口？是让业务层不依赖于持久层的具体实现。有了这两个接口，Spring IOC容器才能发挥作用。<br>举个例子，用DAO接口，那么持久层用Hibernate，还是用iBatis，还是 JDBC，随时可以替换，不用修改业务层Service类的代码。<br>使用接口的意义就在此。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://www.jianshu.com/p/64abdd29bdf6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/64abdd29bdf6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/36021012&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/36021012&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DAO接口&lt;br&gt;为每个DAO声明接口的好处在于：&lt;/p&gt;
&lt;p&gt;可以在尚未实现具体DAO的时候编写上层代码,如Service里对DAO的调用&lt;br&gt;可以为DAO进行多实现,例如有JDBCDAO实现,MyBatisDAO实现,而不需要更改上层代码,只需要简单的在Spring的IoC配置里修改一下注入的DAO实现&lt;/p&gt;
    
    </summary>
    
      <category term="理论" scheme="https://snjl.github.io/categories/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="理论" scheme="https://snjl.github.io/tags/%E7%90%86%E8%AE%BA/"/>
    
      <category term="思考" scheme="https://snjl.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>springboot：使用Swagger2构建强大的RESTful API文档</title>
    <link href="https://snjl.github.io/2018/12/01/springboot%EF%BC%9A%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BA%E5%BC%BA%E5%A4%A7%E7%9A%84RESTful-API%E6%96%87%E6%A1%A3/"/>
    <id>https://snjl.github.io/2018/12/01/springboot：使用Swagger2构建强大的RESTful-API文档/</id>
    <published>2018-12-01T15:21:05.000Z</published>
    <updated>2018-12-01T15:21:48.551Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.swagger2.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.swagger2.git</a></p><p>由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。</p><p>这样一来，我们的RESTful API就有可能要面对多个开发人员或多个开发团队：IOS开发、Android开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p><p>由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事，下游的抱怨声不绝于耳。<br>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。</p><a id="more"></a><p>为了解决上面这样的问题，本文将介绍RESTful API的重磅好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API。具体效果如下图所示：<br><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/swagger2_1.png" alt="image"></p><h1 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a>添加Swagger2依赖</h1><p>在pom.xml中加入Swagger2的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h1><p>在Application.java<strong>同级</strong>创建Swagger2的配置类Swagger2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.didispace;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.didispace.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"更多Spring Boot相关文章请关注：https://snjl.github.io/"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://snjl.github.io/"</span>)</span><br><span class="line">                .contact(<span class="string">"snjl"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上代码所示，通过@Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2。</p><p>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。</p><h1 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a>添加文档内容</h1><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.didispace.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.didispace.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>, paramType = <span class="string">"path"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>, paramType = <span class="string">"path"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>, paramType = <span class="string">"path"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a><br>。就能看到前文所展示的RESTful API的页面。我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。<br><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/swagger2_2.png" alt="image"></p><h1 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a>API文档访问与调试</h1><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方“Try it out！”按钮，即可完成了一次请求调用！</p><p>此时，你也可以通过几个GET请求来验证之前的POST请求是否正确。</p><p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.swagger2.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.swagger2.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于Spring Boot能够快速开发、便捷部署等特性，相信有很大一部分Spring Boot的用户会用来构建RESTful API。而我们构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端。&lt;/p&gt;
&lt;p&gt;这样一来，我们的RESTful API就有可能要面对多个开发人员或多个开发团队：IOS开发、Android开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：&lt;/p&gt;
&lt;p&gt;由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事，下游的抱怨声不绝于耳。&lt;br&gt;随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="swagger2" scheme="https://snjl.github.io/tags/swagger2/"/>
    
  </entry>
  
  <entry>
    <title>springboot：数据存储篇-SQL关系型数据库之MyBatis的使用</title>
    <link href="https://snjl.github.io/2018/12/01/springboot%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%AF%87-SQL%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BMyBatis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://snjl.github.io/2018/12/01/springboot：数据存储篇-SQL关系型数据库之MyBatis的使用/</id>
    <published>2018-12-01T15:19:59.000Z</published>
    <updated>2018-12-02T15:49:58.507Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.mybatis.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.mybatis.git</a></p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>这里需要添加mybatis-spring-boot-starter依赖跟mysql依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!--最新版本，匹配spring Boot1.5 or higher--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p> 这里不引入spring-boot-starter-jdbc依赖，是由于mybatis-spring-boot-starter中已经包含了此依赖。</p><a id="more"></a><p> MyBatis-Spring-Boot-Starter依赖将会提供如下：</p><ul><li>自动检测现有的DataSource</li><li>将创建并注册SqlSessionFactory的实例，该实例使用SqlSessionFactoryBean将该DataSource作为输入进行传递</li><li>将创建并注册从SqlSessionFactory中获取的SqlSessionTemplate的实例。</li><li>自动扫描您的mappers，将它们链接到SqlSessionTemplate并将其注册到Spring上下文，以便将它们注入到您的bean中。</li></ul><p>就是说，使用了该Starter之后，只需要定义一个DataSource即可（application.properties中可配置），它会自动创建使用该DataSource的SqlSessionFactoryBean以及SqlSessionTemplate。会自动扫描你的Mappers，连接到SqlSessionTemplate，并注册到Spring上下文中。</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><p>在src/main/resources/application.properties中配置数据源信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = root</span><br><span class="line">spring.datasource.driver-class-name = com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p><h1 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h1><p>Spring Boot默认使用tomcat-jdbc数据源，如果你想使用其他的数据源，比如这里使用了阿里巴巴的数据池管理,除了在application.properties配置数据源之外，你应该额外添加以下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改Application.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line">    <span class="comment">//destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.</span></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod =  <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(env.getProperty(<span class="string">"spring.datasource.url"</span>));</span><br><span class="line">        dataSource.setUsername(env.getProperty(<span class="string">"spring.datasource.username"</span>));<span class="comment">//用户名</span></span><br><span class="line">        dataSource.setPassword(env.getProperty(<span class="string">"spring.datasource.password"</span>));<span class="comment">//密码</span></span><br><span class="line">        dataSource.setDriverClassName(env.getProperty(<span class="string">"spring.datasource.driver-class-name"</span>));</span><br><span class="line">        dataSource.setInitialSize(<span class="number">2</span>);<span class="comment">//初始化时建立物理连接的个数</span></span><br><span class="line">        dataSource.setMaxActive(<span class="number">20</span>);<span class="comment">//最大连接池数量</span></span><br><span class="line">        dataSource.setMinIdle(<span class="number">0</span>);<span class="comment">//最小连接池数量</span></span><br><span class="line">        dataSource.setMaxWait(<span class="number">60000</span>);<span class="comment">//获取连接时最大等待时间，单位毫秒。</span></span><br><span class="line">        dataSource.setValidationQuery(<span class="string">"SELECT 1"</span>);<span class="comment">//用来检测连接是否有效的sql</span></span><br><span class="line">        dataSource.setTestOnBorrow(<span class="keyword">false</span>);<span class="comment">//申请连接时执行validationQuery检测连接是否有效</span></span><br><span class="line">        dataSource.setTestWhileIdle(<span class="keyword">true</span>);<span class="comment">//建议配置为true，不影响性能，并且保证安全性。</span></span><br><span class="line">        dataSource.setPoolPreparedStatements(<span class="keyword">false</span>);<span class="comment">//是否缓存preparedStatement，也就是PSCache</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring Boot会智能地选择我们自己配置的这个DataSource实例。</p><h1 id="注解方式跟XML配置方式共同的模块编码"><a href="#注解方式跟XML配置方式共同的模块编码" class="headerlink" title="注解方式跟XML配置方式共同的模块编码"></a>注解方式跟XML配置方式共同的模块编码</h1><p>不管是注解方式还是XML配置的方式，以下代码模块都是一样的：<br>pojo类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnResouce</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="comment">// SET和GET方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Controller:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.LearnResouce;</span><br><span class="line"><span class="keyword">import</span> com.dudu.service.LearnService;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.ServletUtil;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.StringUtil;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 教程页面</span></span><br><span class="line"><span class="comment"> * Created by tengj on 2017/3/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/learn"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LearnService learnService;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">learn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"learn-resource"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/queryLeanList"</span>,method = RequestMethod.POST,produces=<span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryLearnList</span><span class="params">(HttpServletRequest request ,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String page = request.getParameter(<span class="string">"page"</span>); <span class="comment">// 取得当前页数,注意这是jqgrid自身的参数</span></span><br><span class="line">        String rows = request.getParameter(<span class="string">"rows"</span>); <span class="comment">// 取得每页显示行数，,注意这是jqgrid自身的参数</span></span><br><span class="line">        String author = request.getParameter(<span class="string">"author"</span>);</span><br><span class="line">        String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        params.put(<span class="string">"page"</span>, page);</span><br><span class="line">        params.put(<span class="string">"rows"</span>, rows);</span><br><span class="line">        params.put(<span class="string">"author"</span>, author);</span><br><span class="line">        params.put(<span class="string">"title"</span>, title);</span><br><span class="line">        List&lt;LearnResouce&gt; learnList=learnService.queryLearnResouceList(params);</span><br><span class="line">        PageInfo&lt;LearnResouce&gt; pageInfo =<span class="keyword">new</span> PageInfo&lt;LearnResouce&gt;(learnList);</span><br><span class="line">        JSONObject jo=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jo.put(<span class="string">"rows"</span>, learnList);</span><br><span class="line">        jo.put(<span class="string">"total"</span>, pageInfo.getPages());<span class="comment">//总页数</span></span><br><span class="line">        jo.put(<span class="string">"records"</span>,pageInfo.getTotal());<span class="comment">//查询出的总记录数</span></span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, jo, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新添教程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLearn</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        JSONObject result=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        String author = request.getParameter(<span class="string">"author"</span>);</span><br><span class="line">        String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(author))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"作者不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(title))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程名称不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(url))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"地址不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LearnResouce learnResouce = <span class="keyword">new</span> LearnResouce();</span><br><span class="line">        learnResouce.setAuthor(author);</span><br><span class="line">        learnResouce.setTitle(title);</span><br><span class="line">        learnResouce.setUrl(url);</span><br><span class="line">        <span class="keyword">int</span> index=learnService.add(learnResouce);</span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息添加成功!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息添加失败!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改教程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateLearn</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        JSONObject result=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        LearnResouce learnResouce=learnService.queryLearnResouceById(Long.valueOf(id));</span><br><span class="line">        String author = request.getParameter(<span class="string">"author"</span>);</span><br><span class="line">        String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(author))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"作者不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(title))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程名称不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(url))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"地址不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        learnResouce.setAuthor(author);</span><br><span class="line">        learnResouce.setTitle(title);</span><br><span class="line">        learnResouce.setUrl(url);</span><br><span class="line">        <span class="keyword">int</span> index=learnService.update(learnResouce);</span><br><span class="line">        System.out.println(<span class="string">"修改结果="</span>+index);</span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息修改成功!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息修改失败!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除教程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/delete"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(HttpServletRequest request ,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String ids = request.getParameter(<span class="string">"ids"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ids==="</span>+ids);</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="comment">//删除操作</span></span><br><span class="line">        <span class="keyword">int</span> index = learnService.deleteByIds(ids.split(<span class="string">","</span>));</span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息删除成功!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息删除失败!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Service:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LearnService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(LearnResouce learnResouce)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(LearnResouce learnResouce)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String[] ids)</span></span>;</span><br><span class="line">    <span class="function">LearnResouce <span class="title">queryLearnResouceById</span><span class="params">(Long learnResouce)</span></span>;</span><br><span class="line">    <span class="function">List&lt;LearnResouce&gt; <span class="title">queryLearnResouceList</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.dudu.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Created by tengj on 2017/4/7.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Service</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnServiceImpl</span> <span class="keyword">implements</span> <span class="title">LearnService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">     LearnMapper learnMapper;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(LearnResouce learnResouce)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.learnMapper.add(learnResouce);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(LearnResouce learnResouce)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.learnMapper.update(learnResouce);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String[] ids)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.learnMapper.deleteByIds(ids);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> LearnResouce <span class="title">queryLearnResouceById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.learnMapper.queryLearnResouceById(id);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;LearnResouce&gt; <span class="title">queryLearnResouceList</span><span class="params">(Map&lt;String,Object&gt; params)</span> </span>&#123;</span><br><span class="line">         PageHelper.startPage(Integer.parseInt(params.get(<span class="string">"page"</span>).toString()), Integer.parseInt(params.get(<span class="string">"rows"</span>).toString()));</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.learnMapper.queryLearnResouceList(params);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h1 id="Mybatis集成"><a href="#Mybatis集成" class="headerlink" title="Mybatis集成"></a>Mybatis集成</h1><h2 id="方案一：注解方式"><a href="#方案一：注解方式" class="headerlink" title="方案一：注解方式"></a>方案一：注解方式</h2><p>Mybatis注解的方式简单，只要定义一个dao接口，然后sql语句通过注解写在接口方法上。最后给这个接口添加@Mapper注解或者在启动类上添加@MapperScan(“com.dudu.dao”)注解都行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.LearnResouce;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.StringUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by tengj on 2017/4/22.</span></span><br><span class="line"><span class="comment"> * Component注解不添加也没事，只是不加service那边引入LearnMapper会有错误提示，但不影响</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LearnMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into learn_resource(author, title,url) values(#&#123;author&#125;,#&#123;title&#125;,#&#123;url&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(LearnResouce learnResouce)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update learn_resource set author=#&#123;author&#125;,title=#&#123;title&#125;,url=#&#123;url&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(LearnResouce learnResouce)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteProvider</span>(type = LearnSqlBuilder.class, method = <span class="string">"deleteByids"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(@Param(<span class="string">"ids"</span>)</span> String[] ids)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from learn_resource where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id = <span class="string">"learnMap"</span>, value = &#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"id"</span>, javaType = Long.class),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"author"</span>, column = <span class="string">"author"</span>, javaType = String.class),</span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"title"</span>, column = <span class="string">"title"</span>, javaType = String.class)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">LearnResouce <span class="title">queryLearnResouceById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SelectProvider</span>(type = LearnSqlBuilder.class, method = <span class="string">"queryLearnResouceByParams"</span>)</span><br><span class="line">    <span class="function">List&lt;LearnResouce&gt; <span class="title">queryLearnResouceList</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LearnSqlBuilder</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">queryLearnResouceByParams</span><span class="params">(<span class="keyword">final</span> Map&lt;String, Object&gt; params)</span> </span>&#123;</span><br><span class="line">            StringBuffer sql =<span class="keyword">new</span> StringBuffer();</span><br><span class="line">            sql.append(<span class="string">"select * from learn_resource where 1=1"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!StringUtil.isNull((String)params.get(<span class="string">"author"</span>)))&#123;</span><br><span class="line">                sql.append(<span class="string">" and author like '%"</span>).append((String)params.get(<span class="string">"author"</span>)).append(<span class="string">"%'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!StringUtil.isNull((String)params.get(<span class="string">"title"</span>)))&#123;</span><br><span class="line">                sql.append(<span class="string">" and title like '%"</span>).append((String)params.get(<span class="string">"title"</span>)).append(<span class="string">"%'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"查询sql=="</span>+sql.toString());</span><br><span class="line">            <span class="keyword">return</span> sql.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">deleteByids</span><span class="params">(@Param(<span class="string">"ids"</span>)</span> <span class="keyword">final</span> String[] ids)</span>&#123;</span><br><span class="line">            StringBuffer sql =<span class="keyword">new</span> StringBuffer();</span><br><span class="line">            sql.append(<span class="string">"DELETE FROM learn_resource WHERE id in("</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ids.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==ids.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    sql.append(ids[i]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    sql.append(ids[i]).append(<span class="string">","</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sql.append(<span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">return</span> sql.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，简单的语句只需要使用@Insert、@Update、@Delete、@Select这4个注解即可，但是有些复杂点需要动态SQL语句，就比如上面方法中根据查询条件是否有值来动态添加sql的，就需要使用@InsertProvider、@UpdateProvider、@DeleteProvider、@SelectProvider等注解。</p><p>这些可选的 SQL 注解允许你指定一个类名和一个方法在执行时来返回运行 允许创建动态 的 SQL。 基于执行的映射语句, MyBatis 会实例化这个类,然后执行由 provider 指定的方法. 该方法可以有选择地接受参数对象.(In MyBatis 3.4 or later, it’s allow multiple parameters) 属性: type,method。type 属性是类。method 属性是方法名。 注意: 这节之后是对 类的 讨论,它可以帮助你以干净,容于阅读 的方式来构建动态 SQL。</p><h2 id="方案二：XML配置方式"><a href="#方案二：XML配置方式" class="headerlink" title="方案二：XML配置方式"></a>方案二：XML配置方式</h2><p>xml配置方式保持映射文件的老传统，优化主要体现在不需要实现dao的是实现层，系统会自动根据方法名在映射文件中找对应的sql，具体操作如下：</p><h3 id="编写Dao层的代码"><a href="#编写Dao层的代码" class="headerlink" title="编写Dao层的代码"></a>编写Dao层的代码</h3><p>新建LearnMapper接口，无需具体实现类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.dao;</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LearnMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(LearnResouce learnResouce)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(LearnResouce learnResouce)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String[] ids)</span></span>;</span><br><span class="line">    <span class="function">LearnResouce <span class="title">queryLearnResouceById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;LearnResouce&gt; <span class="title">queryLearnResouceList</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改application.properties 配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#指定bean所在包</span><br><span class="line">mybatis.type-aliases-package=com.dudu.domain</span><br><span class="line">#指定映射文件</span><br><span class="line">mybatis.mapperLocations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure></p><p>添加LearnMapper的映射文件:</p><p>在src/main/resources目录下新建一个mapper目录，在mapper目录下新建LearnMapper.xml文件。</p><p>通过mapper标签中的namespace属性指定对应的dao映射，这里指向LearnMapper。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dudu.dao.LearnMapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"baseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.dudu.domain.LearnResouce"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"author"</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"title"</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"url"</span> <span class="attr">property</span>=<span class="string">"url"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"baseColumnList"</span> &gt;</span></span><br><span class="line">    id, author, title,url</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryLearnResouceList"</span> <span class="attr">resultMap</span>=<span class="string">"baseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.HashMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"baseColumnList"</span> /&gt;</span></span><br><span class="line">    from learn_resource</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      1 = 1</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author!= null and author !=''"</span>&gt;</span></span><br><span class="line">        AND author like CONCAT(CONCAT('%',#&#123;author,jdbcType=VARCHAR&#125;),'%')</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null and title !=''"</span>&gt;</span></span><br><span class="line">        AND title like  CONCAT(CONCAT('%',#&#123;title,jdbcType=VARCHAR&#125;),'%')</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryLearnResouceById"</span>  <span class="attr">resultMap</span>=<span class="string">"baseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"baseColumnList"</span> /&gt;</span></span><br><span class="line">    FROM learn_resource</span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"com.dudu.domain.LearnResouce"</span> &gt;</span></span><br><span class="line">    INSERT INTO learn_resource (author, title,url) VALUES (#&#123;author&#125;, #&#123;title&#125;, #&#123;url&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.dudu.domain.LearnResouce"</span> &gt;</span></span><br><span class="line">    UPDATE learn_resource SET author = #&#123;author&#125;,title = #&#123;title&#125;,url = #&#123;url&#125; WHERE id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> &gt;</span></span><br><span class="line">    DELETE FROM learn_resource WHERE id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"idItem"</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">      #&#123;idItem&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><p>上面我有使用到物理分页插件pagehelper，用法还算简单，pom.xml中添加依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后你只需在查询list之前使用PageHelper.startPage(int pageNum, int pageSize)方法即可。pageNum是第几页，pageSize是每页多少条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;LearnResouce&gt; queryLearnResouceList(Map&lt;String,Object&gt; params) &#123;</span><br><span class="line">    PageHelper.startPage(Integer.parseInt(params.get(&quot;page&quot;).toString()), Integer.parseInt(params.get(&quot;rows&quot;).toString()));</span><br><span class="line">    return this.learnMapper.queryLearnResouceList(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.mybatis.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.mybatis.git&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h1&gt;&lt;p&gt;这里需要添加mybatis-spring-boot-starter依赖跟mysql依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;!--最新版本，匹配spring Boot1.5 or higher--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;version&amp;gt;1.3.0&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 这里不引入spring-boot-starter-jdbc依赖，是由于mybatis-spring-boot-starter中已经包含了此依赖。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="数据库" scheme="https://snjl.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="mybatis" scheme="https://snjl.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>springboot：默认日志logback配置解析</title>
    <link href="https://snjl.github.io/2018/11/30/springboot%EF%BC%9A%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97logback%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://snjl.github.io/2018/11/30/springboot：默认日志logback配置解析/</id>
    <published>2018-11-30T15:31:37.000Z</published>
    <updated>2018-11-30T15:33:08.895Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.log.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.log.git</a></p><p>Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p><h1 id="默认日志Logback"><a href="#默认日志Logback" class="headerlink" title="默认日志Logback"></a>默认日志Logback</h1><p>SLF4J——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的binding。</p><p>Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p><p>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。</p><p>日志输出内容元素具体如下：</p><ul><li>时间日期：精确到毫秒</li><li>日志级别：ERROR, WARN, INFO, DEBUG or TRACE</li><li>进程ID</li><li>分隔符：— 标识实际日志的开始</li><li>线程名：方括号括起来（可能会截断控制台输出）</li><li>Logger名：通常使用源代码的类名</li><li>日志内容</li></ul><a id="more"></a><h1 id="添加日志依赖"><a href="#添加日志依赖" class="headerlink" title="添加日志依赖"></a>添加日志依赖</h1><p>假如maven依赖中添加了spring-boot-starter-logging：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么，我们的Spring Boot应用将自动使用logback作为应用日志框架，Spring Boot启动的时候，由org.springframework.boot.logging.Logging-Application-Listener根据情况初始化并使用。</p><p>但是呢，实际开发中我们不需要直接添加该依赖，你会发现spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot 默认的日志框架 logback。Thymeleaf依赖包含了spring-boot-starter，所以理论上，如果选择引入Thymeleaf，就不需要引入spring-boot-starter-logging：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><!--more--><h1 id="默认配置属性支持"><a href="#默认配置属性支持" class="headerlink" title="默认配置属性支持"></a>默认配置属性支持</h1><p>Spring Boot为我们提供了很多默认的日志配置，所以，只要将spring-boot-starter-logging作为依赖加入到当前应用的classpath，则“开箱即用”。<br>下面介绍几种在application.properties就可以配置的日志相关属性。</p><h1 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h1><p>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。<br>Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可：</p><ul><li>在运行命令后加入–debug标志，如：$ java -jar springTest.jar –debug</li><li>在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</li></ul><h1 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h1><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。</p><p>logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log</p><p>如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。<br>如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log</p><p><strong>注：二者不能同时使用，如若同时使用，则只有logging.file生效</strong></p><p>默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO。</p><h1 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h1><p>所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中）<br>格式为：’logging.level.* = LEVEL’</p><ul><li>logging.level：日志级别控制前缀，*为包名或Logger名</li><li><p>LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF<br>举例：</p></li><li><p>logging.level.com.dudu=DEBUG：com.dudu包下所有class以DEBUG级别输出</p></li><li>logging.level.root=WARN：root日志以WARN级别输出</li></ul><h1 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h1><p>由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。</p><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p><ul><li>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</li><li>Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</li><li>Log4j2：log4j2-spring.xml, log4j2.xml</li><li>JDK (Java Util Logging)：logging.properties</li></ul><p>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。</p><p>上面是默认的命名规则，并且放在src/main/resources下面即可。</p><p>如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以通过logging.config属性指定自定义的名字：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.config=classpath:logging-config.xml</span><br></pre></td></tr></table></figure></p><p>虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日<br>志配置，这个功能会很有用。</p><p>下面是一个普通的logback-spring.xml例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"E:\\test\\logback.log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;</span></span><br><span class="line"><span class="comment">            &lt;level&gt;ERROR&lt;/level&gt;</span></span><br><span class="line"><span class="comment">        &lt;/filter&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logback为java中的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller.LearnController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="http://tengj.top/2017/04/05/springboot7/" target="_blank" rel="noopener">http://tengj.top/2017/04/05/springboot7/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.log.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.log.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。&lt;/p&gt;
&lt;h1 id=&quot;默认日志Logback&quot;&gt;&lt;a href=&quot;#默认日志Logback&quot; class=&quot;headerlink&quot; title=&quot;默认日志Logback&quot;&gt;&lt;/a&gt;默认日志Logback&lt;/h1&gt;&lt;p&gt;SLF4J——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的binding。&lt;/p&gt;
&lt;p&gt;Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。&lt;/p&gt;
&lt;p&gt;默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。&lt;/p&gt;
&lt;p&gt;日志输出内容元素具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间日期：精确到毫秒&lt;/li&gt;
&lt;li&gt;日志级别：ERROR, WARN, INFO, DEBUG or TRACE&lt;/li&gt;
&lt;li&gt;进程ID&lt;/li&gt;
&lt;li&gt;分隔符：— 标识实际日志的开始&lt;/li&gt;
&lt;li&gt;线程名：方括号括起来（可能会截断控制台输出）&lt;/li&gt;
&lt;li&gt;Logger名：通常使用源代码的类名&lt;/li&gt;
&lt;li&gt;日志内容&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="日志" scheme="https://snjl.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>springboot：静态资源和拦截器处理</title>
    <link href="https://snjl.github.io/2018/11/30/springboot%EF%BC%9A%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E5%A4%84%E7%90%86/"/>
    <id>https://snjl.github.io/2018/11/30/springboot：静态资源和拦截器处理/</id>
    <published>2018-11-30T15:30:32.000Z</published>
    <updated>2018-11-30T15:31:24.689Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/jdbcTemplete.dudu.static.git" target="_blank" rel="noopener">https://github.com/snjl/jdbcTemplete.dudu.static.git</a></p><p>前面章节我们也有简单介绍过SpringBoot中对静态资源的默认支持，今天详细的来介绍下默认的支持，以及自定义扩展如何实现。</p><h1 id="默认资源映射"><a href="#默认资源映射" class="headerlink" title="默认资源映射"></a>默认资源映射</h1><p>Spring Boot 默认为我们提供了静态资源处理，使用 WebMvcAutoConfiguration 中的配置各种属性。<br>建议大家使用Spring Boot的默认配置方式，提供的静态资源映射如下:</p><ul><li>classpath:/META-INF/resources</li><li>classpath:/resources</li><li>classpath:/static</li><li><p>classpath:/public</p><a id="more"></a><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/static1.jpg" alt="image"></p></li></ul><p>上面这几个都是静态资源的映射路径，优先级顺序为：META-INF/resources &gt; resources &gt; static &gt; public。</p><p>可以自己在上面4个路径下都放一张同名的图片，访问一下即可验证。<br>还有，你可以随机在上面一个路径下面放上index.html，当我们访问应用根目录<a href="http://lcoalhost:8080" target="_blank" rel="noopener">http://lcoalhost:8080</a> 时，会直接映射到index.html页面。</p><p>对应的配置文件配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认值为 /**</span><br><span class="line">spring.mvc.static-path-pattern=</span><br><span class="line"># 默认值为 classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</span><br><span class="line">spring.resources.static-locations=这里设置要指向的路径，多个使用英文逗号隔开</span><br></pre></td></tr></table></figure></p><p>可以通过修改spring.mvc.static-path-pattern来修改默认的映射，例如我改成/dudu/**,那运行的时候访问<a href="http://lcoalhost:8080/dudu/index.html" target="_blank" rel="noopener">http://lcoalhost:8080/dudu/index.html</a> 才对应到index.html页面。</p><h1 id="接管Spring-Boot的Web配置"><a href="#接管Spring-Boot的Web配置" class="headerlink" title="接管Spring Boot的Web配置"></a>接管Spring Boot的Web配置</h1><p>如果Spring Boot提供的Sping MVC不符合要求，则可以通过一个配置类（注解有@Configuration的类）加上@EnableWebMvc注解来实现完全自己控制的MVC配置。</p><p>当然，通常情况下，Spring Boot的自动配置是符合我们大多数需求的。在你既需要保留Spring Boot提供的便利，有需要增加自己的额外的配置的时候，可以定义一个配置类并继承WebMvcConfigurerAdapter,无需使用@EnableWebMvc注解。</p><p>这里我们提到这个WebMvcConfigurerAdapter这个类，重写这个类中的方法可以让我们增加额外的配置，这里我们就介绍几个常用的。</p><h1 id="自定义资源映射addResourceHandlers"><a href="#自定义资源映射addResourceHandlers" class="headerlink" title="自定义资源映射addResourceHandlers"></a>自定义资源映射addResourceHandlers</h1><p>比如，我们想自定义静态资源映射目录的话，只需重写addResourceHandlers方法即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态访问资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/my/**"</span>).addResourceLocations(<span class="string">"classpath:/my/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过addResourceHandler添加映射路径，然后通过addResourceLocations来指定路径。我们访问自定义my文件夹中的elephant.jpg 图片的地址为：<a href="http://localhost:8080/my/elephant.jpg" target="_blank" rel="noopener">http://localhost:8080/my/elephant.jpg</a></p><p>如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/my/**"</span>).addResourceLocations(<span class="string">"file:E:/my/"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>addResourceLocations指的是文件放置的目录，addResoureHandler指的是对外暴露的访问路径。</p><h1 id="页面跳转addViewControllers"><a href="#页面跳转addViewControllers" class="headerlink" title="页面跳转addViewControllers"></a>页面跳转addViewControllers</h1><p>以前写SpringMVC的时候，如果需要访问一个页面，必须要写Controller类，然后再写一个方法跳转到页面，感觉好麻烦，其实重写WebMvcConfigurerAdapter中的addViewControllers方法即可达到效果了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以前要访问一个页面需要先创建个Controller控制类，再写方法跳转到页面</span></span><br><span class="line"><span class="comment">     * 在这里配置后就不需要那么麻烦了，直接访问http://localhost:8080/toLogin就跳转到login.htm页面了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/toLogin"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>值的指出的是，在这里重写addViewControllers方法，并不会覆盖WebMvcAutoConfiguration中的addViewControllers（在此方法中，Spring Boot将“/”映射至index.html），这也就意味着我们自己的配置和Spring Boot的自动配置同时有效，这也是我们推荐添加自己的MVC配置的方式。</p><h1 id="拦截器addInterceptors"><a href="#拦截器addInterceptors" class="headerlink" title="拦截器addInterceptors"></a>拦截器addInterceptors</h1><p>拦截器在我们项目中经常使用的，这里就来介绍下最简单的判断是否登录的使用。<br>要实现拦截器功能需要完成以下2个步骤：</p><ul><li>创建我们自己的拦截器类并实现 HandlerInterceptor 接口</li><li>其实重写WebMvcConfigurerAdapter中的addInterceptors方法把自定义的拦截器类添加进来即可<br>首先，自定义拦截器代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.interceptor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line">        User user=(User)request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==user)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"toLogin"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里我们简单实现了根据session中是否有User对象来判断是否登录，为空就跳转到登录页，不为空就通过。</p><p>接着，重写WebMvcConfigurerAdapter中的addInterceptors方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 拦截器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// addPathPatterns 用于添加拦截规则</span></span><br><span class="line">    <span class="comment">// excludePathPatterns 用户排除拦截</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/toLogin"</span>,<span class="string">"/login"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>addPathPatterns(“/**”)对所有请求都拦截，但是排除了/toLogin和/login请求的拦截。</p><h1 id="页面登录关键代码"><a href="#页面登录关键代码" class="headerlink" title="页面登录关键代码"></a>页面登录关键代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单登录操作</span></span><br><span class="line">$(<span class="string">"#doLogin"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">    type : <span class="string">"POST"</span>,</span><br><span class="line">    url : <span class="string">"/login"</span>,</span><br><span class="line">    data : &#123;</span><br><span class="line">        <span class="string">"userName"</span> : $(<span class="string">"#userName"</span>).val(),</span><br><span class="line">        <span class="string">"password"</span> : $(<span class="string">"#password"</span>).val()</span><br><span class="line">    &#125;,</span><br><span class="line">    dataType : <span class="string">"json"</span>,</span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.result == <span class="string">"1"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href =<span class="string">"/learn"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"账号密码不能为空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.LearnResouce;</span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by tengj on 2017/3/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map =<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        String userName=request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">        String password=request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!userName.equals(<span class="string">""</span>) &amp;&amp; password!=<span class="string">""</span>)&#123;</span><br><span class="line">            User user =<span class="keyword">new</span> User(userName,password);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/learn"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;LearnResouce&gt; learnList =<span class="keyword">new</span> ArrayList&lt;LearnResouce&gt;();</span><br><span class="line">        LearnResouce bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#getting-started-first-application"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"嘟嘟MD独立博客"</span>,<span class="string">"Spring Boot干货系列 "</span>,<span class="string">"http://tengj.top/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"后端编程嘟"</span>,<span class="string">"Spring Boot教程和视频 "</span>,<span class="string">"http://www.toutiao.com/m1559096720023553/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"纯洁的微笑"</span>,<span class="string">"Sping Boot系列文章"</span>,<span class="string">"http://www.ityouknow.com/spring-boot"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"CSDN——小当博客专栏"</span>,<span class="string">"Sping Boot学习"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"梁桂钊的博客"</span>,<span class="string">"Spring Boot 揭秘与实战"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"林祥纤博客系列"</span>,<span class="string">"从零开始学Spring Boot "</span>,<span class="string">"http://412887952-qq-com.iteye.com/category/356333"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"/template"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样访问的时候，如果未登录就会跳转到login.html页面，而访问<a href="http://localhost:8080/toLogin" target="_blank" rel="noopener">http://localhost:8080/toLogin</a> 和<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a> 不会被拦截。</p><p><img src="http://pi6jpxhir.bkt.clouddn.com/login_test.gif" alt="image"></p><p>更多配置可以查看WebMvcConfigurerAdapter的类的API。因其是WebMvcConfigurer接口的实现，所以WebMvcConfigurer的API方法也可以用来配置MVC。</p><p>但是只是实现这个接口的话，要实现所有的方法，比较麻烦。</p><p>所以还是推荐使用继承WebMvcConfigurerAdapter类来处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/jdbcTemplete.dudu.static.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/jdbcTemplete.dudu.static.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前面章节我们也有简单介绍过SpringBoot中对静态资源的默认支持，今天详细的来介绍下默认的支持，以及自定义扩展如何实现。&lt;/p&gt;
&lt;h1 id=&quot;默认资源映射&quot;&gt;&lt;a href=&quot;#默认资源映射&quot; class=&quot;headerlink&quot; title=&quot;默认资源映射&quot;&gt;&lt;/a&gt;默认资源映射&lt;/h1&gt;&lt;p&gt;Spring Boot 默认为我们提供了静态资源处理，使用 WebMvcAutoConfiguration 中的配置各种属性。&lt;br&gt;建议大家使用Spring Boot的默认配置方式，提供的静态资源映射如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classpath:/META-INF/resources&lt;/li&gt;
&lt;li&gt;classpath:/resources&lt;/li&gt;
&lt;li&gt;classpath:/static&lt;/li&gt;
&lt;li&gt;&lt;p&gt;classpath:/public&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
  </entry>
  
</feed>
