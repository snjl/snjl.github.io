<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snjl</title>
  
  <subtitle>我大概率会编程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://snjl.github.io/"/>
  <updated>2018-11-30T15:33:08.895Z</updated>
  <id>https://snjl.github.io/</id>
  
  <author>
    <name>snjl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot：默认日志logback配置解析</title>
    <link href="https://snjl.github.io/2018/11/30/springboot%EF%BC%9A%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97logback%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://snjl.github.io/2018/11/30/springboot：默认日志logback配置解析/</id>
    <published>2018-11-30T15:31:37.000Z</published>
    <updated>2018-11-30T15:33:08.895Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.log.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.log.git</a></p><p>Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p><h1 id="默认日志Logback"><a href="#默认日志Logback" class="headerlink" title="默认日志Logback"></a>默认日志Logback</h1><p>SLF4J——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的binding。</p><p>Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p><p>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。</p><p>日志输出内容元素具体如下：</p><ul><li>时间日期：精确到毫秒</li><li>日志级别：ERROR, WARN, INFO, DEBUG or TRACE</li><li>进程ID</li><li>分隔符：— 标识实际日志的开始</li><li>线程名：方括号括起来（可能会截断控制台输出）</li><li>Logger名：通常使用源代码的类名</li><li>日志内容</li></ul><a id="more"></a><h1 id="添加日志依赖"><a href="#添加日志依赖" class="headerlink" title="添加日志依赖"></a>添加日志依赖</h1><p>假如maven依赖中添加了spring-boot-starter-logging：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么，我们的Spring Boot应用将自动使用logback作为应用日志框架，Spring Boot启动的时候，由org.springframework.boot.logging.Logging-Application-Listener根据情况初始化并使用。</p><p>但是呢，实际开发中我们不需要直接添加该依赖，你会发现spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot 默认的日志框架 logback。Thymeleaf依赖包含了spring-boot-starter，所以理论上，如果选择引入Thymeleaf，就不需要引入spring-boot-starter-logging：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><!--more--><h1 id="默认配置属性支持"><a href="#默认配置属性支持" class="headerlink" title="默认配置属性支持"></a>默认配置属性支持</h1><p>Spring Boot为我们提供了很多默认的日志配置，所以，只要将spring-boot-starter-logging作为依赖加入到当前应用的classpath，则“开箱即用”。<br>下面介绍几种在application.properties就可以配置的日志相关属性。</p><h1 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h1><p>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。<br>Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可：</p><ul><li>在运行命令后加入–debug标志，如：$ java -jar springTest.jar –debug</li><li>在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</li></ul><h1 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h1><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。</p><p>logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log</p><p>如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。<br>如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log</p><p><strong>注：二者不能同时使用，如若同时使用，则只有logging.file生效</strong></p><p>默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO。</p><h1 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h1><p>所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中）<br>格式为：’logging.level.* = LEVEL’</p><ul><li>logging.level：日志级别控制前缀，*为包名或Logger名</li><li><p>LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF<br>举例：</p></li><li><p>logging.level.com.dudu=DEBUG：com.dudu包下所有class以DEBUG级别输出</p></li><li>logging.level.root=WARN：root日志以WARN级别输出</li></ul><h1 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h1><p>由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。</p><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p><ul><li>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</li><li>Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</li><li>Log4j2：log4j2-spring.xml, log4j2.xml</li><li>JDK (Java Util Logging)：logging.properties</li></ul><p>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。</p><p>上面是默认的命名规则，并且放在src/main/resources下面即可。</p><p>如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以通过logging.config属性指定自定义的名字：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.config=classpath:logging-config.xml</span><br></pre></td></tr></table></figure></p><p>虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日<br>志配置，这个功能会很有用。</p><p>下面是一个普通的logback-spring.xml例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"E:\\test\\logback.log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;</span></span><br><span class="line"><span class="comment">            &lt;level&gt;ERROR&lt;/level&gt;</span></span><br><span class="line"><span class="comment">        &lt;/filter&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logback为java中的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller.LearnController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="http://tengj.top/2017/04/05/springboot7/" target="_blank" rel="noopener">http://tengj.top/2017/04/05/springboot7/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.log.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.log.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。&lt;/p&gt;
&lt;h1 id=&quot;默认日志Logback&quot;&gt;&lt;a href=&quot;#默认日志Logback&quot; class=&quot;headerlink&quot; title=&quot;默认日志Logback&quot;&gt;&lt;/a&gt;默认日志Logback&lt;/h1&gt;&lt;p&gt;SLF4J——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的binding。&lt;/p&gt;
&lt;p&gt;Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。&lt;/p&gt;
&lt;p&gt;默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。&lt;/p&gt;
&lt;p&gt;日志输出内容元素具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间日期：精确到毫秒&lt;/li&gt;
&lt;li&gt;日志级别：ERROR, WARN, INFO, DEBUG or TRACE&lt;/li&gt;
&lt;li&gt;进程ID&lt;/li&gt;
&lt;li&gt;分隔符：— 标识实际日志的开始&lt;/li&gt;
&lt;li&gt;线程名：方括号括起来（可能会截断控制台输出）&lt;/li&gt;
&lt;li&gt;Logger名：通常使用源代码的类名&lt;/li&gt;
&lt;li&gt;日志内容&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="日志" scheme="https://snjl.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>springboot：静态资源和拦截器处理</title>
    <link href="https://snjl.github.io/2018/11/30/springboot%EF%BC%9A%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E6%8B%A6%E6%88%AA%E5%99%A8%E5%A4%84%E7%90%86/"/>
    <id>https://snjl.github.io/2018/11/30/springboot：静态资源和拦截器处理/</id>
    <published>2018-11-30T15:30:32.000Z</published>
    <updated>2018-11-30T15:31:24.689Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/jdbcTemplete.dudu.static.git" target="_blank" rel="noopener">https://github.com/snjl/jdbcTemplete.dudu.static.git</a></p><p>前面章节我们也有简单介绍过SpringBoot中对静态资源的默认支持，今天详细的来介绍下默认的支持，以及自定义扩展如何实现。</p><h1 id="默认资源映射"><a href="#默认资源映射" class="headerlink" title="默认资源映射"></a>默认资源映射</h1><p>Spring Boot 默认为我们提供了静态资源处理，使用 WebMvcAutoConfiguration 中的配置各种属性。<br>建议大家使用Spring Boot的默认配置方式，提供的静态资源映射如下:</p><ul><li>classpath:/META-INF/resources</li><li>classpath:/resources</li><li>classpath:/static</li><li><p>classpath:/public</p><a id="more"></a><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/static1.jpg" alt="image"></p></li></ul><p>上面这几个都是静态资源的映射路径，优先级顺序为：META-INF/resources &gt; resources &gt; static &gt; public。</p><p>可以自己在上面4个路径下都放一张同名的图片，访问一下即可验证。<br>还有，你可以随机在上面一个路径下面放上index.html，当我们访问应用根目录<a href="http://lcoalhost:8080" target="_blank" rel="noopener">http://lcoalhost:8080</a> 时，会直接映射到index.html页面。</p><p>对应的配置文件配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认值为 /**</span><br><span class="line">spring.mvc.static-path-pattern=</span><br><span class="line"># 默认值为 classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</span><br><span class="line">spring.resources.static-locations=这里设置要指向的路径，多个使用英文逗号隔开</span><br></pre></td></tr></table></figure></p><p>可以通过修改spring.mvc.static-path-pattern来修改默认的映射，例如我改成/dudu/**,那运行的时候访问<a href="http://lcoalhost:8080/dudu/index.html" target="_blank" rel="noopener">http://lcoalhost:8080/dudu/index.html</a> 才对应到index.html页面。</p><h1 id="接管Spring-Boot的Web配置"><a href="#接管Spring-Boot的Web配置" class="headerlink" title="接管Spring Boot的Web配置"></a>接管Spring Boot的Web配置</h1><p>如果Spring Boot提供的Sping MVC不符合要求，则可以通过一个配置类（注解有@Configuration的类）加上@EnableWebMvc注解来实现完全自己控制的MVC配置。</p><p>当然，通常情况下，Spring Boot的自动配置是符合我们大多数需求的。在你既需要保留Spring Boot提供的便利，有需要增加自己的额外的配置的时候，可以定义一个配置类并继承WebMvcConfigurerAdapter,无需使用@EnableWebMvc注解。</p><p>这里我们提到这个WebMvcConfigurerAdapter这个类，重写这个类中的方法可以让我们增加额外的配置，这里我们就介绍几个常用的。</p><h1 id="自定义资源映射addResourceHandlers"><a href="#自定义资源映射addResourceHandlers" class="headerlink" title="自定义资源映射addResourceHandlers"></a>自定义资源映射addResourceHandlers</h1><p>比如，我们想自定义静态资源映射目录的话，只需重写addResourceHandlers方法即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态访问资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/my/**"</span>).addResourceLocations(<span class="string">"classpath:/my/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过addResourceHandler添加映射路径，然后通过addResourceLocations来指定路径。我们访问自定义my文件夹中的elephant.jpg 图片的地址为：<a href="http://localhost:8080/my/elephant.jpg" target="_blank" rel="noopener">http://localhost:8080/my/elephant.jpg</a></p><p>如果你想指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/my/**"</span>).addResourceLocations(<span class="string">"file:E:/my/"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>addResourceLocations指的是文件放置的目录，addResoureHandler指的是对外暴露的访问路径。</p><h1 id="页面跳转addViewControllers"><a href="#页面跳转addViewControllers" class="headerlink" title="页面跳转addViewControllers"></a>页面跳转addViewControllers</h1><p>以前写SpringMVC的时候，如果需要访问一个页面，必须要写Controller类，然后再写一个方法跳转到页面，感觉好麻烦，其实重写WebMvcConfigurerAdapter中的addViewControllers方法即可达到效果了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以前要访问一个页面需要先创建个Controller控制类，再写方法跳转到页面</span></span><br><span class="line"><span class="comment">     * 在这里配置后就不需要那么麻烦了，直接访问http://localhost:8080/toLogin就跳转到login.htm页面了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/toLogin"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addViewControllers(registry);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>值的指出的是，在这里重写addViewControllers方法，并不会覆盖WebMvcAutoConfiguration中的addViewControllers（在此方法中，Spring Boot将“/”映射至index.html），这也就意味着我们自己的配置和Spring Boot的自动配置同时有效，这也是我们推荐添加自己的MVC配置的方式。</p><h1 id="拦截器addInterceptors"><a href="#拦截器addInterceptors" class="headerlink" title="拦截器addInterceptors"></a>拦截器addInterceptors</h1><p>拦截器在我们项目中经常使用的，这里就来介绍下最简单的判断是否登录的使用。<br>要实现拦截器功能需要完成以下2个步骤：</p><ul><li>创建我们自己的拦截器类并实现 HandlerInterceptor 接口</li><li>其实重写WebMvcConfigurerAdapter中的addInterceptors方法把自定义的拦截器类添加进来即可<br>首先，自定义拦截器代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.interceptor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag =<span class="keyword">true</span>;</span><br><span class="line">        User user=(User)request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==user)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"toLogin"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里我们简单实现了根据session中是否有User对象来判断是否登录，为空就跳转到登录页，不为空就通过。</p><p>接着，重写WebMvcConfigurerAdapter中的addInterceptors方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 拦截器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// addPathPatterns 用于添加拦截规则</span></span><br><span class="line">    <span class="comment">// excludePathPatterns 用户排除拦截</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/toLogin"</span>,<span class="string">"/login"</span>);</span><br><span class="line">    <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>addPathPatterns(“/**”)对所有请求都拦截，但是排除了/toLogin和/login请求的拦截。</p><h1 id="页面登录关键代码"><a href="#页面登录关键代码" class="headerlink" title="页面登录关键代码"></a>页面登录关键代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单登录操作</span></span><br><span class="line">$(<span class="string">"#doLogin"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">    type : <span class="string">"POST"</span>,</span><br><span class="line">    url : <span class="string">"/login"</span>,</span><br><span class="line">    data : &#123;</span><br><span class="line">        <span class="string">"userName"</span> : $(<span class="string">"#userName"</span>).val(),</span><br><span class="line">        <span class="string">"password"</span> : $(<span class="string">"#password"</span>).val()</span><br><span class="line">    &#125;,</span><br><span class="line">    dataType : <span class="string">"json"</span>,</span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.result == <span class="string">"1"</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href =<span class="string">"/learn"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"账号密码不能为空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.LearnResouce;</span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by tengj on 2017/3/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map =<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        String userName=request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">        String password=request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!userName.equals(<span class="string">""</span>) &amp;&amp; password!=<span class="string">""</span>)&#123;</span><br><span class="line">            User user =<span class="keyword">new</span> User(userName,password);</span><br><span class="line">            request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"1"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"result"</span>,<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/learn"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;LearnResouce&gt; learnList =<span class="keyword">new</span> ArrayList&lt;LearnResouce&gt;();</span><br><span class="line">        LearnResouce bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#getting-started-first-application"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"嘟嘟MD独立博客"</span>,<span class="string">"Spring Boot干货系列 "</span>,<span class="string">"http://tengj.top/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"后端编程嘟"</span>,<span class="string">"Spring Boot教程和视频 "</span>,<span class="string">"http://www.toutiao.com/m1559096720023553/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"纯洁的微笑"</span>,<span class="string">"Sping Boot系列文章"</span>,<span class="string">"http://www.ityouknow.com/spring-boot"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"CSDN——小当博客专栏"</span>,<span class="string">"Sping Boot学习"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"梁桂钊的博客"</span>,<span class="string">"Spring Boot 揭秘与实战"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"林祥纤博客系列"</span>,<span class="string">"从零开始学Spring Boot "</span>,<span class="string">"http://412887952-qq-com.iteye.com/category/356333"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"/template"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样访问的时候，如果未登录就会跳转到login.html页面，而访问<a href="http://localhost:8080/toLogin" target="_blank" rel="noopener">http://localhost:8080/toLogin</a> 和<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a> 不会被拦截。</p><p><img src="http://pi6jpxhir.bkt.clouddn.com/login_test.gif" alt="image"></p><p>更多配置可以查看WebMvcConfigurerAdapter的类的API。因其是WebMvcConfigurer接口的实现，所以WebMvcConfigurer的API方法也可以用来配置MVC。</p><p>但是只是实现这个接口的话，要实现所有的方法，比较麻烦。</p><p>所以还是推荐使用继承WebMvcConfigurerAdapter类来处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/jdbcTemplete.dudu.static.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/jdbcTemplete.dudu.static.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前面章节我们也有简单介绍过SpringBoot中对静态资源的默认支持，今天详细的来介绍下默认的支持，以及自定义扩展如何实现。&lt;/p&gt;
&lt;h1 id=&quot;默认资源映射&quot;&gt;&lt;a href=&quot;#默认资源映射&quot; class=&quot;headerlink&quot; title=&quot;默认资源映射&quot;&gt;&lt;/a&gt;默认资源映射&lt;/h1&gt;&lt;p&gt;Spring Boot 默认为我们提供了静态资源处理，使用 WebMvcAutoConfiguration 中的配置各种属性。&lt;br&gt;建议大家使用Spring Boot的默认配置方式，提供的静态资源映射如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;classpath:/META-INF/resources&lt;/li&gt;
&lt;li&gt;classpath:/resources&lt;/li&gt;
&lt;li&gt;classpath:/static&lt;/li&gt;
&lt;li&gt;&lt;p&gt;classpath:/public&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot：spring task定时任务</title>
    <link href="https://snjl.github.io/2018/11/30/springboot%EF%BC%9Aspring-task%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://snjl.github.io/2018/11/30/springboot：spring-task定时任务/</id>
    <published>2018-11-30T15:29:47.000Z</published>
    <updated>2018-11-30T15:30:11.826Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.springtask.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.springtask.git</a></p><p>创建一个项目，在DemoApplication上加上注解@EnableScheduling：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.task.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Task task;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在demo包里创建Task.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/6 * * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"["</span> + Thread.currentThread().getName() + <span class="string">"]"</span> + <span class="string">"this is scheduler task runing  "</span>+(count++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用@Scheduled注解，就会定时执行。</p><p>log日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[scheduling-1]this is scheduler task runing  0</span><br><span class="line">[scheduling-1]this is scheduler task runing  1</span><br><span class="line">[scheduling-1]this is scheduler task runing  2</span><br><span class="line">[scheduling-1]this is scheduler task runing  3</span><br><span class="line">[scheduling-1]this is scheduler task runing  4</span><br><span class="line">[scheduling-1]this is scheduler task runing  5</span><br><span class="line">[scheduling-1]this is scheduler task runing  6</span><br><span class="line">[scheduling-1]this is scheduler task runing  7</span><br><span class="line">[scheduling-1]this is scheduler task runing  8</span><br><span class="line">[scheduling-1]this is scheduler task runing  9</span><br><span class="line">[scheduling-1]this is scheduler task runing  10</span><br><span class="line">[scheduling-1]this is scheduler task runing  11</span><br><span class="line">[scheduling-1]this is scheduler task runing  12</span><br><span class="line">[scheduling-1]this is scheduler task runing  13</span><br><span class="line">[scheduling-1]this is scheduler task runing  14</span><br><span class="line">[scheduling-1]this is scheduler task runing  15</span><br><span class="line">[scheduling-1]this is scheduler task runing  16</span><br><span class="line">[scheduling-1]this is scheduler task runing  17</span><br><span class="line">[scheduling-1]this is scheduler task runing  18</span><br><span class="line">[scheduling-1]this is scheduler task runing  19</span><br><span class="line">[scheduling-1]this is scheduler task runing  20</span><br><span class="line">[scheduling-1]this is scheduler task runing  21</span><br></pre></td></tr></table></figure></p><p>不需要加入其它配置文件和注解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.springtask.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.spring
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="定时" scheme="https://snjl.github.io/tags/%E5%AE%9A%E6%97%B6/"/>
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>spring task定时任务</title>
    <link href="https://snjl.github.io/2018/11/30/spring-task%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://snjl.github.io/2018/11/30/spring-task定时任务/</id>
    <published>2018-11-30T15:28:28.000Z</published>
    <updated>2018-11-30T15:29:21.193Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/spring.springtask.git" target="_blank" rel="noopener">https://github.com/snjl/spring.springtask.git</a></p><p>SprngTask没有专门的包，其核心类位于spring-context包中。所以引入spring的核心包此功能即可使用。</p><p>　　在实际的项目中，我们经常将job作为action层，在job中注入service去操作底层的dao，或者定时的向其他系统拉取数据,再或者向其他系统推送数据。</p><a id="more"></a><p>xml配置文件applicationContext.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.task.app"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定时器开关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringTimer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.task.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 34924</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTimer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"0/5 * * * * ? "</span>) <span class="comment">//每5秒执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入测试  "</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类TaskTest.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.task.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.task.app.SpringTimer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(value = <span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SpringTimer springTimerTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">springTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>log:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">进入测试  Fri Nov 30 21:39:20 CST 2018</span><br><span class="line">进入测试  Fri Nov 30 21:39:25 CST 2018</span><br><span class="line">进入测试  Fri Nov 30 21:39:30 CST 2018</span><br><span class="line">进入测试  Fri Nov 30 21:39:35 CST 2018</span><br><span class="line">进入测试  Fri Nov 30 21:39:40 CST 2018</span><br><span class="line">进入测试  Fri Nov 30 21:39:45 CST 2018</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/spring.springtask.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/spring.springtask.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SprngTask没有专门的包，其核心类位于spring-context包中。所以引入spring的核心包此功能即可使用。&lt;/p&gt;
&lt;p&gt;　　在实际的项目中，我们经常将job作为action层，在job中注入service去操作底层的dao，或者定时的向其他系统拉取数据,再或者向其他系统推送数据。&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="https://snjl.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://snjl.github.io/tags/spring/"/>
    
      <category term="定时" scheme="https://snjl.github.io/tags/%E5%AE%9A%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>selenium一些记录</title>
    <link href="https://snjl.github.io/2018/11/29/selenium%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95-1/"/>
    <id>https://snjl.github.io/2018/11/29/selenium一些记录-1/</id>
    <published>2018-11-29T15:48:01.000Z</published>
    <updated>2018-11-29T15:51:31.173Z</updated>
    
    <content type="html"><![CDATA[<p>selenium中文文档：<a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://selenium-python-zh.readthedocs.io/en/latest/index.html</a></p><p>使用selenium，安装好对应版本的chromedriver和chrome，然后将driver放入项目，用 driver = webdriver.Chrome()启动。</p><p>selenium刷新：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh()</span><br><span class="line"><span class="comment"># 或调用js</span></span><br><span class="line">driver.execute_script(<span class="string">"location.reload()"</span>)</span><br></pre></td></tr></table></figure></p><p>请求头配置参考：<a href="https://blog.csdn.net/u013440574/article/details/81911954" target="_blank" rel="noopener">https://blog.csdn.net/u013440574/article/details/81911954</a></p><a id="more"></a><p>仅添加普通请求头：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opt = webdriver.ChromeOptions()</span><br><span class="line">   opt.set_headless()</span><br><span class="line">   opt.add_argument(</span><br><span class="line">       <span class="string">'user-agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.6726.400 QQBrowser/10.2.2265.400'</span>)</span><br><span class="line"></span><br><span class="line">   driver = webdriver.Chrome(options=opt)</span><br></pre></td></tr></table></figure></p><p>这里使用opt作为chromedriver的参数，添加user-agent信息，然后调用webdriver.Chrome，并传入opt。</p><p><strong>注：这里使用的是无窗口界面的chrome selenium爬虫，所以可以设置，如果使用有界面的，则不必设置，因为带界面必定带请求头和各种信息。</strong></p><p>Selenium不再推荐使用PhantomJS，会报如下警告</p><p>UserWarning: Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead<br> warnings.warn(‘Selenium support for PhantomJS has been deprecated, please use headless ‘</p><p>于是从PhantomJS转移到Chrome，使用headless versions of Chrome时，首先要安装Chrome，然后下载chromedriver，再把chromedriver的地址配置到系统环境变量path中，方便调用。如果不把chromedriver的地址配置到系统环境变量的话，也可以在使用时指定chromedriver的地址。</p><p>注意Chrome和chromedriver有版本对应的要求，系统中安装了某一版本的chrome要使用对应版本的chromedriver，其实下载最新版本的Chrome和chromedriver就行了，一般都是对应的。</p><p>Chrome下载地址：<a href="https://chrome.en.softonic.com/" target="_blank" rel="noopener">https://chrome.en.softonic.com/</a></p><p>chromedriver下载地址：<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver/</a></p><p><strong>报错：[0917/002914.533:ERROR:gpu_process_transport_factory.cc(1007)] Lost UI shared context.</strong></p><p>原因是在windows系统中Chrome无头模式下，其中的SwiftShader软件会触发断言失败，但实际上不影响程序执行，可以忽略该错误。</p><p>可以设置chromedriver的日志级别，只有大于设置级别的日志还会输出，该配置参数为：log-level：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opt.add_argument(<span class="string">'log-level=3'</span>)</span><br><span class="line"><span class="comment"># INFO = 0, </span></span><br><span class="line"><span class="comment"># WARNING = 1, </span></span><br><span class="line"><span class="comment"># LOG_ERROR = 2, </span></span><br><span class="line"><span class="comment"># LOG_FATAL = 3</span></span><br><span class="line"><span class="comment"># default is 0</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;selenium中文文档：&lt;a href=&quot;https://selenium-python-zh.readthedocs.io/en/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://selenium-python-zh.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用selenium，安装好对应版本的chromedriver和chrome，然后将driver放入项目，用 driver = webdriver.Chrome()启动。&lt;/p&gt;
&lt;p&gt;selenium刷新：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;driver.refresh()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 或调用js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;driver.execute_script(&lt;span class=&quot;string&quot;&gt;&quot;location.reload()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;请求头配置参考：&lt;a href=&quot;https://blog.csdn.net/u013440574/article/details/81911954&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/u013440574/article/details/81911954&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://snjl.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://snjl.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="selenium" scheme="https://snjl.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>springboot使用JdbcTemplate（二）</title>
    <link href="https://snjl.github.io/2018/11/29/springboot%E4%BD%BF%E7%94%A8JdbcTemplate%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://snjl.github.io/2018/11/29/springboot使用JdbcTemplate（二）/</id>
    <published>2018-11-29T15:45:12.000Z</published>
    <updated>2018-11-29T15:51:43.801Z</updated>
    
    <content type="html"><![CDATA[<p>参考博客 <a href="http://tengj.top/2017/04/13/springboot8/" target="_blank" rel="noopener">http://tengj.top/2017/04/13/springboot8/</a><br>项目地址：<a href="https://github.com/snjl/jdbcTemplete.dudu.example" target="_blank" rel="noopener">https://github.com/snjl/jdbcTemplete.dudu.example</a></p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在pom.xml里添加spring-boot-starter-jdbc依赖跟mysql依赖：</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><p>在src/main/resources/application.properties中配置数据源信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = root</span><br><span class="line">spring.datasource.driver-class-name = com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p><h1 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h1><p>添加mysql依赖（spring-boot-starter-jdbc 默认使用tomcat-jdbc数据源，如果要使用其他数据源，需要添加额外的依赖，这里使用了阿里巴巴的数据池管理）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改Application.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="comment">//destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.</span></span><br><span class="line"><span class="meta">@Bean</span>(destroyMethod =  <span class="string">"close"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">dataSource.setUrl(env.getProperty(<span class="string">"spring.datasource.url"</span>));</span><br><span class="line">dataSource.setUsername(env.getProperty(<span class="string">"spring.datasource.username"</span>));<span class="comment">//用户名</span></span><br><span class="line">dataSource.setPassword(env.getProperty(<span class="string">"spring.datasource.password"</span>));<span class="comment">//密码</span></span><br><span class="line">dataSource.setDriverClassName(env.getProperty(<span class="string">"spring.datasource.driver-class-name"</span>));</span><br><span class="line">dataSource.setInitialSize(<span class="number">2</span>);<span class="comment">//初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span></span><br><span class="line">dataSource.setMaxActive(<span class="number">20</span>);<span class="comment">//最大连接池数量</span></span><br><span class="line">dataSource.setMinIdle(<span class="number">0</span>);<span class="comment">//最小连接池数量</span></span><br><span class="line">dataSource.setMaxWait(<span class="number">60000</span>);<span class="comment">//获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</span></span><br><span class="line">dataSource.setValidationQuery(<span class="string">"SELECT 1"</span>);<span class="comment">//用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</span></span><br><span class="line">dataSource.setTestOnBorrow(<span class="keyword">false</span>);<span class="comment">//申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line">dataSource.setTestWhileIdle(<span class="keyword">true</span>);<span class="comment">//建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">dataSource.setPoolPreparedStatements(<span class="keyword">false</span>);<span class="comment">//是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</span></span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring Boot会智能地选择我们自己配置的这个DataSource实例。</p><h1 id="脚本初始化"><a href="#脚本初始化" class="headerlink" title="脚本初始化"></a>脚本初始化</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`spring`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`spring`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`learn_resource`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`learn_resource`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'ID'</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'作者'</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'描述'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址链接'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">1029</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">999</span>,<span class="string">'官方SpriongBoot例子'</span>,<span class="string">'官方SpriongBoot例子'</span>,<span class="string">'https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1000</span>,<span class="string">'龙果学院'</span>,<span class="string">'Spring Boot 教程系列学习'</span>,<span class="string">'http://www.roncoo.com/article/detail/124661'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1001</span>,<span class="string">'嘟嘟MD独立博客'</span>,<span class="string">'Spring Boot干货系列'</span>,<span class="string">'http://tengj.top/'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1002</span>,<span class="string">'后端编程嘟'</span>,<span class="string">'Spring Boot视频教程'</span>,<span class="string">'http://www.toutiao.com/m1559096720023553/'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1003</span>,<span class="string">'程序猿DD'</span>,<span class="string">'Spring Boot系列'</span>,<span class="string">'http://www.roncoo.com/article/detail/125488'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1004</span>,<span class="string">'纯洁的微笑'</span>,<span class="string">'Sping Boot系列文章'</span>,<span class="string">'http://www.ityouknow.com/spring-boot'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1005</span>,<span class="string">'CSDN——小当博客专栏'</span>,<span class="string">'Sping Boot学习'</span>,<span class="string">'http://blog.csdn.net/column/details/spring-boot.html'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1006</span>,<span class="string">'梁桂钊的博客'</span>,<span class="string">'Spring Boot 揭秘与实战'</span>,<span class="string">'http://blog.csdn.net/column/details/spring-boot.html'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1007</span>,<span class="string">'林祥纤博客系列'</span>,<span class="string">'从零开始学Spring Boot'</span>,<span class="string">'http://412887952-qq-com.iteye.com/category/356333'</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`learn_resource`</span>(<span class="string">`id`</span>,<span class="string">`author`</span>,<span class="string">`title`</span>,<span class="string">`url`</span>) <span class="keyword">values</span> (<span class="number">1028</span>,<span class="string">'杜琪'</span>,<span class="string">'关于Spring Boot的博客集合'</span>,<span class="string">'http://www.jianshu.com/p/7e2e5e7b32ab'</span>);</span><br></pre></td></tr></table></figure><h1 id="使用JdbcTemplate"><a href="#使用JdbcTemplate" class="headerlink" title="使用JdbcTemplate"></a>使用JdbcTemplate</h1><p>Spring的JdbcTemplate是自动配置的，可以直接使用@Autowired来注入到自己的bean中来使用。这里做了一套增伤改查。<br>pojo类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnResouce</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"><span class="comment">// SET和GET方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>dao层的接口实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dudu.dao.LearnDao;</span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.LearnResouce;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.Page;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.StringUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by tengj on 2017/4/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnDaoImpl</span>  <span class="keyword">implements</span> <span class="title">LearnDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(LearnResouce learnResouce)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"insert into learn_resource(author, title,url) values(?, ?, ?)"</span>,learnResouce.getAuthor(),learnResouce.getTitle(),learnResouce.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(LearnResouce learnResouce)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"update learn_resource set author=?,title=?,url=? where id = ?"</span>,<span class="keyword">new</span> Object[]&#123;learnResouce.getAuthor(),learnResouce.getTitle(),learnResouce.getUrl(),learnResouce.getId()&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteByIds</span><span class="params">(String ids)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"delete from learn_resource where id in("</span>+ids+<span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LearnResouce <span class="title">queryLearnResouceById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        List&lt;LearnResouce&gt; list = jdbcTemplate.query(<span class="string">"select * from learn_resource where id = ?"</span>, <span class="keyword">new</span> Object[]&#123;id&#125;, <span class="keyword">new</span> BeanPropertyRowMapper(LearnResouce.class));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != list &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            LearnResouce learnResouce = list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> learnResouce;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page <span class="title">queryLearnResouceList</span><span class="params">(Map&lt;String,Object&gt; params)</span> </span>&#123;</span><br><span class="line">        StringBuffer sql =<span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">"select * from learn_resource where 1=1"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtil.isNull((String)params.get(<span class="string">"author"</span>)))&#123;</span><br><span class="line">            sql.append(<span class="string">" and author like '%"</span>).append((String)params.get(<span class="string">"author"</span>)).append(<span class="string">"%'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtil.isNull((String)params.get(<span class="string">"title"</span>)))&#123;</span><br><span class="line">            sql.append(<span class="string">" and title like '%"</span>).append((String)params.get(<span class="string">"title"</span>)).append(<span class="string">"%'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Page page = <span class="keyword">new</span> Page(sql.toString(), Integer.parseInt(params.get(<span class="string">"page"</span>).toString()), Integer.parseInt(params.get(<span class="string">"rows"</span>).toString()), jdbcTemplate);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中值得注意的几个点：</p><ul><li>jdbcTemplete直接使用@Autowired注解注入的；</li><li>deleteByIds这个方法是传入的数据是形如”(1,2,3,5)”这样的数据，是在controller里或者前端组装好的；</li><li>queryLearnResouceList这个方法返回的是一个Page对象,它需要的参数里有一个page，指的是当前页码，下面是Page.java的代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by tengj on 2017/4/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一页显示的记录数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numPerPage;</span><br><span class="line">    <span class="comment">//记录总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalRows;</span><br><span class="line">    <span class="comment">//总页数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPages;</span><br><span class="line">    <span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPage;</span><br><span class="line">    <span class="comment">//起始行数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startIndex;</span><br><span class="line">    <span class="comment">//结束行数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastIndex;</span><br><span class="line">    <span class="comment">//结果集存放List</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; resultList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**分页构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql 包含筛选条件的sql，但不包含分页相关约束，如mysql的limit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentPage 当前页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numPerPage 每页记录数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jdbcTemplate jdbcTemplate实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(String sql,<span class="keyword">int</span> currentPage,<span class="keyword">int</span> numPerPage,JdbcTemplate jdbcTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jdbcTemplate == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Page.jdbcTemplate is null"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sql == <span class="keyword">null</span> || sql.equals(<span class="string">""</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Page.sql is empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置每页显示记录数</span></span><br><span class="line">        setNumPerPage(numPerPage);</span><br><span class="line">        <span class="comment">//设置要显示的页数</span></span><br><span class="line">        setCurrentPage(currentPage);</span><br><span class="line">        <span class="comment">//计算总记录数</span></span><br><span class="line">        StringBuffer totalSQL = <span class="keyword">new</span> StringBuffer(<span class="string">" SELECT count(*) FROM ( "</span>);</span><br><span class="line">        totalSQL.append(sql);</span><br><span class="line">        totalSQL.append(<span class="string">" ) totalTable "</span>);</span><br><span class="line">        <span class="comment">//总记录数</span></span><br><span class="line">        setTotalRows(jdbcTemplate.queryForObject(totalSQL.toString(),Integer.class));</span><br><span class="line">        <span class="comment">//计算总页数</span></span><br><span class="line">        setTotalPages();</span><br><span class="line">        <span class="comment">//计算起始行数</span></span><br><span class="line">        setStartIndex();</span><br><span class="line">        <span class="comment">//计算结束行数</span></span><br><span class="line">        setLastIndex();</span><br><span class="line">        System.out.println(<span class="string">"lastIndex="</span>+lastIndex);</span><br><span class="line">        <span class="comment">//使用mysql时直接使用limits</span></span><br><span class="line">        StringBuffer paginationSQL = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        paginationSQL.append(sql);</span><br><span class="line">        paginationSQL.append(<span class="string">" limit "</span> + startIndex + <span class="string">","</span> + lastIndex);</span><br><span class="line">        <span class="comment">//装入结果集</span></span><br><span class="line">        setResultList(jdbcTemplate.queryForList(paginationSQL.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算总页数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(totalRows % numPerPage == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.totalPages = totalRows / numPerPage;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.totalPages = (totalRows / numPerPage) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算结束时候的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"totalRows="</span>+totalRows);<span class="comment">///////////</span></span><br><span class="line">        System.out.println(<span class="string">"numPerPage="</span>+numPerPage);<span class="comment">///////////</span></span><br><span class="line">        <span class="keyword">if</span>( totalRows &lt; numPerPage)&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastIndex = totalRows;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>((totalRows % numPerPage == <span class="number">0</span>) || (totalRows % numPerPage != <span class="number">0</span> &amp;&amp; currentPage &lt; totalPages))&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastIndex = currentPage * numPerPage;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(totalRows % numPerPage != <span class="number">0</span> &amp;&amp; currentPage == totalPages)&#123;<span class="comment">//最后一页</span></span><br><span class="line">            <span class="keyword">this</span>.lastIndex = totalRows ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Page的构造函数，将sql和其他条件拼接起来，从而得到每一页的信息。最后返回一个List&lt;Map&lt;String, Object&gt;&gt;对象和一些例如页码数、总数据条数等数据，作为一个Page数据。</p><h1 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h1><p>没有特点。</p><h1 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.dudu.domain.LearnResouce;</span><br><span class="line"><span class="keyword">import</span> com.dudu.service.LearnService;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.Page;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.ServletUtil;</span><br><span class="line"><span class="keyword">import</span> com.dudu.tools.StringUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by tengj on 2017/3/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/learn"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LearnService learnService;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">learn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"learn-resource"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/queryLeanList"</span>,method = RequestMethod.POST,produces=<span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryLearnList</span><span class="params">(HttpServletRequest request ,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String page = request.getParameter(<span class="string">"page"</span>); <span class="comment">// 取得当前页数,注意这是jqgrid自身的参数</span></span><br><span class="line">        String rows = request.getParameter(<span class="string">"rows"</span>); <span class="comment">// 取得每页显示行数，,注意这是jqgrid自身的参数</span></span><br><span class="line">        String author = request.getParameter(<span class="string">"author"</span>);</span><br><span class="line">        String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">        params.put(<span class="string">"page"</span>, page);</span><br><span class="line">        params.put(<span class="string">"rows"</span>, rows);</span><br><span class="line">        params.put(<span class="string">"author"</span>, author);</span><br><span class="line">        params.put(<span class="string">"title"</span>, title);</span><br><span class="line">        Page pageObj =learnService.queryLearnResouceList(params);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; learnList=pageObj.getResultList();</span><br><span class="line">        JSONObject jo=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jo.put(<span class="string">"rows"</span>, learnList);</span><br><span class="line">        jo.put(<span class="string">"total"</span>, pageObj.getTotalPages());</span><br><span class="line">        jo.put(<span class="string">"records"</span>, pageObj.getTotalRows());</span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, jo, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新添教程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLearn</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        JSONObject result=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        String author = request.getParameter(<span class="string">"author"</span>);</span><br><span class="line">        String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(author))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"作者不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(title))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程名称不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(url))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"地址不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LearnResouce learnResouce = <span class="keyword">new</span> LearnResouce();</span><br><span class="line">        learnResouce.setAuthor(author);</span><br><span class="line">        learnResouce.setTitle(title);</span><br><span class="line">        learnResouce.setUrl(url);</span><br><span class="line">        <span class="keyword">int</span> index=learnService.add(learnResouce);</span><br><span class="line">        System.out.println(<span class="string">"结果="</span>+index);</span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息添加成功!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息添加失败!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改教程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateLearn</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        JSONObject result=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">        LearnResouce learnResouce=learnService.queryLearnResouceById(Long.valueOf(id));</span><br><span class="line">        String author = request.getParameter(<span class="string">"author"</span>);</span><br><span class="line">        String title = request.getParameter(<span class="string">"title"</span>);</span><br><span class="line">        String url = request.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(author))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"作者不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(title))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程名称不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNull(url))&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"地址不能为空!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        learnResouce.setAuthor(author);</span><br><span class="line">        learnResouce.setTitle(title);</span><br><span class="line">        learnResouce.setUrl(url);</span><br><span class="line">        <span class="keyword">int</span> index=learnService.update(learnResouce);</span><br><span class="line">        System.out.println(<span class="string">"修改结果="</span>+index);</span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息修改成功!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息修改失败!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除教程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/delete"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(HttpServletRequest request ,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String ids = request.getParameter(<span class="string">"ids"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ids==="</span>+ids);</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="comment">//删除操作</span></span><br><span class="line">        <span class="keyword">int</span> index = learnService.deleteByIds(ids);</span><br><span class="line">        <span class="keyword">if</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息删除成功!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.put(<span class="string">"message"</span>,<span class="string">"教程信息删除失败!"</span>);</span><br><span class="line">            result.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ServletUtil.createSuccessResponse(<span class="number">200</span>, result, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了ServletUtil，在此仅举出一例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createSuccessResponse</span><span class="params">(Integer httpCode, Object result, SerializerFeature serializerFeature, SerializeFilter filter, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">String jsonString = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">response.setCharacterEncoding(RESPONSE_CHARACTERENCODING);</span><br><span class="line">response.setContentType(RESPONSE_CONTENTTYPE);</span><br><span class="line">response.setStatus(httpCode);</span><br><span class="line">printWriter = response.getWriter();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != result)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=filter)&#123;</span><br><span class="line">jsonString = JSONObject.toJSONString(result,filter,serializerFeature);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//jsonString = JSONObject.toJSONString(result, serializerFeature);</span></span><br><span class="line">jsonString = JSONObject.toJSONStringWithDateFormat(result,<span class="string">"yyyy-MM-dd HH:ss:mm"</span>,serializerFeature);</span><br><span class="line">&#125;</span><br><span class="line">printWriter.write(jsonString); </span><br><span class="line">&#125;</span><br><span class="line">printWriter.flush();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(<span class="string">"createResponse failed"</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=printWriter)printWriter.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jsonString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h1><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/jdbc_login.png" alt="iamge"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/jdbc_show.png" alt="iamge"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/jdbc_show.png" alt="iamge"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考博客 &lt;a href=&quot;http://tengj.top/2017/04/13/springboot8/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tengj.top/2017/04/13/springboot8/&lt;/a&gt;&lt;br&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/jdbcTemplete.dudu.example&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/jdbcTemplete.dudu.example&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h1&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在pom.xml里添加spring-boot-starter-jdbc依赖跟mysql依赖：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="JdbcTemplate" scheme="https://snjl.github.io/tags/JdbcTemplate/"/>
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>springboot使用thymeleaf开发web应用</title>
    <link href="https://snjl.github.io/2018/11/29/springboot%E4%BD%BF%E7%94%A8thymeleaf%E5%BC%80%E5%8F%91web%E5%BA%94%E7%94%A8/"/>
    <id>https://snjl.github.io/2018/11/29/springboot使用thymeleaf开发web应用/</id>
    <published>2018-11-29T15:44:31.000Z</published>
    <updated>2018-11-29T15:51:35.964Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.thymeleaf_demo.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.thymeleaf_demo.git</a></p><h1 id="Spring-Web-MVC"><a href="#Spring-Web-MVC" class="headerlink" title="Spring Web MVC"></a>Spring Web MVC</h1><p>Spring Web MVC框架（通常简称为”Spring MVC”）是一个富”模型，视图，控制器”的web框架。</p><p>Spring MVC允许你创建特定的@Controller或@RestController beans来处理传入的HTTP请求。</p><a id="more"></a><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;user&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;user&#125;/customers"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">getUserCustomers</span><span class="params">(@PathVariable Long user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;user&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">deleteUser</span><span class="params">(@PathVariable Long user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Spring-MVC自动配置"><a href="#Spring-MVC自动配置" class="headerlink" title="Spring MVC自动配置"></a>Spring MVC自动配置</h1><p>Spring Boot为Spring MVC提供适用于多数应用的自动配置功能。在Spring默认基础上，自动配置添加了以下特性：</p><ol><li>引入ContentNegotiatingViewResolver和BeanNameViewResolver beans。</li><li>对静态资源的支持，包括对WebJars的支持。</li><li>自动注册Converter，GenericConverter，Formatter beans。</li><li>对HttpMessageConverters的支持。</li><li>自动注册MessageCodeResolver。</li><li>对静态index.html的支持。</li><li>对自定义Favicon的支持。</li></ol><p>如果想全面控制Spring MVC，你可以添加自己的@Configuration，并使用@EnableWebMvc对其注解。如果想保留Spring Boot MVC的特性，并只是添加其他的MVC配置(拦截器，formatters，视图控制器等)，你可以添加自己的WebMvcConfigurerAdapter类型的@Bean（不使用@EnableWebMvc注解）.</p><h1 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h1><p>默认情况下，Spring Boot从classpath下一个叫/static（/public，/resources或/META-INF/resources）的文件夹或从ServletContext根目录提供静态内容。这使用了Spring MVC的ResourceHttpRequestHandler，所以你可以通过添加自己的WebMvcConfigurerAdapter并覆写addResourceHandlers方法来改变这个行为（加载静态文件）。</p><p>在一个单独的web应用中，容器默认的servlet是开启的，如果Spring决定不处理某些请求，默认的servlet作为一个回退（降级）将从ServletContext根目录加载内容。大多数时候，这不会发生（除非你修改默认的MVC配置），因为Spring总能够通过DispatcherServlet处理请求。</p><p>此外，上述标准的静态资源位置有个例外情况是Webjars内容。任何在/webjars/**路径下的资源都将从jar文件中提供，只要它们以Webjars的格式打包。</p><p><strong>注：如果你的应用将被打包成jar，那就不要使用src/main/webapp文件夹。尽管该文件夹是一个共同的标准，但它仅在打包成war的情况下起作用，并且如果产生一个jar，多数构建工具都会静悄悄的忽略它。</strong></p><h1 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h1><p>Spring Boot支持多种模版引擎包括：</p><ul><li>FreeMarker</li><li>Groovy</li><li>Thymeleaf(官方推荐)</li><li>Mustache</li></ul><p>JSP技术Spring Boot官方是不推荐的，原因有三：</p><ol><li>tomcat只支持war的打包方式，不支持可执行的jar。</li><li>Jetty 嵌套的容器不支持jsp</li><li>Undertow</li><li>创建自定义error.jsp页面不会覆盖错误处理的默认视图，而应该使用自定义错误页面</li></ol><p>当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：src/main/resources/templates。当然也可以修改这个路径，具体如何修改，可在后续各模板引擎的配置属性中查询并修改。</p><h1 id="Thymeleaf模版引擎"><a href="#Thymeleaf模版引擎" class="headerlink" title="Thymeleaf模版引擎"></a>Thymeleaf模版引擎</h1><p>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMaker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比，Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用。它的功能特性如下：</p><ul><li>Spring MVC中@Controller中的方法可以直接返回模板名称，接下来Thymeleaf模板引擎会自动进行渲染</li><li>模板中的表达式支持Spring表达式语言（Spring EL)</li><li>表单支持，并兼容Spring MVC的数据绑定与验证机制</li><li>国际化支持</li></ul><p>Spring官方也推荐使用Thymeleaf,所以本篇代码整合就使用Thymeleaf来整合。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="domain类"><a href="#domain类" class="headerlink" title="domain类"></a>domain类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LearnResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LearnResource</span><span class="params">(String author, String title, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h1><p>两种写法均可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/learn"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnResourceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;LearnResource&gt; learnList =<span class="keyword">new</span> ArrayList&lt;LearnResource&gt;();</span><br><span class="line">        LearnResource bean =<span class="keyword">new</span> LearnResource(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#getting-started-first-application"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"嘟嘟MD独立博客"</span>,<span class="string">"Spring Boot干货系列 "</span>,<span class="string">"http://tengj.top/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"后端编程嘟"</span>,<span class="string">"Spring Boot教程和视频 "</span>,<span class="string">"http://www.toutiao.com/m1559096720023553/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"纯洁的微笑"</span>,<span class="string">"Sping Boot系列文章"</span>,<span class="string">"http://www.ityouknow.com/spring-boot"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"CSDN——小当博客专栏"</span>,<span class="string">"Sping Boot学习"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"梁桂钊的博客"</span>,<span class="string">"Spring Boot 揭秘与实战"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResource(<span class="string">"林祥纤博客系列"</span>,<span class="string">"从零开始学Spring Boot "</span>,<span class="string">"http://412887952-qq-com.iteye.com/category/356333"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"/learning"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/learning"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">       List&lt;LearnResource&gt; learnList =<span class="keyword">new</span> ArrayList&lt;LearnResource&gt;();</span><br><span class="line">       LearnResource bean =<span class="keyword">new</span> LearnResource(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#getting-started-first-application"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"嘟嘟MD独立博客"</span>,<span class="string">"Spring Boot干货系列 "</span>,<span class="string">"http://tengj.top/"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"后端编程嘟"</span>,<span class="string">"Spring Boot教程和视频 "</span>,<span class="string">"http://www.toutiao.com/m1559096720023553/"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"纯洁的微笑"</span>,<span class="string">"Sping Boot系列文章"</span>,<span class="string">"http://www.ityouknow.com/spring-boot"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"CSDN——小当博客专栏"</span>,<span class="string">"Sping Boot学习"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"梁桂钊的博客"</span>,<span class="string">"Spring Boot 揭秘与实战"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       bean =<span class="keyword">new</span> LearnResource(<span class="string">"林祥纤博客系列"</span>,<span class="string">"从零开始学Spring Boot "</span>,<span class="string">"http://412887952-qq-com.iteye.com/category/356333"</span>);</span><br><span class="line">       learnList.add(bean);</span><br><span class="line">       map.addAttribute(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"learning"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>一个访问链接是localhost:8080/learn/(带斜杆)，另一个是<a href="http://localhost:8080/learn/learning，但是对应的模版文件均是learning.html。" target="_blank" rel="noopener">http://localhost:8080/learn/learning，但是对应的模版文件均是learning.html。</a></p><h1 id="html编写"><a href="#html编写" class="headerlink" title="html编写"></a>html编写</h1><p>引入依赖后就在默认的模板路径src/main/resources/templates下编写模板文件即可完成。这里我们新建一个index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn Resources<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center;margin:0 auto;width: 1000px; "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>springboot学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>教程名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/*@thymesVar id="learnList" type=""*/--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"learn : $&#123;learnList&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;learn.author&#125;"</span>&gt;</span>嘟嘟MD<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;learn.title&#125;"</span>&gt;</span>SPringBoot干货系列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"$&#123;learn.url&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>注：通过xmlns:th=”<a href="http://www.thymeleaf.org“" target="_blank" rel="noopener">http://www.thymeleaf.org“</a> 命令空间，将静态页面转换为动态的视图，需要进行动态处理的元素将使用“th:”前缀。</strong></p><p>直接打开learning.html和启动工程后访问<a href="http://localhost:8080/learn/" target="_blank" rel="noopener">http://localhost:8080/learn/</a> 看到的效果，Thymeleaf做到了不破坏HTML自身内容的数据逻辑分离。</p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/thymeleaf%20html.png" alt="image"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/thymeleaf%20real.png" alt="image"></p><h1 id="Thymeleaf的默认参数配置"><a href="#Thymeleaf的默认参数配置" class="headerlink" title="Thymeleaf的默认参数配置"></a>Thymeleaf的默认参数配置</h1><p>在application.properties中可以配置thymeleaf模板解析器属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># THYMELEAF (ThymeleafAutoConfiguration)</span><br><span class="line">#开启模板缓存（默认值：true）</span><br><span class="line">spring.thymeleaf.cache=true </span><br><span class="line">#Check that the template exists before rendering it.</span><br><span class="line">spring.thymeleaf.check-template=true </span><br><span class="line">#检查模板位置是否正确（默认值:true）</span><br><span class="line">spring.thymeleaf.check-template-location=true</span><br><span class="line">#Content-Type的值（默认值：text/html）</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br><span class="line">#开启MVC Thymeleaf视图解析（默认值：true）</span><br><span class="line">spring.thymeleaf.enabled=true</span><br><span class="line">#模板编码</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">#要被排除在解析之外的视图名称列表，用逗号分隔</span><br><span class="line">spring.thymeleaf.excluded-view-names=</span><br><span class="line">#要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)</span><br><span class="line">spring.thymeleaf.mode=HTML5</span><br><span class="line">#在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">#在构建URL时添加到视图名称后的后缀（默认值：.html）</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">#Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。</span><br><span class="line">spring.thymeleaf.template-resolver-order=</span><br><span class="line">#可解析的视图名称列表，用逗号分隔</span><br><span class="line">spring.thymeleaf.view-names=</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.thymeleaf_demo.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.thymeleaf_demo.git&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spring-Web-MVC&quot;&gt;&lt;a href=&quot;#Spring-Web-MVC&quot; class=&quot;headerlink&quot; title=&quot;Spring Web MVC&quot;&gt;&lt;/a&gt;Spring Web MVC&lt;/h1&gt;&lt;p&gt;Spring Web MVC框架（通常简称为”Spring MVC”）是一个富”模型，视图，控制器”的web框架。&lt;/p&gt;
&lt;p&gt;Spring MVC允许你创建特定的@Controller或@RestController beans来处理传入的HTTP请求。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>requests包的异常处理</title>
    <link href="https://snjl.github.io/2018/11/26/requests%E5%8C%85%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://snjl.github.io/2018/11/26/requests包的异常处理/</id>
    <published>2018-11-26T15:40:08.000Z</published>
    <updated>2018-11-26T15:40:50.335Z</updated>
    
    <content type="html"><![CDATA[<p>可以使用raise_for_status()来获取所有错误，并且在except语句中使用 requests.RequestException来得到错误原因：</p><pre><code>def get_bs_obj(link):    try:        response = requests.get(link, headers=headers, timeout=10)        response.raise_for_status()        bs_obj = bs(response.text)        return bs_obj    except requests.RequestException as e:        print(e)        return None</code></pre><p>例如会产生报错：</p><pre><code>HTTPConnectionPool(host=&apos;synthezise.christuniversity.in&apos;, port=80): Max retries exceeded with url: / (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0000021B9CB8A0F0&gt;: Failed to establish a new connection: [Errno 11001] getaddrinfo failed&apos;,))HTTPConnectionPool(host=&apos;icu2018cls.umk.edu.my&apos;, port=80): Max retries exceeded with url: / (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0000021B9CB8ACF8&gt;: Failed to establish a new connection: [Errno 11001] getaddrinfo failed&apos;,))HTTPSConnectionPool(host=&apos;icsah.eu&apos;, port=443): Max retries exceeded with url: /events (Caused by SSLError(SSLError(&quot;bad handshake: SysCallError(-1, &apos;Unexpected EOF&apos;)&quot;,),))HTTPSConnectionPool(host=&apos;icsah.eu&apos;, port=443): Max retries exceeded with url: /events (Caused by SSLError(SSLError(&quot;bad handshake: SysCallError(-1, &apos;Unexpected EOF&apos;)&quot;,),))</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可以使用raise_for_status()来获取所有错误，并且在except语句中使用 requests.RequestException来得到错误原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def get_bs_obj(link):
    try:
        resp
      
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
      <category term="爬虫" scheme="https://snjl.github.io/categories/python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="requests" scheme="https://snjl.github.io/tags/requests/"/>
    
      <category term="爬虫" scheme="https://snjl.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>numpy常用函数</title>
    <link href="https://snjl.github.io/2018/11/26/numpy%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://snjl.github.io/2018/11/26/numpy常用函数/</id>
    <published>2018-11-26T15:34:51.000Z</published>
    <updated>2018-11-26T15:36:05.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="np-linspace-start-stop-num-50-endpoint-True-retstep-False-dtype-None"><a href="#np-linspace-start-stop-num-50-endpoint-True-retstep-False-dtype-None" class="headerlink" title="np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)"></a>np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">start标量</span><br><span class="line">    序列的起始值。</span><br><span class="line">stop标量</span><br><span class="line">    除非`endpoint`设置为False，否则序列的结束值。</span><br><span class="line">    在这种情况下，序列由除``num + 1``的最后一个组成</span><br><span class="line">    均匀间隔的样本，以便排除`stop`。注意这一步</span><br><span class="line">    当`endpoint`为False时，大小会改变。</span><br><span class="line"></span><br><span class="line">num：int，可选</span><br><span class="line">    要生成的样本数。默认值为50.必须为非负数。</span><br><span class="line"></span><br><span class="line">endpoint：bool，可选</span><br><span class="line">    如果为True，则`stop`是最后一个样本。否则，它不包括在内。</span><br><span class="line">    默认为True。</span><br><span class="line">    </span><br><span class="line">retstep：bool，可选</span><br><span class="line">    如果为True，则返回（`samples`，`step`），其中`step`是间距</span><br><span class="line">    样本之间。</span><br><span class="line">    </span><br><span class="line">dtype：dtype，可选</span><br><span class="line">    输出数组的类型。如果没有给出`dtype`，推断数据</span><br><span class="line">    从其他输入参数中键入。</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-1, 1, 5)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">array([-1. , -0.5,  0. ,  0.5,  1. ])</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1, 1, 5,endpoint=False)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">array([-1. , -0.6, -0.2,  0.2,  0.6])</span><br><span class="line"></span><br><span class="line">x = np.linspace(-1,1,5,endpoint=False,retstep=True)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">(array([-1. , -0.6, -0.2,  0.2,  0.6]), 0.4)</span><br></pre></td></tr></table></figure><h1 id="np-random-normal-loc-0-0-scale-1-0-size-None"><a href="#np-random-normal-loc-0-0-scale-1-0-size-None" class="headerlink" title="np.random.normal(loc=0.0, scale=1.0, size=None)"></a>np.random.normal(loc=0.0, scale=1.0, size=None)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loc：float或array_like浮点数</span><br><span class="line">    分布的平均值（“中心”）。</span><br><span class="line">scale：float或array_like浮点数</span><br><span class="line">    分布的标准偏差（展宽或“宽度”）。</span><br><span class="line">size：int或int的元组，可选</span><br><span class="line">    输出形状。如果给定的形状是例如“（m，n，k）”，那么</span><br><span class="line">    绘制了`m * n * k`样本</span><br></pre></td></tr></table></figure><p>输出一个均值为0，标准差为0.05的(4,3)矩阵<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = np.random.normal(0,0.05,[4,3])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">array([[ 0.00875909,  0.04187258,  0.03422398],</span><br><span class="line">       [ 0.04415144,  0.00083901,  0.06574384],</span><br><span class="line">       [ 0.13169391,  0.09001974, -0.0384982 ],</span><br><span class="line">       [ 0.00414203,  0.03999768, -0.09010478]])</span><br></pre></td></tr></table></figure></p><h1 id="np-newaxis"><a href="#np-newaxis" class="headerlink" title="np.newaxis"></a>np.newaxis</h1><p>作用为增加维度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_data=np.linspace(-1,1,300)[:,np.newaxis]</span><br></pre></td></tr></table></figure><p>意思为，从-1到1均匀取出300个间隔数字（包括-1,1），得到shape为(300,)的array，增加一个维度，变为(300,1)。</p><p>实际上可以使用reshape做到。<br>等价于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x_data=np.linspace(-1,1,300).reshape(300,-1)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;np-linspace-start-stop-num-50-endpoint-True-retstep-False-dtype-None&quot;&gt;&lt;a href=&quot;#np-linspace-start-stop-num-50-endpoint-True-retstep-False-dtype-None&quot; class=&quot;headerlink&quot; title=&quot;np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)&quot;&gt;&lt;/a&gt;np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;start标量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    序列的起始值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stop标量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    除非`endpoint`设置为False，否则序列的结束值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    在这种情况下，序列由除``num + 1``的最后一个组成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    均匀间隔的样本，以便排除`stop`。注意这一步&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    当`endpoint`为False时，大小会改变。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;num：int，可选&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    要生成的样本数。默认值为50.必须为非负数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpoint：bool，可选&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    如果为True，则`stop`是最后一个样本。否则，它不包括在内。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    默认为True。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;retstep：bool，可选&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    如果为True，则返回（`samples`，`step`），其中`step`是间距&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    样本之间。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtype：dtype，可选&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    输出数组的类型。如果没有给出`dtype`，推断数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    从其他输入参数中键入。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="numpy" scheme="https://snjl.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib画图</title>
    <link href="https://snjl.github.io/2018/11/26/matplotlib%E7%94%BB%E5%9B%BE/"/>
    <id>https://snjl.github.io/2018/11/26/matplotlib画图/</id>
    <published>2018-11-26T15:27:15.000Z</published>
    <updated>2018-11-26T15:30:54.798Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">100</span>, <span class="number">201</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(data)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://pi6jpxhir.bkt.clouddn.com/clipboard.png" alt="image"></p><p>1.通过np.arange(100, 201)生成一个[100, 200]之间的整数数组，它的值是：[100, 101, 102, … , 200]</p><p>2.通过matplotlib.pyplot将其绘制出来。很显然，绘制出来的值对应了图中的纵坐标（y轴）。而matplotlib本身为我们设置了图形的横坐标（x轴）：[0, 100]，因为我们刚好有100个数值</p><p>3.通过plt.show()将这个图形显示出来</p><p>修改代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">data = np.arange(1, 200, 20)</span><br><span class="line"></span><br><span class="line">plt.plot(data, &apos;ro&apos;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/clipboard2.png" alt="image"></p><p>加入点也可以用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([1,2],[3,4])</span><br></pre></td></tr></table></figure></p><p>加入的2个点为(1,3),(2,4)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="画图" scheme="https://snjl.github.io/tags/%E7%94%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>python：mysql报错记录</title>
    <link href="https://snjl.github.io/2018/11/26/python%EF%BC%9Amysql%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://snjl.github.io/2018/11/26/python：mysql报错记录/</id>
    <published>2018-11-26T15:25:27.000Z</published>
    <updated>2018-11-26T15:31:19.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Operand-should-contain-1-column"><a href="#1-Operand-should-contain-1-column" class="headerlink" title="1.Operand should contain 1 column"></a>1.Operand should contain 1 column</h1><p>字面意思是，需要有1个数据列。<br>如下sql：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">"INSERT INTO lunwen(url) VALUES (%s)"</span>, (url,))</span><br></pre></td></tr></table></figure></p><p>可能是因为url并不是一个字符串，而是一个tuple或者list。</p><a id="more"></a><h1 id="2-latin-1’-codec-can’t-encode-character-u’-u201c’-in-position-0"><a href="#2-latin-1’-codec-can’t-encode-character-u’-u201c’-in-position-0" class="headerlink" title="2.latin-1’ codec can’t encode character u’\u201c’ in position 0"></a>2.latin-1’ codec can’t encode character u’\u201c’ in position 0</h1><p>pymysql 正常情况下会尝试将所有的内容转为latin1字符集处理，所以在连接数据库的时候应该加上utf8编码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = pymysql.connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"00000000"</span>,<span class="string">"TESTDB"</span> ,use_unicode=<span class="keyword">True</span>, charset=<span class="string">"utf8"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Operand-should-contain-1-column&quot;&gt;&lt;a href=&quot;#1-Operand-should-contain-1-column&quot; class=&quot;headerlink&quot; title=&quot;1.Operand should contain 1 column&quot;&gt;&lt;/a&gt;1.Operand should contain 1 column&lt;/h1&gt;&lt;p&gt;字面意思是，需要有1个数据列。&lt;br&gt;如下sql：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cursor.execute(&lt;span class=&quot;string&quot;&gt;&quot;INSERT INTO lunwen(url) VALUES (%s)&quot;&lt;/span&gt;, (url,))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可能是因为url并不是一个字符串，而是一个tuple或者list。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
      <category term="数据库" scheme="https://snjl.github.io/categories/python/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="数据库" scheme="https://snjl.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>selenium一些记录</title>
    <link href="https://snjl.github.io/2018/11/26/selenium%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
    <id>https://snjl.github.io/2018/11/26/selenium一些记录/</id>
    <published>2018-11-26T15:24:36.000Z</published>
    <updated>2018-11-26T15:31:48.138Z</updated>
    
    <content type="html"><![CDATA[<p>selenium中文文档：<a href="https://selenium-python-zh.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://selenium-python-zh.readthedocs.io/en/latest/index.html</a></p><p>使用selenium，安装好对应版本的chromedriver和chrome，然后将driver放入项目，用 driver = webdriver.Chrome()启动。</p><a id="more"></a><p>selenium刷新：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh()</span><br><span class="line"><span class="comment"># 或调用js</span></span><br><span class="line">driver.execute_script(<span class="string">"location.reload()"</span>)</span><br></pre></td></tr></table></figure></p><p>请求头配置参考：<a href="https://blog.csdn.net/u013440574/article/details/81911954" target="_blank" rel="noopener">https://blog.csdn.net/u013440574/article/details/81911954</a></p><p>仅添加普通请求头：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">opt = webdriver.ChromeOptions()</span><br><span class="line">   opt.set_headless()</span><br><span class="line">   opt.add_argument(</span><br><span class="line">       <span class="string">'user-agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.6726.400 QQBrowser/10.2.2265.400'</span>)</span><br><span class="line"></span><br><span class="line">   driver = webdriver.Chrome(options=opt)</span><br></pre></td></tr></table></figure></p><p>这里使用opt作为chromedriver的参数，添加user-agent信息，然后调用webdriver.Chrome，并传入opt。</p><p><strong>注：这里使用的是无窗口界面的chrome selenium爬虫，所以可以设置，如果使用有界面的，则不必设置，因为带界面必定带请求头和各种信息。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;selenium中文文档：&lt;a href=&quot;https://selenium-python-zh.readthedocs.io/en/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://selenium-python-zh.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用selenium，安装好对应版本的chromedriver和chrome，然后将driver放入项目，用 driver = webdriver.Chrome()启动。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="基础" scheme="https://snjl.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python：常用操作</title>
    <link href="https://snjl.github.io/2018/11/26/python%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://snjl.github.io/2018/11/26/python：常用操作/</id>
    <published>2018-11-26T15:23:44.000Z</published>
    <updated>2018-11-26T15:31:39.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生成随机数"><a href="#1-生成随机数" class="headerlink" title="1.生成随机数"></a>1.生成随机数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(<span class="number">3</span> * random.random())</span><br></pre></td></tr></table></figure><p>生成0-3的随机数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(random.randint(<span class="number">0</span>,<span class="number">99</span>))</span><br></pre></td></tr></table></figure></p><p>生成0-99的随机整数。</p><p>还有很多，用的不多，临时百度。</p><a id="more"></a><h1 id="2-MD5加密"><a href="#2-MD5加密" class="headerlink" title="2.MD5加密"></a>2.MD5加密</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于MD5模块在python3中被移除</span></span><br><span class="line"><span class="comment"># 在python3中使用hashlib模块进行md5操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 待加密信息</span></span><br><span class="line">str = <span class="string">'this is a md5 test.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建md5对象</span></span><br><span class="line">hl = hashlib.md5()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tips</span></span><br><span class="line"><span class="comment"># 此处必须声明encode</span></span><br><span class="line"><span class="comment"># 若写法为hl.update(str)  报错为： Unicode-objects must be encoded before hashing</span></span><br><span class="line">hl.update(str.encode(encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'MD5加密前为 ：'</span> + str)</span><br><span class="line">print(<span class="string">'MD5加密后为 ：'</span> + hl.hexdigest())</span><br></pre></td></tr></table></figure><p>可以将hl定义在类中，每次类调用该hl，可以不用每次都生成。</p><h1 id="3-数据库timestamp时间插入"><a href="#3-数据库timestamp时间插入" class="headerlink" title="3.数据库timestamp时间插入"></a>3.数据库timestamp时间插入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(time.localtime())</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.struct_time(tm_year=2018, tm_mon=11, tm_mday=26, tm_hour=16, tm_min=35, tm_sec=51, tm_wday=0, tm_yday=330, tm_isdst=0)</span><br></pre></td></tr></table></figure></p><h1 id="4-list元素拼接为字符串"><a href="#4-list元素拼接为字符串" class="headerlink" title="4.list元素拼接为字符串"></a>4.list元素拼接为字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">';'</span>]</span><br><span class="line">k = <span class="string">''</span>.join(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k = <span class="string">''</span>.join(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k</span><br><span class="line"><span class="string">'pan;'</span></span><br></pre></td></tr></table></figure><h1 id="5-tuple注意点"><a href="#5-tuple注意点" class="headerlink" title="5.tuple注意点"></a>5.tuple注意点</h1><p>tuple是不可变的，提供了一种完整的约束性，但是它支持的操作比较少（如果元组中含有一个list或者<br>dict，list和dict还是能改变的）。</p><h1 id="6-文件二进制读写"><a href="#6-文件二进制读写" class="headerlink" title="6.文件二进制读写"></a>6.文件二进制读写</h1><p>文件写入二进制，使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = open(<span class="string">"a.txt"</span>,<span class="string">'rb'</span>)</span><br><span class="line">data.write(all)</span><br></pre></td></tr></table></figure></p><h1 id="7-单个表达式代替循环"><a href="#7-单个表达式代替循环" class="headerlink" title="7.单个表达式代替循环"></a>7.单个表达式代替循环</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [x + <span class="number">10</span> <span class="keyword">for</span> x <span class="keyword">in</span> L]</span><br><span class="line"><span class="comment"># 效率高于 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">    res.append(i+<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="8-读取文件最好的方式是不要打开"><a href="#8-读取文件最好的方式是不要打开" class="headerlink" title="8.读取文件最好的方式是不要打开"></a>8.读取文件最好的方式是不要打开</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'test.txt'</span>):</span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br><span class="line"><span class="comment"># end=''是为了除去每一行的\n，可以不用replace</span></span><br></pre></td></tr></table></figure><h1 id="9-去除line里的换行符"><a href="#9-去除line里的换行符" class="headerlink" title="9.去除line里的换行符"></a>9.去除line里的换行符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'test.text'</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">lines = [line.rstrip() <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br></pre></td></tr></table></figure><h1 id="10-对文件进行简单操作的可行处理方法"><a href="#10-对文件进行简单操作的可行处理方法" class="headerlink" title="10.对文件进行简单操作的可行处理方法"></a>10.对文件进行简单操作的可行处理方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lines = [line.upper() <span class="keyword">for</span> lin <span class="keyword">in</span> open(<span class="string">'test.txt'</span>)]</span><br></pre></td></tr></table></figure><h1 id="11-对lines进行较为复杂的操作"><a href="#11-对lines进行较为复杂的操作" class="headerlink" title="11.对lines进行较为复杂的操作"></a>11.对lines进行较为复杂的操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lines = [line.rstrip() <span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'test.txt'</span>) <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">'p'</span>]</span><br><span class="line"><span class="comment"># 结果是只留下第一个字符是p的元素</span></span><br></pre></td></tr></table></figure><h1 id="12-两个list进行拼接"><a href="#12-两个list进行拼接" class="headerlink" title="12.两个list进行拼接"></a>12.两个list进行拼接</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abc'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'lmn'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">[<span class="string">'al'</span>, <span class="string">'am'</span>, <span class="string">'an'</span>, <span class="string">'bl'</span>, <span class="string">'bm'</span>, <span class="string">'bn'</span>, <span class="string">'cl'</span>, <span class="string">'cm'</span>, <span class="string">'cn'</span>]</span><br></pre></td></tr></table></figure><h1 id="13-判断dict是否有该键"><a href="#13-判断dict是否有该键" class="headerlink" title="13.判断dict是否有该键"></a>13.判断dict是否有该键</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">value = d.get(<span class="string">'x'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 表示如果字典d里有键为x的，返回x的值，如果没有，返回0；</span></span><br><span class="line"><span class="comment"># 也可以写为：</span></span><br><span class="line">value = d[<span class="string">'x'</span>] <span class="keyword">if</span> <span class="string">'x'</span> <span class="keyword">in</span> d <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># emmm其实我觉得这个也挺好理解的，但是有点长。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-生成随机数&quot;&gt;&lt;a href=&quot;#1-生成随机数&quot; class=&quot;headerlink&quot; title=&quot;1.生成随机数&quot;&gt;&lt;/a&gt;1.生成随机数&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * random.random())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成0-3的随机数。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(random.randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;生成0-99的随机整数。&lt;/p&gt;
&lt;p&gt;还有很多，用的不多，临时百度。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="基础" scheme="https://snjl.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python：list差集</title>
    <link href="https://snjl.github.io/2018/11/26/python%EF%BC%9Alist%E5%B7%AE%E9%9B%86/"/>
    <id>https://snjl.github.io/2018/11/26/python：list差集/</id>
    <published>2018-11-26T15:22:36.000Z</published>
    <updated>2018-11-26T15:23:47.676Z</updated>
    
    <content type="html"><![CDATA[<p>list并集：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> list(set(a).union(set(b)))</span><br></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">k = [x for x in s1 if x in s2]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x1 = [1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; s1 = x1</span><br><span class="line">&gt;&gt;&gt; s2 = (3,4,6,8)</span><br><span class="line">&gt;&gt;&gt; k = [x for x in s1 if x in s2]</span><br><span class="line">&gt;&gt;&gt; k</span><br><span class="line">[3, 4, 6]</span><br></pre></td></tr></table></figure></p><p>list差集：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> list(set(b).difference(set(a)))</span><br><span class="line"><span class="comment"># b中有而a中没有的</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;list并集：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;
      
    
    </summary>
    
      <category term="python" scheme="https://snjl.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://snjl.github.io/tags/python/"/>
    
      <category term="基础" scheme="https://snjl.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>react：页面中存在多个input设置value属性</title>
    <link href="https://snjl.github.io/2018/11/25/react%EF%BC%9A%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AAinput%E8%AE%BE%E7%BD%AEvalue%E5%B1%9E%E6%80%A7/"/>
    <id>https://snjl.github.io/2018/11/25/react：页面中存在多个input设置value属性/</id>
    <published>2018-11-25T13:26:25.000Z</published>
    <updated>2018-11-26T15:31:45.682Z</updated>
    
    <content type="html"><![CDATA[<p>首先要为这些所有的input框绑定上onChange的方法，然后还需要在this.state中去设置不同的input对应不同的值，最后还需要在changeValue的方法中去一一监听input输入时去修改对应的input的值。</p><p>也可以写一个changeValue方法，但是input的属性的name要和state里的名字要一样，如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        login:&#123;</span><br><span class="line">            username:<span class="string">''</span>,</span><br><span class="line">            password:<span class="string">''</span></span><br><span class="line">        &#125;,</span><br><span class="line">        user:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户名：</span><br><span class="line">&lt;input type=&#123;<span class="string">'text'</span>&#125; name=&#123;<span class="string">'username'</span>&#125; value=&#123;<span class="keyword">this</span>.state.login.username&#125; </span><br><span class="line">className=&#123;<span class="string">'username'</span>&#125; onChange=&#123;<span class="keyword">this</span>.changeValue.bind(<span class="keyword">this</span>)&#125;/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">密码：</span><br><span class="line">&lt;input type=&#123;<span class="string">'password'</span>&#125; name=&#123;<span class="string">'password'</span>&#125; value=&#123;<span class="keyword">this</span>.state.login.password&#125; </span><br><span class="line">className=&#123;<span class="string">'password'</span>&#125; onChange=&#123;<span class="keyword">this</span>.changeValue.bind(<span class="keyword">this</span>)&#125;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">changeValue(event) &#123;</span><br><span class="line">    <span class="keyword">let</span> newLogin = <span class="keyword">this</span>.state.login;</span><br><span class="line">    newLogin[event.target.name] = event.target.value;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">login</span>: newLogin&#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用event.target.name获取input的name属性，使用evnet.target.value获取input的value，令newLogin为this.state.login，然后将newLogin中名为event.target.name的属性的值设为event.target.value，之后再setState，从而可以改变state.login的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先要为这些所有的input框绑定上onChange的方法，然后还需要在this.state中去设置不同的input对应不同的值，最后还需要在changeValue的方法中去一一监听input输入时去修改对应的input的值。&lt;/p&gt;
&lt;p&gt;也可以写一个changeValu
      
    
    </summary>
    
      <category term="react" scheme="https://snjl.github.io/categories/react/"/>
    
      <category term="前端" scheme="https://snjl.github.io/categories/react/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://snjl.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://snjl.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react：存储session</title>
    <link href="https://snjl.github.io/2018/11/25/react%EF%BC%9A%E5%AD%98%E5%82%A8session-1/"/>
    <id>https://snjl.github.io/2018/11/25/react：存储session-1/</id>
    <published>2018-11-25T13:25:33.000Z</published>
    <updated>2018-11-25T13:26:00.587Z</updated>
    
    <content type="html"><![CDATA[<p>react框架中使用session，如果是单个字符串：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"key"</span>,value);</span><br></pre></td></tr></table></figure></p><p>取出时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = sessionStorage.getItem(<span class="string">"key"</span>)</span><br></pre></td></tr></table></figure></p><p>如果是json，在存储时需要将json对象通过stringify()方法转为字符串，存入sessionStorage：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"jsonKey"</span>,<span class="built_in">JSON</span>.stringify(jsonData));</span><br></pre></td></tr></table></figure></p><p>取出时需要再转回json：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">"jsonKey"</span>));</span><br></pre></td></tr></table></figure></p><p>移除session：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.removeItem(<span class="string">"data"</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react框架中使用session，如果是单个字符串：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
      <category term="react" scheme="https://snjl.github.io/categories/react/"/>
    
      <category term="前端" scheme="https://snjl.github.io/categories/react/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://snjl.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://snjl.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>jQuery禁止回车提交</title>
    <link href="https://snjl.github.io/2018/11/25/jQuery%E7%A6%81%E6%AD%A2%E5%9B%9E%E8%BD%A6%E6%8F%90%E4%BA%A4/"/>
    <id>https://snjl.github.io/2018/11/25/jQuery禁止回车提交/</id>
    <published>2018-11-25T13:23:44.000Z</published>
    <updated>2018-11-25T13:25:34.199Z</updated>
    
    <content type="html"><![CDATA[<p>在有input框进行输入提交时，如果有input的type为submit，则默认按回车会提交，可以用jQuery的方法进行阻拦：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">"input"</span>).each(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).keypress( <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> key = <span class="built_in">window</span>.event ? e.keyCode : e.which;</span><br><span class="line">                    <span class="keyword">if</span>(key.toString() === <span class="string">"13"</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在有input框进行输入提交时，如果有input的type为submit，则默认按回车会提交，可以用jQuery的方法进行阻拦：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="前端" scheme="https://snjl.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://snjl.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="jQuery" scheme="https://snjl.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>react：form表单提交</title>
    <link href="https://snjl.github.io/2018/11/25/react%EF%BC%9Aform%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4/"/>
    <id>https://snjl.github.io/2018/11/25/react：form表单提交/</id>
    <published>2018-11-25T13:23:01.000Z</published>
    <updated>2018-11-25T13:24:10.743Z</updated>
    
    <content type="html"><![CDATA[<p>由于React在浏览器显示的是虚拟的DOM，我们在表单输入值后直接提交，是无法获取到这个值的。对此，官方给出的解决办法是：先把输入的值存放在组件的状态（state）中，之后通过状态的改变更新页面内容，从而显示出正确的值，用户提交的也是从state里获取的表单的value。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line"></span><br><span class="line">        item:&#123;</span><br><span class="line">            name:<span class="string">''</span>,</span><br><span class="line">            organization:<span class="string">''</span>,</span><br><span class="line">            school:<span class="string">''</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置提交方法和改变state的状态的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">handleSubmit(event) &#123;</span><br><span class="line">    <span class="comment">//阻止表单默认提交</span></span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">let</span> item = <span class="keyword">this</span>.state.item;</span><br><span class="line">    axios.post(host + <span class="string">'xxx/insert'</span>, item).then(</span><br><span class="line">        response =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> message = response.data;</span><br><span class="line">            <span class="keyword">if</span> (message === <span class="string">'success'</span>) &#123;</span><br><span class="line">                alert(<span class="string">"插入成功"</span>);</span><br><span class="line">                <span class="built_in">window</span>.location.href = <span class="string">'/xxx/list'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"插入失败，请重试"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">item</span>:item&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeValue(event) &#123;</span><br><span class="line">    <span class="keyword">let</span> newItem = <span class="keyword">this</span>.state.item;</span><br><span class="line">    newItem[event.target.name] = event.target.value;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">item</span>: newItem&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#123;</span>'<span class="attr">post</span>'&#125; <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit.bind(this)&#125;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>申请数据集名称：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">&#123;</span>'<span class="attr">name</span>'&#125; <span class="attr">onChange</span>=<span class="string">&#123;this.changeValue.bind(this)&#125;/</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>学校：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">&#123;</span>'<span class="attr">organization</span>'&#125; <span class="attr">value</span>=<span class="string">&#123;this.state.item.organization&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeValue.bind(this)&#125;/</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>学院：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">&#123;</span>'<span class="attr">school</span>'&#125; <span class="attr">value</span>=<span class="string">&#123;this.state.item.school&#125;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">onChange</span>=<span class="string">&#123;this.changeValue.bind(this)&#125;/</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#123;</span>'<span class="attr">submit</span>'&#125; <span class="attr">value</span>=<span class="string">&#123;</span>'提交'&#125;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;</span>'重置'&#125; <span class="attr">type</span>=<span class="string">&#123;</span>'<span class="attr">reset</span>'&#125;/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：form中用onSubmit替代action，其中每个input的name需要对应定义state时的状态，在使用axios调接口传值时，如果是java的springmvc的后端，需要将传输的属性与对应的实体类对接好。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于React在浏览器显示的是虚拟的DOM，我们在表单输入值后直接提交，是无法获取到这个值的。对此，官方给出的解决办法是：先把输入的值存放在组件的状态（state）中，之后通过状态的改变更新页面内容，从而显示出正确的值，用户提交的也是从state里获取的表单的value。&lt;
      
    
    </summary>
    
      <category term="react" scheme="https://snjl.github.io/categories/react/"/>
    
      <category term="前端" scheme="https://snjl.github.io/categories/react/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://snjl.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react" scheme="https://snjl.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>springboot报错记录</title>
    <link href="https://snjl.github.io/2018/11/24/springboot%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://snjl.github.io/2018/11/24/springboot报错记录/</id>
    <published>2018-11-24T15:47:01.000Z</published>
    <updated>2018-11-24T15:48:02.980Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured</li></ol><p>Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured.</p><p>Reason: Failed to determine a suitable driver class</p><a id="more"></a><p>Action:</p><p>Consider the following:<br>​    If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.<br>​    If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).</p><p>原因：引入mybatis的jar包时：</p><p><dependency><br>​            <groupid>org.mybatis.spring.boot</groupid><br>​            <artifactid>mybatis-spring-boot-starter</artifactid><br>​            <version>1.3.1</version><br></dependency><br>springboot会默认加载org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration这个类，而DataSourceAutoConfiguration类使用了@Configuration注解向spring注入了dataSource bean，又因为项目中并没有关于dataSource相关的配置信息，所以当spring创建dataSource bean时因缺少相关的信息就会报错。</p><p>解决办法：</p><p>在@SpringBootApplication注解上加上exclude，解除自动加载DataSourceAutoConfiguration。<br>@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)<br>public class DemoApplication {</p><pre><code>public static void main(String[] args) {    SpringApplication.run(DemoApplication.class, args);}</code></pre><p>}<br>在parent项目的pom.xml文件中保存所有子模块的共有jar依赖，非共有的依赖则在各模块自身的pom.xml文件中进行申明。建议采用此方法，好处在于各模块的依赖不会相互产生干扰。<br>2.maven配置时，测试出现“’mvn’ 不是内部或外部命令,也不是可运行的程序”错误</p><p>配置maven。</p><p>在环境变量的PATH中配置maven的bin目录。</p><p>使用mvn package打包成功后显示日志：</p><hr><p>[INFO] BUILD SUCCESS<br>[INFO] ————————————————————————<br>[INFO] Total time: 46.791 s<br>[INFO] Finished at: 2018-11-21T16:12:36+08:00<br>[INFO] Final Memory: 35M/275M<br>[INFO] ————————————————————————<br>3.java.sql.SQLException: The server time zone value ‘???ú±ê×??±??’ is unrecognized or represents……..</p><p>具体错误：</p><p>Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is</code>com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.<br>Tue May 15 21:38:04 CST 2018 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.<br>java.sql.SQLException: The server time zone value ‘???ú±ê×??±??’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.<br>​    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:127)<br>​    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:95)<br>​    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:87)<br>​    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:61)<br>​    at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:71)<br>​    at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76)</p><pre><code>at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:862)at com.mysql.cj.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:444)at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:230)at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:226)at java.sql.DriverManager.getConnection(Unknown Source)at java.sql.DriverManager.getConnection(Unknown Source)at zhu.jdbc.unit.UnitMysql.getConnection(UnitMysql.java:34)at zhu.jdbc.dao.imp.ITb_UserImpI.insertData(ITb_UserImpI.java:55)at zhu.jdbc.dao.imp.ITb_UserImpI.insertData(ITb_UserImpI.java:1)at zhu.jdbc.service.imp.ITb_UserServiceImpI.insertData(ITb_UserServiceImpI.java:35)at zhu.jdbc.service.imp.ITb_UserServiceImpI.insertData(ITb_UserServiceImpI.java:1)at zhu.jdbc.servlet.Servlet_TbUser.Insert(Servlet_TbUser.java:87)at zhu.jdbc.servlet.Servlet_TbUser.doPost(Servlet_TbUser.java:41)at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:650)at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)at java.lang.Thread.run(Unknown Source)</code></pre><p>Caused by: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value ‘???ú±ê×??±??’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.<br>​    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>​    at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)<br>​    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)<br>​    at java.lang.reflect.Constructor.newInstance(Unknown Source)<br>​    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:59)<br>​    at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:83)<br>​    at com.mysql.cj.util.TimeUtil.getCanonicalTimezone(TimeUtil.java:128)<br>​    at com.mysql.cj.protocol.a.NativeProtocol.configureTimezone(NativeProtocol.java:2201)<br>​    at com.mysql.cj.protocol.a.NativeProtocol.initServerSession(NativeProtocol.java:2225)<br>​    at com.mysql.cj.jdbc.ConnectionImpl.initializePropsFromServer(ConnectionImpl.java:1391)<br>​    at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:993)<br>​    at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:852)<br>​    … 36 more<br>五月 15, 2018 9:38:04 下午 org.apache.catalina.core.StandardWrapperValve invoke<br>严重: Servlet.service() for servlet [Servlet_TbUser] in context with path [/myweb2] threw exception<br>java.lang.NullPointerException<br>​    at zhu.jdbc.dao.imp.ITb_UserImpI.insertData(ITb_UserImpI.java:59)<br>​    at zhu.jdbc.dao.imp.ITb_UserImpI.insertData(ITb_UserImpI.java:1)<br>​    at zhu.jdbc.service.imp.ITb_UserServiceImpI.insertData(ITb_UserServiceImpI.java:35)<br>​    at zhu.jdbc.service.imp.ITb_UserServiceImpI.insertData(ITb_UserServiceImpI.java:1)<br>​    at zhu.jdbc.servlet.Servlet_TbUser.Insert(Servlet_TbUser.java:87)<br>​    at zhu.jdbc.servlet.Servlet_TbUser.doPost(Servlet_TbUser.java:41)<br>​    at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)<br>​    at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)<br>​    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)<br>​    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)<br>​    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>​    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)<br>​    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)<br>​    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)<br>​    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)<br>​    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)<br>​    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)<br>​    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)<br>​    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:650)<br>​    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)<br>​    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)<br>​    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)<br>​    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)<br>​    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)<br>​    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)<br>​    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)<br>​    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)<br>​    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)<br>​    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</p><pre><code>at java.lang.Thread.run(Unknown Source)</code></pre><p>出现这个的原因是因为 mysql返回的时间总是有问题，比实际时间要早8小时。</p><p>解决办法：</p><p>在jdbc连接的url后面加上serverTimezone=GMT即可解决问题，如果需要使用gmt+8时区，需要写成GMT%2B8。</p><p>为了防止因为日期为null报错，可以直接加上：</p><p>?serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</p><p>例如链接数据库，可以写为：</p><p>jdbc.url=jdbc:mysql://xxx.xxx.xxx.xxx/xxxxx?serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</p><p>4.Loading class com.mysql.jdbc.Driver. This is deprecated. The new driver class is com.mysql.cj.jdbc.Driver. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</p><p>这个问题是 使用了新的mysql驱动包，但驱动声明不是最新的：</p><p>DriverClassName 从 “com.mysql.jdbc.Driver” 换成 “com.mysql.cj.jdbc.Driver” 即可。</p><p>5.spring Failed to convert property value of type ‘java.lang.String’ to required type ‘int’ for property</p><p>原错误是不能将long的null属性转化出来，但是没找到原来的错误。采取的方式是，把pojo类中的long全改为Integer。</p><p>如果是date出错，参考问题3，在数据库连接时加上zeroDateTimeBehavior=convertToNull。</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured.&lt;/p&gt;
&lt;p&gt;Reason: Failed to determine a suitable driver class&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="报错" scheme="https://snjl.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>springboot使用JdbcTemplate（一）</title>
    <link href="https://snjl.github.io/2018/11/24/springboot%E4%BD%BF%E7%94%A8JdbcTemplate%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://snjl.github.io/2018/11/24/springboot使用JdbcTemplate（一）/</id>
    <published>2018-11-24T15:45:47.000Z</published>
    <updated>2018-11-30T15:29:19.781Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.mysql.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.mysql.git</a></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>修改 POM 文件，添加spring-boot-starter-jdbc依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加mysql依赖（spring-boot-starter-jdbc 默认使用tomcat-jdbc数据源，如果要使用其他数据源，需要添加额外的依赖，这里使用了阿里巴巴的数据池管理）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><p>在src/main/resources/application.properties中配置数据源信息:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/sss?serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br></pre></td></tr></table></figure></p><p>在Application.java中配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyprojectApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyprojectApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setUrl(environment.getProperty(<span class="string">"spring.datasource.url"</span>));</span><br><span class="line">        dataSource.setUsername(environment.getProperty(<span class="string">"spring.datasource.username"</span>));</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        dataSource.setPassword(environment.getProperty(<span class="string">"spring.datasource.password"</span>));</span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        dataSource.setDriverClassName(environment.getProperty(<span class="string">"spring.datasource.driver-class-name"</span>));</span><br><span class="line">        dataSource.setInitialSize(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//初始化时建立物理连接的个数</span></span><br><span class="line">        dataSource.setMaxActive(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//最大连接池数量</span></span><br><span class="line">        dataSource.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//最小连接池数量</span></span><br><span class="line">        dataSource.setMaxWait(<span class="number">60000</span>);</span><br><span class="line">        <span class="comment">//获取连接时最大等待时间，单位毫秒。</span></span><br><span class="line">        dataSource.setValidationQuery(<span class="string">"SELECT 1"</span>);</span><br><span class="line">        <span class="comment">//用来检测连接是否有效的sql</span></span><br><span class="line">        dataSource.setTestOnBorrow(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//申请连接时执行validationQuery检测连接是否有效</span></span><br><span class="line">        dataSource.setTestWhileIdle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//建议配置为true，不影响性能，并且保证安全性。</span></span><br><span class="line">        dataSource.setPoolPreparedStatements(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//是否缓存preparedStatement，也就是PSCache</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_student</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span>       <span class="built_in">INT</span> AUTO_INCREMENT</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">NAME</span>     <span class="built_in">VARCHAR</span>(<span class="number">18</span>) <span class="literal">NULL</span>,</span><br><span class="line">  sex      <span class="built_in">CHAR</span>(<span class="number">3</span>)     <span class="literal">NULL</span>,</span><br><span class="line">  age      <span class="built_in">INT</span>         <span class="literal">NULL</span>,</span><br><span class="line">  clazz_id <span class="built_in">INT</span>         <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> TB_STUDENT_id_uindex</span><br><span class="line">  <span class="keyword">UNIQUE</span> (<span class="keyword">id</span>)</span><br><span class="line">)</span><br><span class="line">  <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="实体类："><a href="#实体类：" class="headerlink" title="实体类："></a>实体类：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject.domain;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String sex;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> Integer clazzId;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//getter,setter</span></span><br></pre></td></tr></table></figure><p>可以用idea自动生成，将long类型的全改为Integer，为了以后不报错。</p><h2 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.myproject.domain.TbStudent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TbStudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(TbStudent tbStudent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(TbStudent tbStudent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TbStudent <span class="title">findTbStudent</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;TbStudent&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.myproject.dao.TbStudentDao;</span><br><span class="line"><span class="keyword">import</span> com.example.myproject.domain.TbStudent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">TbStudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(TbStudent tbStudent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"insert into tb_student(NAME) VALUES (?)"</span>,tbStudent.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(TbStudent tbStudent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"update tb_student set NAME=? where id=?"</span>,tbStudent.getName(),tbStudent.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"delete from tb_student where id=?"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbStudent <span class="title">findTbStudent</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        List&lt;TbStudent&gt; list = jdbcTemplate.query(<span class="string">"SELECT * FROM tb_student WHERE id=?"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;id&#125;, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(TbStudent.class));</span><br><span class="line">        <span class="keyword">if</span>(list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            TbStudent tbStudent = list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> tbStudent;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TbStudent&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;TbStudent&gt; list = jdbcTemplate.query(<span class="string">"SELECT * FROM tb_student"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;&#125;, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(TbStudent.class));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：使用jdbcTemplate.query时，需要注意这个写法：new Object[]{id}, new BeanPropertyRowMapper&lt;&gt;(TbStudent.class)。并且如果只需要一个，需要进行null和size判定，之后取出一个，不然会报错。</strong></p><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.myproject.domain.TbStudent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TbStudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(TbStudent tbStudent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(TbStudent tbStudent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TbStudent <span class="title">findTbStudent</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;TbStudent&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.myproject.dao.TbStudentDao;</span><br><span class="line"><span class="keyword">import</span> com.example.myproject.domain.TbStudent;</span><br><span class="line"><span class="keyword">import</span> com.example.myproject.service.TbStudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">TbStudentService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"tbStudentDaoImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> TbStudentDao tbStudentDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(TbStudent tbStudent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentDao.insert(tbStudent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(TbStudent tbStudent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentDao.update(tbStudent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbStudent <span class="title">findTbStudent</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentDao.findTbStudent(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TbStudent&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.myproject.domain.TbStudent;</span><br><span class="line"><span class="keyword">import</span> com.example.myproject.service.TbStudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 34924</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/tbStudent"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"tbStudentServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> TbStudentService tbStudentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TbStudent&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/insert"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(@RequestBody TbStudent tbStudent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentService.insert(tbStudent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(@RequestParam Integer id,@RequestParam String name)</span> </span>&#123;</span><br><span class="line">        TbStudent tbStudent = tbStudentService.findTbStudent(id);</span><br><span class="line">        tbStudent.setName(name);</span><br><span class="line">        <span class="keyword">return</span> tbStudentService.update(tbStudent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/findOne"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbStudent <span class="title">findOne</span><span class="params">(@RequestBody TbStudent tbStudent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbStudentService.findTbStudent(tbStudent.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：此处全写的是接口</strong></p><ul><li>findAll用的是普通的get请求;</li><li>delete用的restful的形式；</li><li>insert用的post请求；</li><li>update用的get请求，使用@RequestParam，注意post请求使用@RequestBody，而get请求只能使用@RequestParam或者是使用@ModelAttribute（此处未使用）；</li><li>findOne用的post请求。</li></ul><p>如果将update改为使用@ModelAttribute，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(@ModelAttribute TbStudent tbStudent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tbStudentService.update(tbStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用JSONObject"><a href="#使用JSONObject" class="headerlink" title="使用JSONObject"></a>使用JSONObject</h1><p>改insert为JSONObject接受参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/insert2"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert2</span><span class="params">(@RequestBody JSONObject tbStudent)</span> </span>&#123;</span><br><span class="line">    TbStudent tbStudent1 = <span class="keyword">new</span> TbStudent();</span><br><span class="line">    tbStudent1.setName((String)tbStudent.get(<span class="string">"name"</span>));</span><br><span class="line">    <span class="keyword">return</span> tbStudentService.insert(tbStudent1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引入的包为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.minidev.json.JSONObject;</span><br></pre></td></tr></table></figure></p><p>在pom.xml中加入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.minidev<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-smart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h1><h2 id="findAll："><a href="#findAll：" class="headerlink" title="findAll："></a>findAll：</h2><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/findAll.png" alt="image"></p><h2 id="delete："><a href="#delete：" class="headerlink" title="delete："></a>delete：</h2><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/delete.png" alt="image"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/delete_findAll.png" alt="image"></p><h2 id="insert："><a href="#insert：" class="headerlink" title="insert："></a>insert：</h2><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/insert.png" alt="image"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/insert_findAll.png" alt="image"></p><h2 id="update："><a href="#update：" class="headerlink" title="update："></a>update：</h2><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/update.png" alt="image"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/update_findAll.png" alt="image"></p><p>使用@ModelAttribute的注解：<br><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/update2.png" alt="image"></p><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/update2_findAll.png" alt="image"></p><h2 id="findOne："><a href="#findOne：" class="headerlink" title="findOne："></a>findOne：</h2><p><img src="http://pi6jpxhir.bkt.clouddn.com/springboot/findOne.png" alt="image"></p><h1 id="使用thymeleaf"><a href="#使用thymeleaf" class="headerlink" title="使用thymeleaf"></a>使用thymeleaf</h1><p>添加文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myproject.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.myproject.service.TbStudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 34924</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/tbStudent/html"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TbStudentControllerForHtml</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"tbStudentServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> TbStudentService tbStudentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"items"</span>, tbStudentService.findAll());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"student"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>student.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>student<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>student<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">this is student.</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"item : $&#123;items&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.id&#125;"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.name&#125;"</span>&gt;</span>name<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item.clazzId&#125;"</span>&gt;</span>name<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp;&amp;nbsp;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">"$&#123;item.clazzId &#125;"</span>&gt;</span>123132<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>即可显示。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.mysql.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.mysql.git&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;修改 POM 文件，添加spring-boot-starter-jdbc依赖：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-jdbc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;添加mysql依赖（spring-boot-starter-jdbc 默认使用tomcat-jdbc数据源，如果要使用其他数据源，需要添加额外的依赖，这里使用了阿里巴巴的数据池管理）：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;druid&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="JdbcTemplate" scheme="https://snjl.github.io/tags/JdbcTemplate/"/>
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
