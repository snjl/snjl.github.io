<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>snjl</title>
  
  <subtitle>我大概率会编程。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://snjl.github.io/"/>
  <updated>2018-12-31T15:58:09.414Z</updated>
  <id>https://snjl.github.io/</id>
  
  <author>
    <name>snjl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos：centos U盘安装卡在 starting dracut initqueue hook</title>
    <link href="https://snjl.github.io/2018/12/31/centos%EF%BC%9Acentos-U%E7%9B%98%E5%AE%89%E8%A3%85%E5%8D%A1%E5%9C%A8-starting-dracut-initqueue-hook/"/>
    <id>https://snjl.github.io/2018/12/31/centos：centos-U盘安装卡在-starting-dracut-initqueue-hook/</id>
    <published>2018-12-31T15:57:09.000Z</published>
    <updated>2018-12-31T15:58:09.414Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tangshiweibbs/article/details/80233828" target="_blank" rel="noopener">https://blog.csdn.net/tangshiweibbs/article/details/80233828</a></p><p>出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ok] Reached target Basic System</span><br><span class="line">或者</span><br><span class="line">[ok] starting dracut initqueue hook</span><br></pre></td></tr></table></figure></p><p>在启动后引导界面按 e 进行编辑,修改掉默认的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setparams &apos;Install CentOS Linux 7&apos;</span><br><span class="line">linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 xdriver=vesa nomodeset quiet</span><br><span class="line">initrdefi /images/pxeboot/initrd.img</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setparams &apos;Install CentOS linux 7&apos;</span><br><span class="line">linuxefi /images/pxeboot/vmlinuz linux dd nomodeset quiet</span><br><span class="line">initrdefi /images/pxeboot/initrd.img</span><br></pre></td></tr></table></figure></p><p>按Ctrl + X 执行上面的修改</p><p>然后启动后屏幕会列出当前机器的硬盘设备也包括你的U盘，一般一个硬盘的话，U盘都是sdb* 这样的【记住你的U盘设备路径】</p><p>我们看到了U盘的名称，前面的设备名称为/dev/sdb4 ，重启，U盘启动，修改引导，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【第二次修改后，注意U盘的设备路径】</span><br><span class="line">setparams &apos;Install CentOS Linux 7&apos;</span><br><span class="line">linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:/dev/sdb4 nomodeset quiet</span><br><span class="line">initrdefi /images/pxeboot/initrd.img</span><br></pre></td></tr></table></figure><p>再次Ctrl + X 执行就可以了(好像上面不需要使用nomodeset quiet)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/tangshiweibbs/article/details/80233828&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/tangshiweibbs
      
    
    </summary>
    
      <category term="centos" scheme="https://snjl.github.io/categories/centos/"/>
    
    
      <category term="centos" scheme="https://snjl.github.io/tags/centos/"/>
    
      <category term="U盘安装" scheme="https://snjl.github.io/tags/U%E7%9B%98%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>centos：安装java</title>
    <link href="https://snjl.github.io/2018/12/31/centos%EF%BC%9A%E5%AE%89%E8%A3%85java/"/>
    <id>https://snjl.github.io/2018/12/31/centos：安装java/</id>
    <published>2018-12-31T15:52:45.000Z</published>
    <updated>2018-12-31T15:53:04.398Z</updated>
    
    <content type="html"><![CDATA[<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-devel</span><br></pre></td></tr></table></figure></p><p>如果使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-xxx-xxx</span><br></pre></td></tr></table></figure></p><p>会出现javac无效的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="centos" scheme="https://snjl.github.io/categories/centos/"/>
    
    
      <category term="centos" scheme="https://snjl.github.io/tags/centos/"/>
    
      <category term="java" scheme="https://snjl.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springboot：使用外部配置文件</title>
    <link href="https://snjl.github.io/2018/12/31/springboot%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://snjl.github.io/2018/12/31/springboot：使用外部配置文件/</id>
    <published>2018-12-31T15:52:09.000Z</published>
    <updated>2018-12-31T15:52:28.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot读取外部配置文件顺序"><a href="#springboot读取外部配置文件顺序" class="headerlink" title="springboot读取外部配置文件顺序"></a>springboot读取外部配置文件顺序</h1><ol><li>第一种是在jar包的同一目录下建一个config文件夹，然后把配置文件放到这个文件夹下。</li><li>第二种是直接把配置文件放到jar包的同级目录。</li><li>第三种在classpath下建一个config文件夹，然后把配置文件放进去。</li><li>第四种是在classpath下直接放配置文件。</li></ol><p>优先级排序分别为1,2,3,4，在此之外，打包时候的配置文件（即src/main/resources 文件夹下创建的application.properties）的优先级最低，均会以上覆盖。</p><p><strong>一般考虑使用在xxx.jar的可执行文件的同级目录增加一个config文件夹，在里面放入application.properties配置文件，优先级最高。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot读取外部配置文件顺序&quot;&gt;&lt;a href=&quot;#springboot读取外部配置文件顺序&quot; class=&quot;headerlink&quot; title=&quot;springboot读取外部配置文件顺序&quot;&gt;&lt;/a&gt;springboot读取外部配置文件顺序&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="配置文件" scheme="https://snjl.github.io/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>mysql：获取表名、列名和全局搜索sql拼接</title>
    <link href="https://snjl.github.io/2018/12/31/mysql%EF%BC%9A%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%90%8D%E3%80%81%E5%88%97%E5%90%8D%E5%92%8C%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2sql%E6%8B%BC%E6%8E%A5/"/>
    <id>https://snjl.github.io/2018/12/31/mysql：获取表名、列名和全局搜索sql拼接/</id>
    <published>2018-12-31T15:51:30.000Z</published>
    <updated>2018-12-31T15:52:10.726Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查找表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'TSCHEMANAME'</span> <span class="keyword">and</span> table_type=<span class="string">'base table'</span></span><br></pre></td></tr></table></figure></li></ol><p>其中SCHEMANAME为要查的数据库。</p><p>python获取表名：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tables</span><span class="params">(cursor)</span>:</span></span><br><span class="line">    cursor.execute(</span><br><span class="line">        <span class="string">"SELECT table_name FROM information_schema.tables WHERE table_schema='SCHOOL' AND table_type='base table'"</span>)</span><br><span class="line">    tables = cursor.fetchall()</span><br><span class="line">    tables = [table[<span class="number">0</span>] <span class="keyword">for</span> table <span class="keyword">in</span> tables]</span><br><span class="line">    <span class="keyword">return</span> tables</span><br></pre></td></tr></table></figure></p><ol start="2"><li>查找列名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> information_schema.Columns <span class="keyword">WHERE</span> table_name=%s <span class="keyword">AND</span> table_schema=%s<span class="string">"</span></span><br></pre></td></tr></table></figure></li></ol><p>其中第一个变量为表名，第二个变量为数据库名。</p><p>python获取列名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_table_columns(cursor, table_name, schema_name):</span><br><span class="line">    cursor.execute(&quot;SELECT column_name FROM information_schema.Columns WHERE table_name=%s AND table_schema=%s&quot;,</span><br><span class="line">                   (table_name, schema_name))</span><br><span class="line">    columns = cursor.fetchall()</span><br><span class="line">    columns = [column[0] for column in columns]</span><br><span class="line">    return columns</span><br></pre></td></tr></table></figure></p><ol start="3"><li>拼接全局查找sql<br>全局查找的sql样式：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">TABLE</span> <span class="keyword">where</span> <span class="string">`id`</span> <span class="keyword">like</span> <span class="string">"%COLUMN%"</span> <span class="keyword">or</span> <span class="string">`name`</span> <span class="keyword">like</span> <span class="string">"%COLUMN%"</span> ...</span><br></pre></td></tr></table></figure></li></ol><p>python拼接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_global_select_sql</span><span class="params">(table_name, word)</span>:</span></span><br><span class="line">    sql = <span class="string">"select * from "</span> + table_name + <span class="string">" where "</span></span><br><span class="line">    columns = get_table_columns(cursor, table_name, schema_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        sql += <span class="string">"`"</span> + column + <span class="string">"`"</span> + <span class="string">" like '%"</span> + word + <span class="string">"%' or "</span></span><br><span class="line"></span><br><span class="line">    sql = sql[:<span class="number">-4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sql</span><br></pre></td></tr></table></figure></p><p>拼接好的sql如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">TABLE</span> <span class="keyword">where</span> <span class="string">`id`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`title`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`author`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`ISBN`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`publisher`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`publisherDateStr`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`publisherDate`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`description`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`price`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`eBookPrice`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`currency`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`rating`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`thumb`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`thumb1`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`fromlink`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`indexTimes`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`verify`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`isPub`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`memo`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`status`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`createUser`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`createDate`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`updateUser`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span> <span class="keyword">or</span> <span class="string">`updateDate`</span> <span class="keyword">like</span> <span class="string">'%WORD%'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;查找表名&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="mysql" scheme="https://snjl.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：在anaconda中使用jupter</title>
    <link href="https://snjl.github.io/2018/12/31/Ubuntu%EF%BC%9A%E5%9C%A8anaconda%E4%B8%AD%E4%BD%BF%E7%94%A8jupter/"/>
    <id>https://snjl.github.io/2018/12/31/Ubuntu：在anaconda中使用jupter/</id>
    <published>2018-12-31T15:49:59.000Z</published>
    <updated>2018-12-31T15:51:11.141Z</updated>
    
    <content type="html"><![CDATA[<p>使用anaconda的环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate NAME</span><br></pre></td></tr></table></figure></p><p>开启环境后，使用python安装jupyter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure></p><h1 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>会生成~/.jupyter/jupyter_notebook_config.py文件。</p><h1 id="自动生成密码"><a href="#自动生成密码" class="headerlink" title="自动生成密码"></a>自动生成密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure><p>会生成密码，生成的密码存储在 jupyter_notebook_config.json。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jupyter notebook password</span><br><span class="line">Enter password:  ****</span><br><span class="line">Verify password: ****</span><br><span class="line">[NotebookPasswordApp] Wrote hashed password to /Users/you/.jupyter/jupyter_notebook_config.json</span><br></pre></td></tr></table></figure></p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p>在最上面增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip=&apos;0.0.0.0&apos;</span><br><span class="line">c.NotebookApp.port =8888</span><br></pre></td></tr></table></figure></p><p>分别指定的是可以访问的ip（网上大部分是设置为*，但是在我这会报错，设置成0.0.0.0可以成功），部署端口。</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p><p>即可开启。如果要后台运行，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure></p><p>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用anaconda的环境：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
      
    
    </summary>
    
      <category term="ubuntu" scheme="https://snjl.github.io/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="anaconda" scheme="https://snjl.github.io/tags/anaconda/"/>
    
      <category term="jupter" scheme="https://snjl.github.io/tags/jupter/"/>
    
  </entry>
  
  <entry>
    <title>centos：常用yum命令</title>
    <link href="https://snjl.github.io/2018/12/31/centos%EF%BC%9A%E5%B8%B8%E7%94%A8yum%E5%91%BD%E4%BB%A4/"/>
    <id>https://snjl.github.io/2018/12/31/centos：常用yum命令/</id>
    <published>2018-12-31T15:48:31.000Z</published>
    <updated>2018-12-31T15:48:46.946Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum update  升级系统</span><br><span class="line"></span><br><span class="line">yum install  ～ 安装指定软件包</span><br><span class="line"></span><br><span class="line">yum update ～ 升级指定软件包</span><br><span class="line"></span><br><span class="line">yum remove ～ 卸载指定软件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.使用YUM查找软件包</span><br><span class="line">命令：yum search ~</span><br><span class="line">2.列出所有可安装的软件包</span><br><span class="line">命令：yum list</span><br><span class="line">3.列出所有可更新的软件包</span><br><span class="line">命令：yum list updates</span><br><span class="line">4.列出所有已安装的软件包</span><br><span class="line">命令：yum list installed</span><br><span class="line">5.列出所有已安装但不在Yum Repository 內的软件包</span><br><span class="line">命令：yum list extras</span><br><span class="line">6.列出所指定软件包</span><br><span class="line">命令：yum list ～</span><br><span class="line">7.使用YUM获取软件包信息</span><br><span class="line">命令：yum info ～</span><br><span class="line">8.列出所有软件包的信息</span><br><span class="line">命令：yum info</span><br><span class="line">9.列出所有可更新的软件包信息</span><br><span class="line">命令：yum info updates</span><br><span class="line">10.列出所有已安裝的软件包信息</span><br><span class="line">命令：yum info installed</span><br><span class="line">11.列出所有已安裝但不在Yum Repository 內的软件包信息</span><br><span class="line">命令：yum info extras</span><br><span class="line">12.列出软件包提供哪些文件</span><br><span class="line">命令：yum provides~</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="centos" scheme="https://snjl.github.io/categories/centos/"/>
    
    
      <category term="centos" scheme="https://snjl.github.io/tags/centos/"/>
    
      <category term="install" scheme="https://snjl.github.io/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>npm：npm install全局安装和当前目录安装</title>
    <link href="https://snjl.github.io/2018/12/31/npm%EF%BC%9Anpm-install%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E5%92%8C%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%AE%89%E8%A3%85/"/>
    <id>https://snjl.github.io/2018/12/31/npm：npm-install全局安装和当前目录安装/</id>
    <published>2018-12-31T15:47:43.000Z</published>
    <updated>2018-12-31T15:48:08.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-npm-install-xxx-g"><a href="#1-npm-install-xxx-g" class="headerlink" title="1. npm install xxx -g"></a>1. npm install xxx -g</h1><p>使用该命令时， 模块将被下载安装到【全局目录】中。</p><p>【全局目录】通过 npm config set prefix “目录路径” 来设置。</p><p>比如说，当我们使用了npm install -g express安装了express框架后， 我们就可以在电脑里的某一个文件夹下，打开控制台，直接使用express mvc创建项目，否则会遇到 “’express’ 不是内部或外部命令，也不是可运行的程序”错误。</p><h1 id="2-npm-install-xxx"><a href="#2-npm-install-xxx" class="headerlink" title="2. npm install xxx"></a>2. npm install xxx</h1><p>使用该命令，则是将模块下载到当前命令行所在目录。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\123&gt;npm install xxx</span><br></pre></td></tr></table></figure></p><p>将会安装到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\123\node_modules\xxx</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-npm-install-xxx-g&quot;&gt;&lt;a href=&quot;#1-npm-install-xxx-g&quot; class=&quot;headerlink&quot; title=&quot;1. npm install xxx -g&quot;&gt;&lt;/a&gt;1. npm install xxx -g&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="npm" scheme="https://snjl.github.io/categories/npm/"/>
    
    
      <category term="npm" scheme="https://snjl.github.io/tags/npm/"/>
    
      <category term="install" scheme="https://snjl.github.io/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>openVPN连不上，显示There are no TAP-Win32 adapters on this system</title>
    <link href="https://snjl.github.io/2018/12/31/openVPN%E8%BF%9E%E4%B8%8D%E4%B8%8A%EF%BC%8C%E6%98%BE%E7%A4%BAThere-are-no-TAP-Win32-adapters-on-this-system/"/>
    <id>https://snjl.github.io/2018/12/31/openVPN连不上，显示There-are-no-TAP-Win32-adapters-on-this-system/</id>
    <published>2018-12-31T15:46:45.000Z</published>
    <updated>2018-12-31T15:47:07.780Z</updated>
    
    <content type="html"><![CDATA[<p>安装TAP-win32即可。</p><p>下载TAP-Win32 </p><p><a href="https://www.updatestar.com/topic/win10" target="_blank" rel="noopener">https://www.updatestar.com/topic/win10</a> tap adapte 0901</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装TAP-win32即可。&lt;/p&gt;
&lt;p&gt;下载TAP-Win32 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.updatestar.com/topic/win10&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.upd
      
    
    </summary>
    
      <category term="vpn" scheme="https://snjl.github.io/categories/vpn/"/>
    
    
      <category term="vpn" scheme="https://snjl.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>@Value无法注入static变量的值</title>
    <link href="https://snjl.github.io/2018/12/31/Value%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5static%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/"/>
    <id>https://snjl.github.io/2018/12/31/Value无法注入static变量的值/</id>
    <published>2018-12-31T15:45:51.000Z</published>
    <updated>2018-12-31T15:46:12.953Z</updated>
    
    <content type="html"><![CDATA[<p>使用@Value注解static类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;env&#125;&quot;)</span><br><span class="line">    private static String env;</span><br><span class="line"> </span><br><span class="line">    public static String getEnv() &#123;</span><br><span class="line">        return env;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void setEnv(String env) &#123;</span><br><span class="line">        MyConfig.env = env;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用上面这种方式，Config.getEnv()会返回null</p><p>正确写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line"> </span><br><span class="line">    private static String env;</span><br><span class="line"> </span><br><span class="line">    public static String getEnv() &#123;</span><br><span class="line">        return env;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Value(&quot;$&#123;env&#125;&quot;)</span><br><span class="line">    public void setEnv(String env) &#123;</span><br><span class="line">        MyConfig.env = env;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使用一个set函数注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用@Value注解static类型：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="注解" scheme="https://snjl.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>mysql：设置sql_mode</title>
    <link href="https://snjl.github.io/2018/12/14/mysql%EF%BC%9A%E8%AE%BE%E7%BD%AEsql-mode/"/>
    <id>https://snjl.github.io/2018/12/14/mysql：设置sql-mode/</id>
    <published>2018-12-14T15:09:32.000Z</published>
    <updated>2018-12-14T15:09:42.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看sql-mode"><a href="#查看sql-mode" class="headerlink" title="查看sql_mode"></a>查看sql_mode</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@sql_mode;</span><br></pre></td></tr></table></figure><p>查询出来的值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure></p><p>去掉需要去掉的后，例如去掉NO_ZERO_DATE，set回去：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> sql_mode=<span class="string">'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'</span>;</span><br></pre></td></tr></table></figure></p><p>这是对于已存在的数据库，改变其sql_mode，但是对于以后新建的数据库，sql_mode的默认值还是一开始查出来的值。</p><h1 id="设置新数据库的sql-mode"><a href="#设置新数据库的sql-mode" class="headerlink" title="设置新数据库的sql_mode"></a>设置新数据库的sql_mode</h1><p>使用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @@sql_mode=<span class="string">'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'</span></span><br></pre></td></tr></table></figure></p><p>改变了全局sql_mode，对于新建的数据库有效，但是仅仅对于这次连接有效。</p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>安装了mysql后，网上说在etc目录中有my.cnf，但是5.7版本好像没有，但是在etc/mysql中有，在该文件夹末尾加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">set sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure></p><p>即没有NO_ZERO_DATE，然后输入service mysql restart重启mysql服务，进入mysql后，输入select @@sql_mode，会发现就是配置文件中设置好的sql_mode。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查看sql-mode&quot;&gt;&lt;a href=&quot;#查看sql-mode&quot; class=&quot;headerlink&quot; title=&quot;查看sql_mode&quot;&gt;&lt;/a&gt;查看sql_mode&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="数据库" scheme="https://snjl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
      <category term="配置" scheme="https://snjl.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>mysql：配置免密码登录</title>
    <link href="https://snjl.github.io/2018/12/14/mysql%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>https://snjl.github.io/2018/12/14/mysql：配置免密码登录/</id>
    <published>2018-12-14T15:08:46.000Z</published>
    <updated>2018-12-14T15:09:11.437Z</updated>
    
    <content type="html"><![CDATA[<p>配置/etc/mysql/my.cnf，在后面加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">user=user</span><br><span class="line">password=password</span><br></pre></td></tr></table></figure></p><p>user和password分别填入相应的用户名和密码，然后service mysql restart重启服务，命令行输入mysql即可登录。</p><p>如果想要输入密码登录，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;配置/etc/mysql/my.cnf，在后面加入：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
      <category term="数据库" scheme="https://snjl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
      <category term="配置" scheme="https://snjl.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>mysql：表名、字段大小写问题</title>
    <link href="https://snjl.github.io/2018/12/14/mysql%EF%BC%9A%E8%A1%A8%E5%90%8D%E3%80%81%E5%AD%97%E6%AE%B5%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/"/>
    <id>https://snjl.github.io/2018/12/14/mysql：表名、字段大小写问题/</id>
    <published>2018-12-14T15:07:17.000Z</published>
    <updated>2018-12-14T15:09:01.563Z</updated>
    
    <content type="html"><![CDATA[<p>在MySQL中，数据库和表都是对应目录下的一个或多个文件。因此，操作系统的大小写是否敏感决定了数据库大小写是否敏感。而在Windows中是对大小写不敏感的（Linux是对大小写敏感的）。</p><p>在linux的mysql中，输入<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"lower%"</span>;</span><br></pre></td></tr></table></figure></p><p>可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+-------+</span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| lower_case_file_system | OFF   |</span><br><span class="line">| lower_case_table_names | 0     |</span><br><span class="line">+------------------------+-------+</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="lower-case-table-names参数说明"><a href="#lower-case-table-names参数说明" class="headerlink" title="lower_case_table_names参数说明"></a>lower_case_table_names参数说明</h1><h2 id="当值为0时"><a href="#当值为0时" class="headerlink" title="当值为0时"></a>当值为0时</h2><p>使用CREATE TABLE或CREATE DATABASE语句制定的大小写字母在硬盘上保存表名和数据库名。名称比较对大小写敏感。在大小写不敏感的操作系统如windows</p><p>或Max OS x上我们不能将参数设为0，如果再大小写不敏感的文件系统上将“lower_case_table_names”强制设置为0，并使用不同的大小写访问MyISAM表名，可能会导</p><p>致索引破坏。</p><h2 id="当值为1时"><a href="#当值为1时" class="headerlink" title="当值为1时"></a>当值为1时</h2><p>表名在硬盘上以小写保存，名称比较对大小写不敏感。MySQL将所有表名转换为小写存储和查找表上。该行为也适合数据库名和表的别名，该值为Windows的默认值。</p><h2 id="当值为2时"><a href="#当值为2时" class="headerlink" title="当值为2时"></a>当值为2时</h2><p>表名和数据库名在硬盘上使用CREATETABLE或CREATE DATABASE语句指定的大小写字母进行保存，但MySQL将它们转换为小写在查找表上。名称比较对大小写不敏感，即按照大小写来保存，按照小写来比较。注意：只在对大小写不敏感的文件系统上适用！innodb表名用小写保存。</p><p>在MySql上为了避免大小写问题引来的不必要的麻烦，建议都将“lower_case_tables_name”设置值为1。我们可以用其他的方式来命名。</p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p>修改/etc/mysql/my.cnf，在[mysqld]下面加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure></p><p>使用service mysql restart重启服务。</p><p>这时候进入mysql，输入<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"lower%"</span>;</span><br></pre></td></tr></table></figure></p><p>可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+-------+</span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| lower_case_file_system | OFF   |</span><br><span class="line">| lower_case_table_names | 1     |</span><br><span class="line">+------------------------+-------+</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MySQL中，数据库和表都是对应目录下的一个或多个文件。因此，操作系统的大小写是否敏感决定了数据库大小写是否敏感。而在Windows中是对大小写不敏感的（Linux是对大小写敏感的）。&lt;/p&gt;
&lt;p&gt;在linux的mysql中，输入&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;variables&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;lower%&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+------------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name          | Value |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| lower_case_file_system | OFF   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| lower_case_table_names | 0     |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://snjl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
      <category term="配置" scheme="https://snjl.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>mysql：sql_mode配置解析</title>
    <link href="https://snjl.github.io/2018/12/14/mysql%EF%BC%9Asql-mode%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://snjl.github.io/2018/12/14/mysql：sql-mode配置解析/</id>
    <published>2018-12-14T15:05:11.000Z</published>
    <updated>2018-12-14T15:07:30.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ONLY-FULL-GROUP-BY"><a href="#ONLY-FULL-GROUP-BY" class="headerlink" title="ONLY_FULL_GROUP_BY"></a>ONLY_FULL_GROUP_BY</h1><p>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中。简而言之，就是SELECT后面接的列必须被GROUP BY后面接的列所包含。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select a,b from table group by a,b,c;  # 正确</span><br><span class="line">select a,b,c from table group by a,b;  # 错误</span><br></pre></td></tr></table></figure></p><p>这个配置会使得GROUP BY语句环境变得十分狭窄，所以一般都不加这个配置</p><a id="more"></a><h1 id="NO-AUTO-VALUE-ON-ZERO"><a href="#NO-AUTO-VALUE-ON-ZERO" class="headerlink" title="NO_AUTO_VALUE_ON_ZERO"></a>NO_AUTO_VALUE_ON_ZERO</h1><p>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。（不信的可以试试，默认的sql_mode你在自增主键列设置为0，该字段会自动变为最新的自增值，效果和null一样），如果用户希望插入的值为0（不改变），该列又是自增长的，那么这个选项就有用了。</p><h1 id="STRICT-TRANS-TABLES"><a href="#STRICT-TRANS-TABLES" class="headerlink" title="STRICT_TRANS_TABLES"></a>STRICT_TRANS_TABLES</h1><p>在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制。（InnoDB默认事务表，MyISAM默认非事务表；MySQL事务表支持将批处理当做一个完整的任务统一提交或回滚，即对包含在事务中的多条语句要么全执行，要么全部不执行。非事务表则不支持此种操作，批处理中的语句如果遇到错误，在错误前的语句执行成功，之后的则不执行；MySQL事务表有表锁与行锁非事务表则只有表锁）</p><h1 id="NO-ZERO-IN-DATE"><a href="#NO-ZERO-IN-DATE" class="headerlink" title="NO_ZERO_IN_DATE"></a>NO_ZERO_IN_DATE</h1><p>在严格模式下，不允许日期和月份为零</p><h1 id="NO-ZERO-DATE"><a href="#NO-ZERO-DATE" class="headerlink" title="NO_ZERO_DATE"></a>NO_ZERO_DATE</h1><p>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告。</p><h1 id="ERROR-FOR-DIVISION-BY-ZERO"><a href="#ERROR-FOR-DIVISION-BY-ZERO" class="headerlink" title="ERROR_FOR_DIVISION_BY_ZERO"></a>ERROR_FOR_DIVISION_BY_ZERO</h1><p>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如 果未给出该模式，那么数据被零除时MySQL返回NULL</p><h1 id="NO-AUTO-CREATE-USER"><a href="#NO-AUTO-CREATE-USER" class="headerlink" title="NO_AUTO_CREATE_USER"></a>NO_AUTO_CREATE_USER</h1><p>禁止GRANT创建密码为空的用户</p><h1 id="NO-ENGINE-SUBSTITUTION"><a href="#NO-ENGINE-SUBSTITUTION" class="headerlink" title="NO_ENGINE_SUBSTITUTION"></a>NO_ENGINE_SUBSTITUTION</h1><p>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p><h1 id="PIPES-AS-CONCAT"><a href="#PIPES-AS-CONCAT" class="headerlink" title="PIPES_AS_CONCAT"></a>PIPES_AS_CONCAT</h1><p>将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似</p><h1 id="ANSI-QUOTES"><a href="#ANSI-QUOTES" class="headerlink" title="ANSI_QUOTES"></a>ANSI_QUOTES</h1><p>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ONLY-FULL-GROUP-BY&quot;&gt;&lt;a href=&quot;#ONLY-FULL-GROUP-BY&quot; class=&quot;headerlink&quot; title=&quot;ONLY_FULL_GROUP_BY&quot;&gt;&lt;/a&gt;ONLY_FULL_GROUP_BY&lt;/h1&gt;&lt;p&gt;对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中。简而言之，就是SELECT后面接的列必须被GROUP BY后面接的列所包含。如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select a,b from table group by a,b,c;  # 正确&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select a,b,c from table group by a,b;  # 错误&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个配置会使得GROUP BY语句环境变得十分狭窄，所以一般都不加这个配置&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://snjl.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
      <category term="配置" scheme="https://snjl.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：安装anaconda</title>
    <link href="https://snjl.github.io/2018/12/14/Ubuntu%EF%BC%9A%E5%AE%89%E8%A3%85anaconda/"/>
    <id>https://snjl.github.io/2018/12/14/Ubuntu：安装anaconda/</id>
    <published>2018-12-14T15:03:41.000Z</published>
    <updated>2018-12-14T15:04:51.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-5.3.1-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-5.3.1-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>安装完后测试conda命令。</p><a id="more"></a><h1 id="conda无效"><a href="#conda无效" class="headerlink" title="conda无效"></a>conda无效</h1><p>添加环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>添加后，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>更新环境变量，这时候输入conda list能看到如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># packages in environment at /root/anaconda3:</span><br><span class="line">#</span><br><span class="line"># Name                    Version                   Build  Channel</span><br><span class="line">_ipyw_jlab_nb_ext_conf    0.1.0                    py37_0</span><br><span class="line">alabaster                 0.7.11                   py37_0</span><br><span class="line">anaconda                  5.3.1                    py37_0</span><br><span class="line">anaconda-client           1.7.2                    py37_0</span><br><span class="line">anaconda-navigator        1.9.2                    py37_0</span><br><span class="line">anaconda-project          0.8.2                    py37_0</span><br><span class="line">appdirs                   1.4.3            py37h28b3542_0</span><br><span class="line">asn1crypto                0.24.0                   py37_0</span><br><span class="line">astroid                   2.0.4                    py37_0</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><h1 id="anaconda指定版本安装"><a href="#anaconda指定版本安装" class="headerlink" title="anaconda指定版本安装"></a>anaconda指定版本安装</h1><p>例如安装python3.6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda intall python=3.6</span><br></pre></td></tr></table></figure></p><h1 id="conda常见命令"><a href="#conda常见命令" class="headerlink" title="conda常见命令"></a>conda常见命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conda install package//安装包 </span><br><span class="line">conda list//查看已安装的包 </span><br><span class="line">conda update package//更新包 </span><br><span class="line">conda remove package//移除包</span><br><span class="line"></span><br><span class="line">conda update --all //更新当前环境下安装的全部package到最新版本</span><br><span class="line"></span><br><span class="line">conda update python //更新当前环境下python版本到当前python版本的最新版本</span><br><span class="line"></span><br><span class="line">conda env list //查看现在有的环境</span><br></pre></td></tr></table></figure><h1 id="创建管理环境"><a href="#创建管理环境" class="headerlink" title="创建管理环境"></a>创建管理环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name NAME</span><br></pre></td></tr></table></figure><p>其中NAME是指定的名称。</p><p>可以在这里指定需要的环境，由于python也是conda的包，所以也可以指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name NAME python=3.6 tensorflow</span><br></pre></td></tr></table></figure></p><h1 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate NAME</span><br></pre></td></tr></table></figure><h1 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate</span><br></pre></td></tr></table></figure><h1 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env remove -n NAME</span><br></pre></td></tr></table></figure><h1 id="拷贝环境"><a href="#拷贝环境" class="headerlink" title="拷贝环境"></a>拷贝环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --clone tensorflow --name tf</span><br></pre></td></tr></table></figure><p>其中，前一个名字是被拷贝的，后一个名字是新的名字。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://repo.anaconda.com/archive/Anaconda3-5.3.1-Linux-x86_64.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash Anaconda3-5.3.1-Linux-x86_64.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完后测试conda命令。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="anaconda" scheme="https://snjl.github.io/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>使用单点登录的原因</title>
    <link href="https://snjl.github.io/2018/12/14/%E4%BD%BF%E7%94%A8%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>https://snjl.github.io/2018/12/14/使用单点登录的原因/</id>
    <published>2018-12-14T14:58:38.000Z</published>
    <updated>2018-12-14T15:01:07.445Z</updated>
    
    <content type="html"><![CDATA[<p>单点登录（SingleSignOn），简称为SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。<br><strong>通常情况下运维内控审计系统、4A系统或者都包含此项功能，目的是简化账号登录过程并保护账号和密码安全，对账号进行统一管理。</strong></p><p>在此不考虑单点登录在多个应用下的登录问题，讨论其安全问题。</p><p>每个应用有一个域名，根据这个域名去申请apikey和apisecret，其中apikey我认为可以暴露，通过前端链接到authorize，带上apikey和redirect_uri，登录成功后就可以获得一个code并且返回到该uri，后端再通过这个code和apikey，apisecret去authorize获取这个用户的信息，并且拿到一个token，然后把这个用户存入session即可。</p><p>这样做可以保证使用apisecret的时候是在后端，不会被暴露，而且整个登录流程除了开始的链接到认证，和后面通过获得code再去链接到认证获取用户的token，其中所有的用户登录，用户认证都是在authorize完成的，这可以保证某一个应用获取不到用户的账号密码，只能获取到用户的基本信息，而且是可以暴露的一些基本信息，所以可以说是比较安全的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单点登录（SingleSignOn），简称为SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。&lt;br&gt;&lt;strong&gt;通常情况下运维内控审计系统、4A系统或者都包含此项功能，目的是简化账号
      
    
    </summary>
    
      <category term="理论" scheme="https://snjl.github.io/categories/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="单点登录" scheme="https://snjl.github.io/tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：使用nohup和&amp;进行后台运行，进程查看和终止</title>
    <link href="https://snjl.github.io/2018/12/12/Ubuntu%EF%BC%9A%E4%BD%BF%E7%94%A8nohup%E5%92%8C-%E8%BF%9B%E8%A1%8C%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%EF%BC%8C%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%E5%92%8C%E7%BB%88%E6%AD%A2/"/>
    <id>https://snjl.github.io/2018/12/12/Ubuntu：使用nohup和-进行后台运行，进程查看和终止/</id>
    <published>2018-12-12T12:38:22.000Z</published>
    <updated>2018-12-14T15:03:46.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h1><p>用途：不挂断地运行命令。</p><p>语法：nohup Command [ Arg … ] [　&amp; ]</p><ul><li>无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。</li><li>如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。</li><li>如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。</li></ul><p>退出状态：该命令返回下列出口值： 　　</p><ul><li>126 可以查找但不能调用 Command 参数指定的命令。 　　</li><li>127 nohup 命令发生错误或不能查找由 Command 参数指定的命令。 　　</li></ul><p>否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。</p><a id="more"></a><h1 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h1><p>用途：在后台运行</p><p>一般两个一起用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &amp;</span><br></pre></td></tr></table></figure></p><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &gt; myout.file 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，输出被重定向到myout.file文件中。 </p><h1 id="nohup与-amp-的区别："><a href="#nohup与-amp-的区别：" class="headerlink" title="nohup与&amp;的区别："></a>nohup与&amp;的区别：</h1><p><strong>nohup只是让命令忽略SIGHUP命令而已；&amp;则让命令在后台运行，至于该命令是否能在脱离终端后继续执行则要看进程是否是守护进程，如果不是，则需要nohup来帮忙。</strong></p><h1 id="查看某个端口的进程"><a href="#查看某个端口的进程" class="headerlink" title="查看某个端口的进程"></a>查看某个端口的进程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:80</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">node    27295 root   19u  IPv4 527052      0t0  TCP *:http (LISTEN)</span><br><span class="line">node    27295 root   24u  IPv4 528732      0t0  TCP ubuntu:http-&gt;xxx.xxx.xxx.xxx:50367 (ESTABLISHED)</span><br></pre></td></tr></table></figure></p><h1 id="终止后台运行的进程"><a href="#终止后台运行的进程" class="headerlink" title="终止后台运行的进程"></a>终止后台运行的进程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><p>pid为进程号。</p><h1 id="nohup不产生日志"><a href="#nohup不产生日志" class="headerlink" title="nohup不产生日志"></a>nohup不产生日志</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar item-2.0.1-SNAPSHOT.jar 2 &gt;error.log &amp;</span><br></pre></td></tr></table></figure><p>0、1和2分别表示标准输入、标准输出和标准错误信息输出，可以用来指定需要重定向的标准输入或输出。</p><p>在一般使用时，默认的是标准输出，既1.当我们需要特殊用途时，可以使用其他标号。例如，将program.sh的错误信息输出到log文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./program.sh 2&gt;log</span><br></pre></td></tr></table></figure></p><p>这样标准输出还是在屏幕上，但是错误信息会输出到log文件中。<br>另外，也可以实现0，1，2之间的重定向。</p><p>2&gt;&amp;1：将错误信息重定向到标准输出。</p><p>Linux下还有一个特殊的文件<strong>/dev/null</strong>，它就像一个无底洞，所有重定向到它的信息都会消失得无影无踪。这一点非常有用，当我们不需要回显程序的所有信息时，就可以将输出重定向到/dev/null。<br>如果想要正常输出和错误信息都不显示，则要把标准输出和标准错误都重定向到/dev/null， 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls 1&gt;/dev/null 2&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>这样不会有任何输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsss 1&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>因为lsss不是一条合法命令，但是使用的是1（标准输入），所以还是会报错；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsss 2&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>使用2（标准错误信息输出），输出的错误会被吞掉，所以不会有任何输出；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls 1&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>ls是标准命令，但是使用1吞掉了标准输出，所以不会有任何输出。</p><p>还有一种做法是将错误重定向到标准输出，然后再重定向到 /dev/null，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>注意：此处的顺序不能更改，否则达不到想要的效果，此时先将标准输出重定向到 /dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了/dev/null，因此标准错误也会重定向到/dev/null，于是一切静悄悄:-)</p><p>由于使用nohup时，会自动将输出写入nohup.out文件中，如果文件很大的话，nohup.out就会不停的增大，这是我们不希望看到的，因此，可以利用/dev/null来解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./program.sh &gt;/dev/null 2&gt;log &amp;</span><br></pre></td></tr></table></figure><p>这样在跑程序的时候，只将错误信息输出到log文件中。</p><p>如果什么信息都不要，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./program.sh &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>(好像没用？)</p><h1 id="使用nohup失效原因"><a href="#使用nohup失效原因" class="headerlink" title="使用nohup失效原因"></a>使用nohup失效原因</h1><p>用putty连接ubuntu，要执行一个后台命令</p><p>正常用nohup直接运行命令，就可以在后台运行</p><p>nohup ./1.sh &amp;</p><p>但关闭putty后，发现命令也停止了</p><p>问题出在，直接点putty的右上角X关闭按钮，nohup也会停止</p><p><strong>解决：直接在putty中输入exit退出即可</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nohup&quot;&gt;&lt;a href=&quot;#nohup&quot; class=&quot;headerlink&quot; title=&quot;nohup&quot;&gt;&lt;/a&gt;nohup&lt;/h1&gt;&lt;p&gt;用途：不挂断地运行命令。&lt;/p&gt;
&lt;p&gt;语法：nohup Command [ Arg … ] [　&amp;amp; ]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。&lt;/li&gt;
&lt;li&gt;如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。&lt;/li&gt;
&lt;li&gt;如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;退出状态：该命令返回下列出口值： 　　&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;126 可以查找但不能调用 Command 参数指定的命令。 　　&lt;/li&gt;
&lt;li&gt;127 nohup 命令发生错误或不能查找由 Command 参数指定的命令。 　　&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="nohup" scheme="https://snjl.github.io/tags/nohup/"/>
    
      <category term="安全守护" scheme="https://snjl.github.io/tags/%E5%AE%89%E5%85%A8%E5%AE%88%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：安装npm和node</title>
    <link href="https://snjl.github.io/2018/12/12/Ubuntu%EF%BC%9A%E5%AE%89%E8%A3%85npm%E5%92%8Cnode/"/>
    <id>https://snjl.github.io/2018/12/12/Ubuntu：安装npm和node/</id>
    <published>2018-12-12T12:37:04.000Z</published>
    <updated>2018-12-12T12:39:48.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装nodejs：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs-legacy</span><br></pre></td></tr></table></figure><p>安装npm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><h1 id="nodejs和npm更新"><a href="#nodejs和npm更新" class="headerlink" title="nodejs和npm更新"></a>nodejs和npm更新</h1><p>npm更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g</span><br></pre></td></tr></table></figure><p>更新Nodejs自身：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n </span><br><span class="line">n latest</span><br></pre></td></tr></table></figure><p>使用npm -v和node -v查看版本号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;安装nodejs：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="npm" scheme="https://snjl.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：修改root密码</title>
    <link href="https://snjl.github.io/2018/12/12/Ubuntu%EF%BC%9A%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/"/>
    <id>https://snjl.github.io/2018/12/12/Ubuntu：修改root密码/</id>
    <published>2018-12-12T12:36:35.000Z</published>
    <updated>2018-12-12T12:36:47.958Z</updated>
    
    <content type="html"><![CDATA[<p>安装完系统后可以设置root密码，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo root</span><br></pre></td></tr></table></figure><p>可以创建root的密码。</p><p>修改root密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装完系统后可以设置root密码，输入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu：安装java</title>
    <link href="https://snjl.github.io/2018/12/12/Ubuntu%EF%BC%9A%E5%AE%89%E8%A3%85java/"/>
    <id>https://snjl.github.io/2018/12/12/Ubuntu：安装java/</id>
    <published>2018-12-12T12:35:38.000Z</published>
    <updated>2018-12-12T12:35:56.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过apt-get-的方式安装jdk"><a href="#通过apt-get-的方式安装jdk" class="headerlink" title="通过apt-get 的方式安装jdk"></a>通过apt-get 的方式安装jdk</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update //sudo表示超级用户，如果是在root用户下可以不写</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>安装完后的目录在：/usr/lib/jvm/java-8-openjdk-amd64<br>echo $JAVA_HOME，没有结果；javac -version可以显示版本。</p><h1 id="然后配置JAVA-HOME-JRE-HOME-PATH，配置文件的位置：-etc-profile"><a href="#然后配置JAVA-HOME-JRE-HOME-PATH，配置文件的位置：-etc-profile" class="headerlink" title="然后配置JAVA_HOME,JRE_HOME,PATH，配置文件的位置：/etc/profile"></a>然后配置JAVA_HOME,JRE_HOME,PATH，配置文件的位置：/etc/profile</h1><p>在内容中加入下面的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>执行完之后，source /etc/profile ，使变动生效，不需用重启</p><h1 id="用echo-JAVA-HOME检查是否配置成功"><a href="#用echo-JAVA-HOME检查是否配置成功" class="headerlink" title="用echo $JAVA_HOME检查是否配置成功"></a>用echo $JAVA_HOME检查是否配置成功</h1><h1 id="javac不成功"><a href="#javac不成功" class="headerlink" title="javac不成功"></a>javac不成功</h1><p>显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">The program &apos;javac&apos; can be found in the following packages:</span><br><span class="line"> * default-jdk</span><br><span class="line"> * ecj</span><br><span class="line"> * gcj-5-jdk</span><br><span class="line"> * openjdk-8-jdk-headless</span><br><span class="line"> * gcj-4.8-jdk</span><br><span class="line"> * gcj-4.9-jdk</span><br><span class="line"> * openjdk-9-jdk-headless</span><br><span class="line">Try: apt install &lt;selected package&gt;</span><br></pre></td></tr></table></figure><p>使用命令apt install default-jdk即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;通过apt-get-的方式安装jdk&quot;&gt;&lt;a href=&quot;#通过apt-get-的方式安装jdk&quot; class=&quot;headerlink&quot; title=&quot;通过apt-get 的方式安装jdk&quot;&gt;&lt;/a&gt;通过apt-get 的方式安装jdk&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
      <category term="服务器" scheme="https://snjl.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="ubuntu" scheme="https://snjl.github.io/tags/ubuntu/"/>
    
      <category term="mysql" scheme="https://snjl.github.io/tags/mysql/"/>
    
      <category term="java" scheme="https://snjl.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springboot：项目启动时初始化资源</title>
    <link href="https://snjl.github.io/2018/12/12/springboot%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E8%B5%84%E6%BA%90/"/>
    <id>https://snjl.github.io/2018/12/12/springboot：项目启动时初始化资源/</id>
    <published>2018-12-12T12:33:46.000Z</published>
    <updated>2018-12-12T12:34:15.664Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/snjl/springboot.CommandLineRunner.git" target="_blank" rel="noopener">https://github.com/snjl/springboot.CommandLineRunner.git</a></p><p>在我们实际工作中，总会遇到这样需求，在项目启动的时候需要做一些初始化的操作，比如初始化线程池，提前加载好加密证书等。今天就给大家介绍一个 Spring Boot 神器，专门帮助大家解决项目启动初始化资源操作。</p><a id="more"></a><p>这个神器就是 CommandLineRunner，CommandLineRunner 接口的 Component 会在所有 Spring Beans 都初始化之后，SpringApplication.run() 之前执行，非常适合在应用程序启动之初进行一些数据初始化的工作。</p><p>接下来我们就运用案例测试它如何使用，在测试之前在启动类加两行打印提示，方便我们识别 CommandLineRunner 的执行时机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineRunnerApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"The service to start."</span>);</span><br><span class="line">SpringApplication.run(CommandLineRunnerApplication.class, args);</span><br><span class="line">System.out.println(<span class="string">"The service has started."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们直接创建一个类继承 CommandLineRunner ，并实现它的 run() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The Runner start to initialize ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在 run() 方法中打印了一些参数来看出它的执行时机。完成之后启动项目进行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">The service to start.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.0.RELEASE)</span><br><span class="line">...</span><br><span class="line">2018-04-21 22:21:34.706  INFO 27016 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2018-04-21 22:21:34.710  INFO 27016 --- [           main] com.neo.CommandLineRunnerApplication     : Started CommandLineRunnerApplication in 3.796 seconds (JVM running for 5.128)</span><br><span class="line">The Runner start to initialize ...</span><br><span class="line">The service has started.</span><br></pre></td></tr></table></figure><p>根据控制台的打印信息我们可以看出 CommandLineRunner 中的方法会在 Spring Boot 容器加载之后执行，执行完成后项目启动完成。</p><p>如果我们在启动容器的时候需要初始化很多资源，并且初始化资源相互之间有序，那如何保证不同的 CommandLineRunner 的执行顺序呢？Spring Boot 也给出了解决方案。那就是使用 @Order 注解。</p><p>我们创建两个 CommandLineRunner 的实现类来进行测试：</p><p>第一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderRunner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The OrderRunner1 start to initialize ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderRunner2</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The OrderRunner2 start to initialize ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加完成之后重新启动，观察执行顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">The service to start.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.0.RELEASE)</span><br><span class="line">...</span><br><span class="line">2018-04-21 22:21:34.706  INFO 27016 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2018-04-21 22:21:34.710  INFO 27016 --- [           main] com.neo.CommandLineRunnerApplication     : Started CommandLineRunnerApplication in 3.796 seconds (JVM running for 5.128)</span><br><span class="line">The OrderRunner1 start to initialize ...</span><br><span class="line">The OrderRunner2 start to initialize ...</span><br><span class="line">The Runner start to initialize ...</span><br><span class="line">The service has started.</span><br></pre></td></tr></table></figure><p>通过控制台的输出我们发现，添加 @Order 注解的实现类最先执行，并且@Order()里面的值越小启动越早。</p><p>在实践中，使用ApplicationRunner也可以达到相同的目的，两着差别不大。看来使用 Spring Boot 解决初始化资源的问题非常简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/snjl/springboot.CommandLineRunner.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/snjl/springboot.CommandLineRunner.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在我们实际工作中，总会遇到这样需求，在项目启动的时候需要做一些初始化的操作，比如初始化线程池，提前加载好加密证书等。今天就给大家介绍一个 Spring Boot 神器，专门帮助大家解决项目启动初始化资源操作。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://snjl.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://snjl.github.io/tags/springboot/"/>
    
      <category term="初始化" scheme="https://snjl.github.io/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
</feed>
